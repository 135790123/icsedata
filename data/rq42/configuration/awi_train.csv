,source,target
0,"public InputSource resolveEntity(String publicId, String systemId) throws SAXException {
String resolved = resolver.getResolvedEntity(publicId, systemId);
if (resolved != null) {
String badFilePrefix = ""file://"";
String correctFilePrefix = ""file:///"";
if (resolved.startsWith(badFilePrefix) && !resolved.startsWith(correctFilePrefix)) {
resolved = correctFilePrefix + resolved.substring(badFilePrefix.length());
}
try {
InputSource iSource = new InputSource(resolved);
iSource.setPublicId(publicId);
URL url = new URL(resolved);
InputStream iStream = url.openStream();
iSource.setByteStream(iStream);
return iSource;
} catch (Exception e) {
log.debug(""Failed to create InputSource for "" + resolved + "" ("" + e.toString() + "")"");
return null;
}
}
return null;
}",0
1,"private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof Date) {
synchronized (PListNodeBuilder.FORMAT) {
out.println(padding + ""<date>"" + PListNodeBuilder.FORMAT.format((Date) value) + ""</date>"");
}
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(padding + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(padding + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(padding + ""<true/>"");
} else {
out.println(padding + ""<false/>"");
}
} else if (value instanceof List) {
out.println(padding + ""<array>"");
for (Object o : (List<?>) value) {
printValue(out, indentLevel + 1, o);
}
out.println(padding + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
@SuppressWarnings(""unchecked"")
HierarchicalConfiguration<ImmutableNode> config = (HierarchicalConfiguration<ImmutableNode>) value;
printNode(out, indentLevel, config.getNodeModel().getNodeHandler().getRootNode());
} else if (value instanceof Configuration) {
out.println(padding + ""<dict>"");
Configuration config = (Configuration) value;
Iterator<String> it = config.getKeys();
while (it.hasNext()) {
String key = it.next();
ImmutableNode node = new ImmutableNode.Builder().name(key).value(config.getProperty(key)).create();
printNode(out, indentLevel + 1, node);
if (it.hasNext()) {
out.println();
}
}
out.println(padding + ""</dict>"");
} else if (value instanceof Map) {
Map<String, Object> map = transformMap((Map<?, ?>) value);
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
String base64 = new String(Base64.encodeBase64((byte[]) value));
out.println(padding + ""<data>"" + StringEscapeUtils.escapeXml(base64) + ""</data>"");
} else if (value != null) {
out.println(padding + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
} else {
out.println(padding + ""<string/>"");
}
}",1
2,"public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer((ConfigurationNode) subNodes.get(positionToIndex(getPosition())));
}",1
3,"protected BeanDeclaration createBeanDeclaration(ConfigurationNode node) {
List<HierarchicalConfiguration> list = getConfiguration().configurationsAt(node.getName());
if (list.size() == 1) {
return new XMLBeanDeclaration((SubnodeConfiguration) list.get(0), node);
} else {
Iterator<HierarchicalConfiguration> iter = list.iterator();
while (iter.hasNext()) {
SubnodeConfiguration config = (SubnodeConfiguration) iter.next();
if (config.getRootNode().equals(node)) {
return new XMLBeanDeclaration(config, node);
}
}
throw new ConfigurationRuntimeException(""Unable to match node for "" + node.getName());
}
}",1
4,"static File constructFile(String basePath, String fileName) {
File file = null;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
StringBuffer fName = new StringBuffer();
fName.append(basePath);
if (!basePath.endsWith(File.separator)) {
fName.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
fName.append(fileName.substring(2));
} else {
fName.append(fileName);
}
file = new File(fName.toString());
}
return file;
}",0
5,"static File constructFile(String basePath, String fileName) {
File file;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
StringBuilder fName = new StringBuilder();
fName.append(basePath);
if (!basePath.endsWith(File.separator)) {
fName.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
fName.append(fileName.substring(2));
} else {
fName.append(fileName);
}
file = new File(fName.toString());
}
return file;
}",0
6,"protected Object resolveContainerStore(String key) {
Object value = getProperty(key);
if (value != null) {
if (value instanceof List) {
List list = (List) value;
value = list.isEmpty() ? null : list.get(0);
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
value = array.length == 0 ? null : array[0];
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
value = array.length == 0 ? null : array[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
value = array.length == 0 ? null : new Byte(array[0]);
} else if (value instanceof short[]) {
short[] array = (short[]) value;
value = array.length == 0 ? null : new Short(array[0]);
} else if (value instanceof int[]) {
int[] array = (int[]) value;
value = array.length == 0 ? null : new Integer(array[0]);
} else if (value instanceof long[]) {
long[] array = (long[]) value;
value = array.length == 0 ? null : new Long(array[0]);
} else if (value instanceof float[]) {
float[] array = (float[]) value;
value = array.length == 0 ? null : new Float(array[0]);
} else if (value instanceof double[]) {
double[] array = (double[]) value;
value = array.length == 0 ? null : new Double(array[0]);
}
}
return value;
}",1
7,"static Object toInternetAddress(final Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
final Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(String.class);
return ctor.newInstance(value);
} catch (final Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}",0
8,private ResultSet resultSet;,0
9,"static File constructFile(String basePath, String fileName) {
File file;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
StringBuilder fName = new StringBuilder();
fName.append(basePath);
if (!basePath.endsWith(File.separator)) {
fName.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
fName.append(fileName.substring(2));
} else {
fName.append(fileName);
}
file = new File(fName.toString());
}
return file;
}",0
10,"private String readFully(Reader in) {
try (BufferedReader r = new BufferedReader(in)) {
String str = null;
StringBuilder sb = new StringBuilder();
while ((str = r.readLine()) != null) {
sb.append(str);
}
return sb.toString();
} catch (IOException e) {
throw new RuntimeException(e);
}
}",1
11,"@Override
@SuppressWarnings(""unchecked"")
public NodePointer createNodePointer(final NodePointer parent, final QName name, final Object bean) {
if (bean instanceof NodeWrapper) {
final NodeWrapper<?> wrapper = (NodeWrapper<?>) bean;
return new ConfigurationNodePointer((ConfigurationNodePointer) parent, wrapper.getNode(), wrapper.getNodeHandler());
}
return null;
}",0
12,"public static Float toFloat(final Object value) throws ConversionException {
final Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
}
return new Float(n.floatValue());
}",1
13,"private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}",0
14,"@Override
public void clear() {
fireEvent(EVENT_CLEAR, null, null, true);
StringBuilder query = new StringBuilder(""DELETE FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_CLEAR, null, null, e);
} finally {
close(conn, pstmt, null);
}
fireEvent(EVENT_CLEAR, null, null, false);
}",1
15,"private String sourceURLAsString() {
return sourceURL != null ? sourceURL.toExternalForm() : StringUtils.EMPTY;
}",0
16,"@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}",1
17,"static File constructFile(String basePath, String fileName) {
File file = null;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
StringBuffer fName = new StringBuffer();
fName.append(basePath);
if (!basePath.endsWith(File.separator)) {
fName.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
fName.append(fileName.substring(2));
} else {
fName.append(fileName);
}
file = new File(fName.toString());
}
return file;
}",0
18,private final HttpFileSystemConfigBuilder httpBuilder;,1
19,"@Override
protected void clearPropertyDirect(String key) {
StringBuilder query = new StringBuilder(""DELETE FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_CLEAR_PROPERTY, key, null, e);
} finally {
close(conn, pstmt, null);
}
}",1
20,"public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List list = (List) value;
Iterator iterator = list.iterator();
while (iterator.hasNext()) {
getConfiguration().addProperty(name, iterator.next());
}
} else if (value instanceof int[]) {
int[] array = (int[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Integer(array[i]));
}
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(array[i]));
}
} else if (value instanceof char[]) {
char[] array = (char[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Character(array[i]));
}
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Byte(array[i]));
}
} else if (value instanceof short[]) {
short[] array = (short[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Short(array[i]));
}
} else if (value instanceof long[]) {
long[] array = (long[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Long(array[i]));
}
} else if (value instanceof float[]) {
float[] array = (float[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Float(array[i]));
}
} else if (value instanceof double[]) {
double[] array = (double[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Double(array[i]));
}
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, array[i]);
}
} else {
getConfiguration().setProperty(name, value);
}
}",1
21,"@Override
public void read(final Reader in) throws ConfigurationException {
final EntityResolver resolver = (publicId, systemId) -> new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
final XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
final SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
final SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (final Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
22,"private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}",1
23,"private FileSystemOptions getOptions(final String scheme) {
if (scheme == null) {
return null;
}
final FileSystemOptions opts = new FileSystemOptions();
FileSystemConfigBuilder builder;
try {
builder = getManager().getFileSystemConfigBuilder(scheme);
} catch (final Exception ex) {
return null;
}
final FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
final Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (final Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (final Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}",0
24,"public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List list = (List) value;
Iterator iterator = list.iterator();
while (iterator.hasNext()) {
getConfiguration().addProperty(name, iterator.next());
}
} else if (value instanceof int[]) {
int[] array = (int[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Integer(array[i]));
}
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(array[i]));
}
} else if (value instanceof char[]) {
char[] array = (char[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Character(array[i]));
}
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Byte(array[i]));
}
} else if (value instanceof short[]) {
short[] array = (short[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Short(array[i]));
}
} else if (value instanceof long[]) {
long[] array = (long[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Long(array[i]));
}
} else if (value instanceof float[]) {
float[] array = (float[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Float(array[i]));
}
} else if (value instanceof double[]) {
double[] array = (double[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Double(array[i]));
}
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, array[i]);
}
} else {
getConfiguration().setProperty(name, value);
}
}",1
25,"static File constructFile(String basePath, String fileName) {
File file;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
file = new File(appendPath(basePath, fileName));
}
return file;
}",0
26,"private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}",0
27,"static File constructFile(String basePath, String fileName) {
File file;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
file = new File(appendPath(basePath, fileName));
}
return file;
}",0
28,public PrintStream debugStream = System.out;,0
29,"static File constructFile(String basePath, String fileName) {
File file;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
StringBuilder fName = new StringBuilder();
fName.append(basePath);
if (!basePath.endsWith(File.separator)) {
fName.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
fName.append(fileName.substring(2));
} else {
fName.append(fileName);
}
file = new File(fName.toString());
}
return file;
}",0
30,"public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}",1
31,"public long getLong(String key, long defaultValue) {
return getLong(key, new Long(defaultValue)).longValue();
}",1
32,"private void setProperty(final FileSystemConfigBuilder builder, final FileSystemOptions options, final String key, final Object value) {
final String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
final Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
final Method method = builder.getClass().getMethod(methodName, paramTypes);
final Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (final Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}",0
33,"final public Node Property() throws ParseException {
Node node = new Node();
String key = String();
node.setName(key);
jj_consume_token(EQUAL);
Object value = Element();
node.setValue(value);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DICT_SEPARATOR:
jj_consume_token(DICT_SEPARATOR);
break;
default:
jj_la1[1] = jj_gen;
;
}
return node;
}",0
34,"private boolean checkDetailEvents(int limit) {
synchronized (listeners) {
return detailEvents > limit;
}
}",0
35,"public Resource[] getLocations() {
return locations;
}",1
36,private AutoSaveListener autoSaveListener;,0
37,"public boolean removeNodes(String name) {
if (nodes != null && name != null) {
List lst = (List) namedNodes.remove(name);
if (lst != null) {
detachNodes(lst);
nodes.removeAll(lst);
return true;
}
}
return false;
}",1
38,"public static Short toShort(Object value) throws ConversionException {
Number n = toNumber(value, Short.class);
if (n instanceof Short) {
return (Short) n;
} else {
return new Short(n.shortValue());
}
}",1
39,"public List getSubNodes(String name) {
if (name == null) {
return getSubNodes();
}
List result;
if (nodes == null) {
result = null;
} else {
result = (List) namedNodes.get(name);
}
return (result == null) ? Collections.EMPTY_LIST : Collections.unmodifiableList(result);
}",0
40,"static File constructFile(String basePath, String fileName) {
File file;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
StringBuilder fName = new StringBuilder();
fName.append(basePath);
if (!basePath.endsWith(File.separator)) {
fName.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
fName.append(fileName.substring(2));
} else {
fName.append(fileName);
}
file = new File(fName.toString());
}
return file;
}",0
41,"public DynaProperty getDynaProperty(String name) {
if (log.isTraceEnabled()) {
log.trace(""getDynaProperty("" + name + "")"");
}
if (name == null) {
throw new IllegalArgumentException(""No such property name=["" + name + ""]"");
}
Object value = configuration.getProperty(name);
if (value == null) {
return null;
} else {
Class type = value.getClass();
if (type == Byte.class) {
type = Byte.TYPE;
}
if (type == Character.class) {
type = Character.TYPE;
} else if (type == Boolean.class) {
type = Boolean.TYPE;
} else if (type == Double.class) {
type = Double.TYPE;
} else if (type == Float.class) {
type = Float.TYPE;
} else if (type == Integer.class) {
type = Integer.TYPE;
} else if (type == Long.class) {
type = Long.TYPE;
} else if (type == Short.class) {
type = Short.TYPE;
}
return new DynaProperty(name, type);
}
}",1
42,"public Configuration[] getConfigurations() {
return configurations;
}",1
43,"public static HierarchicalConfiguration convertToHierarchical(Configuration conf, ExpressionEngine engine) {
if (conf == null) {
return null;
}
if (conf instanceof HierarchicalConfiguration) {
HierarchicalConfiguration hc;
if (conf instanceof Reloadable) {
Object lock = ((Reloadable) conf).getReloadLock();
synchronized (lock) {
hc = new BaseHierarchicalConfiguration((HierarchicalConfiguration) conf);
}
} else {
hc = (HierarchicalConfiguration) conf;
}
if (engine != null) {
hc.setExpressionEngine(engine);
}
return hc;
} else {
BaseHierarchicalConfiguration hc = new BaseHierarchicalConfiguration();
if (engine != null) {
hc.setExpressionEngine(engine);
}
hc.append(conf);
return hc;
}
}",1
44,"public short getShort(String key, short defaultValue) {
return getShort(key, new Short(defaultValue)).shortValue();
}",1
45,"public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List list = (List) value;
Iterator iterator = list.iterator();
while (iterator.hasNext()) {
getConfiguration().addProperty(name, iterator.next());
}
} else if (value instanceof int[]) {
int[] array = (int[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Integer(array[i]));
}
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(array[i]));
}
} else if (value instanceof char[]) {
char[] array = (char[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Character(array[i]));
}
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Byte(array[i]));
}
} else if (value instanceof short[]) {
short[] array = (short[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Short(array[i]));
}
} else if (value instanceof long[]) {
long[] array = (long[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Long(array[i]));
}
} else if (value instanceof float[]) {
float[] array = (float[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Float(array[i]));
}
} else if (value instanceof double[]) {
double[] array = (double[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Double(array[i]));
}
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, array[i]);
}
} else {
getConfiguration().setProperty(name, value);
}
}",1
46,"public Iterator<String> getKeys() {
Collection<String> keys = new ArrayList<String>();
StringBuilder query = new StringBuilder(""SELECT DISTINCT "" + keyColumn + "" FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
ResultSet rs = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
rs = pstmt.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt, rs);
}
return keys.iterator();
}",1
47,"static File constructFile(String basePath, String fileName) {
File file;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
file = new File(appendPath(basePath, fileName));
}
return file;
}",0
48,"public boolean reload(boolean checkReload) {
synchronized (reloadLock) {
if (noReload == 0) {
try {
enterNoReload();
if (strategy.reloadingRequired()) {
if (getLogger().isInfoEnabled()) {
getLogger().info(""Reloading configuration. URL is "" + getURL());
}
fireEvent(EVENT_RELOAD, null, getURL(), true);
setDetailEvents(false);
boolean autoSaveBak = this.isAutoSave();
this.setAutoSave(false);
try {
clear();
load();
} finally {
this.setAutoSave(autoSaveBak);
setDetailEvents(true);
}
fireEvent(EVENT_RELOAD, null, getURL(), false);
strategy.reloadingPerformed();
}
} catch (Exception e) {
fireError(EVENT_RELOAD, null, null, e);
if (checkReload) {
return false;
}
} finally {
exitNoReload();
}
}
}
return true;
}",0
49,"private void load(InputSource source) throws ConfigurationException {
try {
URL sourceURL = getDelegate().getURL();
if (sourceURL != null) {
source.setSystemId(sourceURL.toString());
}
DocumentBuilder builder = createDocumentBuilder();
Document newDocument = builder.parse(source);
Document oldDocument = document;
document = null;
initProperties(newDocument, oldDocument == null);
document = (oldDocument == null) ? newDocument : oldDocument;
} catch (Exception e) {
throw new ConfigurationException(""Unable to load the configuration"", e);
}
}",1
50,"static File constructFile(String basePath, String fileName) {
File file;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
StringBuilder fName = new StringBuilder();
fName.append(basePath);
if (!basePath.endsWith(File.separator)) {
fName.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
fName.append(fileName.substring(2));
} else {
fName.append(fileName);
}
file = new File(fName.toString());
}
return file;
}",0
51,"@Override
protected String normalizeURI(String uriref) {
ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
String resolved = ci != null ? String.valueOf(ci.interpolate(uriref)) : uriref;
return super.normalizeURI(resolved);
}",0
52,private final EventListener<ConfigurationEvent> changeListener;,0
53,"public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List list = (List) value;
Iterator iterator = list.iterator();
while (iterator.hasNext()) {
getConfiguration().addProperty(name, iterator.next());
}
} else if (value instanceof int[]) {
int[] array = (int[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Integer(array[i]));
}
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(array[i]));
}
} else if (value instanceof char[]) {
char[] array = (char[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Character(array[i]));
}
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Byte(array[i]));
}
} else if (value instanceof short[]) {
short[] array = (short[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Short(array[i]));
}
} else if (value instanceof long[]) {
long[] array = (long[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Long(array[i]));
}
} else if (value instanceof float[]) {
float[] array = (float[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Float(array[i]));
}
} else if (value instanceof double[]) {
double[] array = (double[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Double(array[i]));
}
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, array[i]);
}
} else {
getConfiguration().setProperty(name, value);
}
}",1
54,"public static Byte toByte(Object value) throws ConversionException {
Number n = toNumber(value, Byte.class);
if (n instanceof Byte) {
return (Byte) n;
} else {
return new Byte(n.byteValue());
}
}",1
55,"public static Float toFloat(Object value) throws ConversionException {
Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
} else {
return new Float(n.floatValue());
}
}",0
56,"static File constructFile(String basePath, String fileName) {
File file;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
StringBuffer fName = new StringBuffer();
fName.append(basePath);
if (!basePath.endsWith(File.separator)) {
fName.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
fName.append(fileName.substring(2));
} else {
fName.append(fileName);
}
file = new File(fName.toString());
}
return file;
}",0
57,"public void setValue(final Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
final String val = (String) value;
final String name = StringUtils.removeStartIgnoreCase(val, CLASS);
final Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (final Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}",0
58,private List<ConfigData> configurations = new ArrayList<ConfigData>();,0
59,"@Override
public void setRootNode(ConfigurationNode rootNode) {
if (configs != null) {
this.getCurrentConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}",0
60,private FileLocator locator;,0
61,"static File constructFile(String basePath, String fileName) {
File file;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
StringBuilder fName = new StringBuilder();
fName.append(basePath);
if (!basePath.endsWith(File.separator)) {
fName.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
fName.append(fileName.substring(2));
} else {
fName.append(fileName);
}
file = new File(fName.toString());
}
return file;
}",0
62,"private final int jjMoveNfa_0(int startState, int curPos) {
int startsAt = 0;
jjnewStateCnt = 9;
int i = 1;
jjstateSet[0] = startState;
int kind = 0x7fffffff;
for (; ; ) {
if (++jjround == 0x7fffffff)
ReInitRounds();
if (curChar < 64) {
long l = 1L << curChar;
MatchLoop: do {
switch(jjstateSet[--i]) {
case 9:
if ((0xfffffffbffffffffL & l) != 0L)
jjCheckNAddStates(0, 2);
else if (curChar == 34) {
if (kind > 20)
kind = 20;
}
break;
case 10:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
}
if ((0x3ff000100002600L & l) != 0L)
jjCheckNAddTwoStates(1, 2);
else if (curChar == 62) {
if (kind > 18)
kind = 18;
}
break;
case 0:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
} else if (curChar == 34)
jjCheckNAddStates(0, 2);
if (curChar == 60)
jjCheckNAddTwoStates(1, 2);
break;
case 1:
if ((0x3ff000100002600L & l) != 0L)
jjCheckNAddTwoStates(1, 2);
break;
case 2:
if (curChar == 62 && kind > 18)
kind = 18;
break;
case 3:
if ((0xd7ffecfaffffd9ffL & l) == 0L)
break;
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
break;
case 4:
case 6:
if (curChar == 34)
jjCheckNAddStates(0, 2);
break;
case 5:
if ((0xfffffffbffffffffL & l) != 0L)
jjCheckNAddStates(0, 2);
break;
case 8:
if (curChar == 34 && kind > 20)
kind = 20;
break;
default:
break;
}
} while (i != startsAt);
} else if (curChar < 128) {
long l = 1L << (curChar & 077);
MatchLoop: do {
switch(jjstateSet[--i]) {
case 9:
jjCheckNAddStates(0, 2);
if (curChar == 92)
jjstateSet[jjnewStateCnt++] = 6;
break;
case 10:
if ((0xd7ffffffffffffffL & l) != 0L) {
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
}
if ((0x7e0000007eL & l) != 0L)
jjCheckNAddTwoStates(1, 2);
break;
case 0:
case 3:
if ((0xd7ffffffffffffffL & l) == 0L)
break;
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
break;
case 1:
if ((0x7e0000007eL & l) != 0L)
jjCheckNAddTwoStates(1, 2);
break;
case 5:
jjCheckNAddStates(0, 2);
break;
case 7:
if (curChar == 92)
jjstateSet[jjnewStateCnt++] = 6;
break;
default:
break;
}
} while (i != startsAt);
} else {
int i2 = (curChar & 0xff) >> 6;
long l2 = 1L << (curChar & 077);
MatchLoop: do {
switch(jjstateSet[--i]) {
case 9:
case 5:
if ((jjbitVec0[i2] & l2) != 0L)
jjCheckNAddStates(0, 2);
break;
case 10:
case 3:
if ((jjbitVec0[i2] & l2) == 0L)
break;
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
break;
case 0:
if ((jjbitVec0[i2] & l2) == 0L)
break;
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
break;
default:
break;
}
} while (i != startsAt);
}
if (kind != 0x7fffffff) {
jjmatchedKind = kind;
jjmatchedPos = curPos;
kind = 0x7fffffff;
}
++curPos;
if ((i = jjnewStateCnt) == (startsAt = 9 - (jjnewStateCnt = startsAt)))
return curPos;
try {
curChar = input_stream.readChar();
} catch (IOException e) {
return curPos;
}
}
}",0
63,"private ConfigurationBuilderEvent createEventWithChangedSource(final ConfigurationBuilderEvent event) {
if (ConfigurationBuilderResultCreatedEvent.RESULT_CREATED.equals(event.getEventType())) {
return new ConfigurationBuilderResultCreatedEvent(this, ConfigurationBuilderResultCreatedEvent.RESULT_CREATED, ((ConfigurationBuilderResultCreatedEvent) event).getConfiguration());
}
@SuppressWarnings(""unchecked"")
final EventType<? extends ConfigurationBuilderEvent> type = (EventType<? extends ConfigurationBuilderEvent>) event.getEventType();
return new ConfigurationBuilderEvent(this, type);
}",0
64,"static File constructFile(String basePath, String fileName) {
File file;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
file = new File(appendPath(basePath, fileName));
}
return file;
}",0
65,"private static boolean checkCombineLines(String line) {
int bsCount = 0;
for (int idx = line.length() - 1; idx >= 0 && line.charAt(idx) == '\\'; idx--) {
bsCount++;
}
return bsCount % 2 == 1;
}",1
66,"public void setDetailEvents(boolean enable) {
synchronized (listeners) {
if (enable) {
detailEvents++;
} else {
detailEvents--;
}
}
}",0
67,"public float getFloat(String key, float defaultValue) {
return getFloat(key, new Float(defaultValue)).floatValue();
}",1
68,"private void registerBeanFactory() {
synchronized (getClass()) {
if (!BeanHelper.registeredFactoryNames().contains(CONFIG_BEAN_FACTORY_NAME)) {
BeanHelper.registerBeanFactory(CONFIG_BEAN_FACTORY_NAME, new ConfigurationBeanFactory());
}
}
}",0
69,"protected void performReloadCheck() {
for (Iterator it = configurations.iterator(); it.hasNext(); ) {
try {
((ConfigData) it.next()).getConfiguration().getProperty(PROP_RELOAD_CHECK);
} catch (Exception ex) {
;
}
}
}",1
70,"protected Object resolveContainerStore(String key) {
Object value = getProperty(key);
if (value != null) {
if (value instanceof List) {
List list = (List) value;
value = list.isEmpty() ? null : list.get(0);
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
value = array.length == 0 ? null : array[0];
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
value = array.length == 0 ? null : array[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
value = array.length == 0 ? null : new Byte(array[0]);
} else if (value instanceof short[]) {
short[] array = (short[]) value;
value = array.length == 0 ? null : new Short(array[0]);
} else if (value instanceof int[]) {
int[] array = (int[]) value;
value = array.length == 0 ? null : new Integer(array[0]);
} else if (value instanceof long[]) {
long[] array = (long[]) value;
value = array.length == 0 ? null : new Long(array[0]);
} else if (value instanceof float[]) {
float[] array = (float[]) value;
value = array.length == 0 ? null : new Float(array[0]);
} else if (value instanceof double[]) {
double[] array = (double[]) value;
value = array.length == 0 ? null : new Double(array[0]);
}
}
return value;
}",1
71,"public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List list = (List) value;
Iterator iterator = list.iterator();
while (iterator.hasNext()) {
getConfiguration().addProperty(name, iterator.next());
}
} else if (value instanceof int[]) {
int[] array = (int[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Integer(array[i]));
}
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(array[i]));
}
} else if (value instanceof char[]) {
char[] array = (char[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Character(array[i]));
}
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Byte(array[i]));
}
} else if (value instanceof short[]) {
short[] array = (short[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Short(array[i]));
}
} else if (value instanceof long[]) {
long[] array = (long[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Long(array[i]));
}
} else if (value instanceof float[]) {
float[] array = (float[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Float(array[i]));
}
} else if (value instanceof double[]) {
double[] array = (double[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Double(array[i]));
}
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, array[i]);
}
} else {
getConfiguration().setProperty(name, value);
}
}",1
72,"public byte getByte(String key, byte defaultValue) {
return getByte(key, new Byte(defaultValue)).byteValue();
}",1
73,"static File constructFile(String basePath, String fileName) {
File file;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
StringBuilder fName = new StringBuilder();
fName.append(basePath);
if (!basePath.endsWith(File.separator)) {
fName.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
fName.append(fileName.substring(2));
} else {
fName.append(fileName);
}
file = new File(fName.toString());
}
return file;
}",0
74,"public double getDouble(String key, double defaultValue) {
return getDouble(key, new Double(defaultValue)).doubleValue();
}",1
75,"private static Class<?> getDefaultClass(Object bean, String propName) {
try {
PropertyDescriptor desc = BEAN_UTILS_BEAN.getPropertyUtils().getPropertyDescriptor(bean, propName);
if (desc == null) {
return null;
}
return desc.getPropertyType();
} catch (Exception ex) {
return null;
}
}",0
76,private ConfigurationNode rootNode;,0
77,"private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}",0
78,"private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}",0
79,"public static Synchronizer cloneSynchronizer(Synchronizer sync) {
if (sync == null) {
throw new IllegalArgumentException(""Synchronizer must not be null!"");
}
if (NoOpSynchronizer.INSTANCE == sync) {
return sync;
}
try {
return sync.getClass().newInstance();
} catch (Exception ex) {
LOG.info(""Cannot create new instance of "" + sync.getClass());
}
try {
return (Synchronizer) clone(sync);
} catch (CloneNotSupportedException cnex) {
throw new ConfigurationRuntimeException(""Cannot clone Synchronizer "" + sync);
}
}",0
80,"@Override
public void read(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}",0
81,"public void save(Document document, Node parent) {
Element properties = document.createElement(""properties"");
parent.appendChild(properties);
if (getHeader() != null) {
Element comment = document.createElement(""comment"");
properties.appendChild(comment);
comment.setTextContent(StringEscapeUtils.escapeXml(getHeader()));
}
Iterator<String> keys = getKeys();
while (keys.hasNext()) {
String key = keys.next();
Object value = getProperty(key);
if (value instanceof List) {
writeProperty(document, properties, key, (List<?>) value);
} else {
writeProperty(document, properties, key, value);
}
}
}",0
82,private ConfigurationSourceData sourceData;,0
83,"static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(String.class);
return ctor.newInstance(value);
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}",0
84,"public static Double toDouble(Object value) throws ConversionException {
Number n = toNumber(value, Double.class);
if (n instanceof Double) {
return (Double) n;
} else {
return new Double(n.doubleValue());
}
}",0
85,"public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}",0
86,private final String protocol;,0
87,"@Override
public void read(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
88,"@Override
public void read(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
89,"@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}",0
90,private final QueryResult<T> attributeResult;,0
91,private final NodeHandler<T> handler;,0
92,"@Override
@SuppressWarnings(""unchecked"")
public NodePointer createNodePointer(NodePointer parent, QName name, Object bean) {
if (bean instanceof NodeWrapper) {
NodeWrapper<?> wrapper = (NodeWrapper<?>) bean;
return new ConfigurationNodePointer((ConfigurationNodePointer) parent, wrapper.getNode(), wrapper.getNodeHandler());
}
return null;
}",0
93,"public float getFloat(String key, float defaultValue) {
return getFloat(key, new Float(defaultValue)).floatValue();
}",0
94,"public void load(InputStream in, String encoding) throws ConfigurationException {
Reader reader = null;
if (encoding != null) {
try {
reader = new InputStreamReader(in, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (reader == null) {
reader = new InputStreamReader(in);
}
load(reader);
}",0
95,"public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writer = null;
if (encoding != null) {
try {
writer = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writer == null) {
writer = new OutputStreamWriter(out);
}
save(writer);
}",0
96,"private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}",0
97,private List<ConfigData> configurations;,0
98,"@Override
protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertyListConfiguration();
} else {
return new PropertyListConfiguration();
}
}",0
99,"static File constructFile(String basePath, String fileName) {
File file;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
StringBuilder fName = new StringBuilder();
fName.append(basePath);
if (!basePath.endsWith(File.separator)) {
fName.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
fName.append(fileName.substring(2));
} else {
fName.append(fileName);
}
file = new File(fName.toString());
}
return file;
}",0
100,protected Configuration configuration;,0
101,"public Iterator<String> getKeys() {
Collection<String> keys = new ArrayList<String>();
StringBuilder query = new StringBuilder(""SELECT DISTINCT "" + keyColumn + "" FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
ResultSet rs = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
rs = pstmt.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt, rs);
}
return keys.iterator();
}",0
102,"public boolean containsKey(String key) {
boolean found = false;
StringBuilder query = new StringBuilder(""SELECT * FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
ResultSet rs = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
rs = pstmt.executeQuery();
found = rs.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt, rs);
}
return found;
}",0
103,"public boolean isEmpty() {
boolean empty = true;
StringBuilder query = new StringBuilder(""SELECT count(*) FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
ResultSet rs = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
rs = pstmt.executeQuery();
if (rs.next()) {
empty = rs.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt, rs);
}
return empty;
}",0
104,"public Object createBean(Class<?> beanClass, BeanDeclaration data, Object param) throws Exception {
ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
String tagName = decl.getNode().getName();
ConfigurationProvider provider = decl.getConfigurationBuilder().providerForTag(tagName);
if (provider == null) {
throw new ConfigurationRuntimeException(""No ConfigurationProvider registered for tag "" + tagName);
}
try {
AbstractConfiguration config = provider.getConfiguration(decl);
installInterpolator(decl, config);
return config;
} catch (Exception ex) {
if (!decl.isOptional()) {
throw ex;
} else {
if (logger.isDebugEnabled()) {
logger.debug(""Load failed for optional configuration "" + tagName + "": "" + ex.getMessage());
}
decl.getConfigurationBuilder().fireError(EVENT_ERR_LOAD_OPTIONAL, decl.getConfiguration().getString(ATTR_NAME), null, ex);
if (decl.isForceCreate()) {
try {
return provider.getEmptyConfiguration(decl);
} catch (Exception ex2) {
logger.warn(""Could not create instance of optional configuration "" + tagName, ex2);
}
}
return null;
}
}
}",0
105,"private final StrLookup combinedConfigLookup = new StrLookup() {
@Override
public String lookup(String key) {
if (constructedConfiguration != null) {
Object value = constructedConfiguration.resolveContainerStore(key);
return (value != null) ? value.toString() : null;
}
return null;
}
};",0
106,"private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File parent = file.getParentFile();
if (parent != null && !parent.exists()) {
parent.mkdirs();
}
}
}
}",0
107,private NodeCombiner nodeCombiner;,0
108,private ConfigurationNode rootNode;,0
109,private final Object reloadLock;,0
110,"public Lock(String name) {
this.name = name;
synchronized (counterLock) {
instanceId = ++counter;
}
}",0
111,"@Override
public void setRootNode(ConfigurationNode rootNode) {
if (init) {
this.getConfiguration().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}",0
112,private ReloadingStrategy fileStrategy;,0
113,"@Override
public void setRootNode(ConfigurationNode rootNode) {
if (init) {
getConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}",0
114,"public static Float toFloat(Object value) throws ConversionException {
Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
} else {
return new Float(n.floatValue());
}
}",0
115,"public static Double toDouble(Object value) throws ConversionException {
Number n = toNumber(value, Double.class);
if (n instanceof Double) {
return (Double) n;
} else {
return new Double(n.doubleValue());
}
}",0
116,"static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(new Class[] { String.class });
return ctor.newInstance(new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}",0
117,"private FileSystemOptions getOptions(String scheme) {
FileSystemOptions opts = new FileSystemOptions();
FileSystemConfigBuilder builder;
try {
builder = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}",0
118,"private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}",0
119,"private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}",0
120,private EntityResolver entityResolver = new DefaultEntityResolver();,0
121,"private XMLNode convertToXMLNode(ConfigurationNode node) {
if (node instanceof XMLNode) {
return (XMLNode) node;
}
XMLNode nd = (XMLNode) createNode(node.getName());
nd.setValue(node.getValue());
nd.setAttribute(node.isAttribute());
for (ConfigurationNode child : node.getChildren()) {
nd.addChild(convertToXMLNode(child));
}
for (ConfigurationNode attr : node.getAttributes()) {
nd.addAttribute(convertToXMLNode(attr));
}
return nd;
}",0
122,"@Override
public void load(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
123,"protected BeanDeclaration createBeanDeclaration(ConfigurationNode node) {
List<HierarchicalConfiguration> list = getConfiguration().configurationsAt(node.getName());
if (list.size() == 1) {
return new XMLBeanDeclaration((SubnodeConfiguration) list.get(0), node);
} else {
Iterator<HierarchicalConfiguration> iter = list.iterator();
while (iter.hasNext()) {
SubnodeConfiguration config = (SubnodeConfiguration) iter.next();
if (config.getRootNode().equals(node)) {
return new XMLBeanDeclaration(config, node);
}
}
throw new ConfigurationRuntimeException(""Unable to match node for "" + node.getName());
}
}",0
124,"public void load(Reader in) throws ConfigurationException {
if (!(getRootNode() instanceof PListNode)) {
initRoot();
}
EntityResolver resolver = new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler(getRoot());
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
125,"private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof Date) {
synchronized (PListNode.FORMAT) {
out.println(padding + ""<date>"" + PListNode.FORMAT.format((Date) value) + ""</date>"");
}
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(padding + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(padding + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(padding + ""<true/>"");
} else {
out.println(padding + ""<false/>"");
}
} else if (value instanceof List) {
out.println(padding + ""<array>"");
Iterator<?> it = ((List<?>) value).iterator();
while (it.hasNext()) {
printValue(out, indentLevel + 1, it.next());
}
out.println(padding + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRoot());
} else if (value instanceof Configuration) {
out.println(padding + ""<dict>"");
Configuration config = (Configuration) value;
Iterator<String> it = config.getKeys();
while (it.hasNext()) {
String key = it.next();
Node node = new Node(key);
node.setValue(config.getProperty(key));
printNode(out, indentLevel + 1, node);
if (it.hasNext()) {
out.println();
}
}
out.println(padding + ""</dict>"");
} else if (value instanceof Map) {
Map<String, Object> map = transformMap((Map<?, ?>) value);
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
String base64 = new String(Base64.encodeBase64((byte[]) value));
out.println(padding + ""<data>"" + StringEscapeUtils.escapeXml(base64) + ""</data>"");
} else if (value != null) {
out.println(padding + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
} else {
out.println(padding + ""<string/>"");
}
}",0
126,"public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}",0
127,"private String getName(File file) {
String name = configuration.getURL().toString();
if (name == null) {
if (file != null) {
name = file.getAbsolutePath();
} else {
name = ""base: "" + configuration.getBasePath() + ""file: "" + configuration.getFileName();
}
}
return name;
}",0
128,"public void init() {
if (configuration.getURL() == null && configuration.getFileName() == null) {
return;
}
if (this.configuration == null) {
throw new IllegalStateException(""No configuration has been set for this strategy"");
}
updateLastModified();
}",0
129,"@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = ConfigurationUtils.locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}",0
130,"@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = ConfigurationUtils.locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}",0
131,"public List<ConfigurationNode> getSubNodes(String name) {
if (name == null) {
return getSubNodes();
}
List<ConfigurationNode> result;
if (nodes == null) {
result = null;
} else {
result = namedNodes.get(name);
}
if (result == null) {
return Collections.emptyList();
} else {
return Collections.unmodifiableList(result);
}
}",0
132,"public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer(subNodes.get(positionToIndex(getPosition())));
}",0
133,private ConfigurationNode node;,0
134,"@Override
public void visitBeforeChildren(final ImmutableNode node, final NodeHandler<ImmutableNode> handler) {
final ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
updateNode(node, refHandler);
insertNewChildNodes(node, refHandler);
}",0
135,"public static void dump(final ImmutableConfiguration configuration, final PrintStream out) {
dump(configuration, new PrintWriter(out));
}",0
136,"protected PreparedStatement createStatement(final String sql, final boolean nameCol) throws SQLException {
final String statement;
if (nameCol && configurationNameColumn != null) {
final StringBuilder buf = new StringBuilder(sql);
buf.append("" AND "").append(configurationNameColumn).append(""=?"");
statement = buf.toString();
} else {
statement = sql;
}
pstmt = getConnection().prepareStatement(statement);
return pstmt;
}",0
137,"@Override
public void read(final InputStream in) throws ConfigurationException, IOException {
load(new InputSource(in));
}",0
138,"@Override
public void read(final Reader in) throws ConfigurationException {
final SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
final SAXParser parser = factory.newSAXParser();
final XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver((publicId, systemId) -> new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd"")));
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (final Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}",0
139,"private static Class<?> getDefaultClass(final Object bean, final String propName) {
try {
final PropertyDescriptor desc = BEAN_UTILS_BEAN.getPropertyUtils().getPropertyDescriptor(bean, propName);
if (desc == null) {
return null;
}
return desc.getPropertyType();
} catch (final Exception ex) {
return null;
}
}",0
140,"// [ERROR] Medium: Class org.apache.commons.configuration2.builder.ConfigurationBuilderResultCreatedEvent defines
private final ImmutableConfiguration configuration;",0
141,private AutoSaveListener autoSaveListener;,0
142,private ConfigurationSourceData sourceData;,0
143,"private ConfigurationBuilderEvent createEventWithChangedSource(final ConfigurationBuilderEvent event) {
if (ConfigurationBuilderResultCreatedEvent.RESULT_CREATED.equals(event.getEventType())) {
return new ConfigurationBuilderResultCreatedEvent(this, ConfigurationBuilderResultCreatedEvent.RESULT_CREATED, ((ConfigurationBuilderResultCreatedEvent) event).getConfiguration());
}
@SuppressWarnings(""unchecked"")
final EventType<? extends ConfigurationBuilderEvent> type = (EventType<? extends ConfigurationBuilderEvent>) event.getEventType();
return new ConfigurationBuilderEvent(this, type);
}",0
144,"@Override
public CombinedConfiguration getConfiguration() throws ConfigurationException {
final CombinedConfiguration result = super.getConfiguration();
reloadingController.resetReloadingState();
return result;
}",0
145,"private String sourceURLAsString() {
return sourceURL != null ? sourceURL.toExternalForm() : StringUtils.EMPTY;
}",0
146,private final String protocol;,0
147,"private void setProperty(final FileSystemConfigBuilder builder, final FileSystemOptions options, final String key, final Object value) {
final String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
final Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
final Method method = builder.getClass().getMethod(methodName, paramTypes);
final Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (final Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}",0
148,"@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
final String base = ((CatalogManager) catalogManager).getBaseDir();
final Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
final String fileName = catalogs.elementAt(count);
URL url = null;
InputStream inputStream = null;
try {
url = locate(fs, base, fileName);
if (url != null) {
inputStream = fs.getInputStream(url);
}
} catch (final ConfigurationException ce) {
final String name = url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (inputStream != null) {
final String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, inputStream);
continue;
}
} catch (final Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
inputStream.close();
}
}
parseCatalog(base, fileName);
}
}
}",0
149,"@Override
protected String normalizeURI(final String uriref) {
final ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
final String resolved = ci != null ? String.valueOf(ci.interpolate(uriref)) : uriref;
return super.normalizeURI(resolved);
}",0
150,private final NodeHandler<T> handler;,0
151,"@Override
@SuppressWarnings(""unchecked"")
public NodePointer createNodePointer(final NodePointer parent, final QName name, final Object bean) {
if (bean instanceof NodeWrapper) {
final NodeWrapper<Object> wrapper = (NodeWrapper<Object>) bean;
return new ConfigurationNodePointer<>((ConfigurationNodePointer<Object>) parent, wrapper.getNode(), wrapper.getNodeHandler());
}
return null;
}",0
152,"public long getLong(String key, long defaultValue) {
return getLong(key, new Long(defaultValue)).longValue();
}",0
153,"public float getFloat(String key, float defaultValue) {
return getFloat(key, new Float(defaultValue)).floatValue();
}",0
154,"public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writer = null;
if (encoding != null) {
try {
writer = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writer == null) {
writer = new OutputStreamWriter(out);
}
save(writer);
}",0
155,private List<ConfigData> configurations;,0
156,"private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}",0
157,"private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}",0
158,"@Override
protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertyListConfiguration();
} else {
return new PropertyListConfiguration();
}
}",0
159,"@Override
protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertiesConfiguration();
} else {
return new PropertiesConfiguration();
}
}",0
160,"public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}",0
161,"@Override
public void clear() {
fireEvent(EVENT_CLEAR, null, null, true);
StringBuilder query = new StringBuilder(""DELETE FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_CLEAR, null, null, e);
} finally {
close(conn, pstmt);
}
fireEvent(EVENT_CLEAR, null, null, false);
}",0
162,"public boolean isEmpty() {
boolean empty = true;
StringBuilder query = new StringBuilder(""SELECT count(*) FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
if (rs.next()) {
empty = rs.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return empty;
}",0
163,"public boolean isEmpty() {
boolean empty = true;
StringBuilder query = new StringBuilder(""SELECT count(*) FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
if (rs.next()) {
empty = rs.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return empty;
}",0
164,"public Iterator<String> getKeys() {
Collection<String> keys = new ArrayList<String>();
StringBuilder query = new StringBuilder(""SELECT DISTINCT "" + keyColumn + "" FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return keys.iterator();
}",0
165,"@Override
protected void addPropertyDirect(String key, Object obj) {
StringBuilder query = new StringBuilder(""INSERT INTO "" + table);
if (nameColumn != null) {
query.append("" ("" + nameColumn + "", "" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?, ?)"");
} else {
query.append("" ("" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?)"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
int index = 1;
if (nameColumn != null) {
pstmt.setString(index++, name);
}
pstmt.setString(index++, key);
pstmt.setString(index++, String.valueOf(obj));
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_ADD_PROPERTY, key, obj, e);
} finally {
close(conn, pstmt);
}
}",0
166,"public boolean containsKey(String key) {
boolean found = false;
StringBuilder query = new StringBuilder(""SELECT * FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
found = rs.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return found;
}",0
167,"public Object getProperty(String key) {
Object result = null;
StringBuilder query = new StringBuilder(""SELECT * FROM "");
query.append(table).append("" WHERE "");
query.append(keyColumn).append(""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
List<Object> results = new ArrayList<Object>();
while (rs.next()) {
Object value = rs.getObject(valueColumn);
if (isDelimiterParsingDisabled()) {
results.add(value);
} else {
Iterator<?> it = PropertyConverter.toIterator(value, getListDelimiter());
while (it.hasNext()) {
results.add(it.next());
}
}
}
if (!results.isEmpty()) {
result = (results.size() > 1) ? results : results.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return result;
}",0
168,"@Override
protected Object createBeanInstance(Class<?> beanClass, BeanDeclaration data) throws Exception {
String fileName = ((ConfigurationDeclaration) data).getConfiguration().getString(ATTR_FILENAME);
if (fileName != null && fileName.toLowerCase().trim().endsWith(fileExtension)) {
return super.createBeanInstance(fetchMatchingClass(), data);
} else {
return super.createBeanInstance(fetchDefaultClass(), data);
}
}",0
169,"public Object createBean(Class<?> beanClass, BeanDeclaration data, Object param) throws Exception {
ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
String tagName = decl.getNode().getName();
ConfigurationProvider provider = decl.getConfigurationBuilder().providerForTag(tagName);
if (provider == null) {
throw new ConfigurationRuntimeException(""No ConfigurationProvider registered for tag "" + tagName);
}
try {
return provider.getConfiguration(decl);
} catch (Exception ex) {
if (!decl.isOptional()) {
throw ex;
} else {
if (logger.isDebugEnabled()) {
logger.debug(""Load failed for optional configuration "" + tagName + "": "" + ex.getMessage());
}
decl.getConfigurationBuilder().fireError(EVENT_ERR_LOAD_OPTIONAL, decl.getConfiguration().getString(ATTR_NAME), null, ex);
if (decl.isForceCreate()) {
try {
return provider.getEmptyConfiguration(decl);
} catch (Exception ex2) {
;
}
}
return null;
}
}
}",0
170,"private Map<String, ConfigurationProvider> providers;",0
171,private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());,0
172,"@Override
public void setRootNode(ConfigurationNode rootNode) {
if (configs != null) {
this.getCurrentConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}",0
173,"public Lock(String name) {
this.name = name;
synchronized (counterLock) {
instanceId = ++counter;
}
}",0
174,"@Override
public void setRootNode(ConfigurationNode rootNode) {
if (init) {
this.getConfiguration().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}",0
175,"@Override
public void setRootNode(ConfigurationNode rootNode) {
if (init) {
this.getConfiguration().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}",0
176,private ReloadingStrategy fileStrategy;,0
177,"private ReloadingStrategy createReloadingStrategy() {
if (fileStrategy == null) {
return null;
}
try {
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(fileStrategy);
strategy.setConfiguration(null);
return strategy;
} catch (Exception ex) {
return null;
}
}",0
178,"@Override
public long getLong(String key) {
return this.getConfiguration().getLong(key);
}",0
179,"public static Byte toByte(Object value) throws ConversionException {
Number n = toNumber(value, Byte.class);
if (n instanceof Byte) {
return (Byte) n;
} else {
return new Byte(n.byteValue());
}
}",0
180,"public static Integer toInteger(Object value) throws ConversionException {
Number n = toNumber(value, Integer.class);
if (n instanceof Integer) {
return (Integer) n;
} else {
return new Integer(n.intValue());
}
}",0
181,"@Override
public ConfigurationNode getRootNode() {
if (getSubnodeKey() != null) {
try {
List<ConfigurationNode> nodes = getParent().fetchNodeList(getSubnodeKey());
if (nodes.size() != 1) {
setSubnodeKey(null);
} else {
ConfigurationNode currentRoot = nodes.get(0);
if (currentRoot != super.getRootNode()) {
fireEvent(EVENT_SUBNODE_CHANGED, null, null, true);
setRootNode(currentRoot);
fireEvent(EVENT_SUBNODE_CHANGED, null, null, false);
}
return currentRoot;
}
} catch (Exception ex) {
setSubnodeKey(null);
}
}
return super.getRootNode();
}",0
182,"private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}",0
183,"public void save(Writer writer) throws ConfigurationException {
try {
Transformer transformer = createTransformer();
Source source = new DOMSource(createDocument());
Result result = new StreamResult(writer);
transformer.transform(source, result);
} catch (TransformerException e) {
throw new ConfigurationException(""Unable to save the configuration"", e);
} catch (TransformerFactoryConfigurationError e) {
throw new ConfigurationException(""Unable to save the configuration"", e);
}
}",0
184,"@Override
public void startElement(String uri, String localName, String qName, Attributes attrs) {
if (""comment"".equals(qName)) {
inCommentElement = true;
}
if (""entry"".equals(qName)) {
key = attrs.getValue(""key"");
inEntryElement = true;
}
}",0
185,"public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}",0
186,"public void load(Reader in) throws ConfigurationException {
if (!(getRootNode() instanceof PListNode)) {
initRoot();
}
EntityResolver resolver = new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler(getRoot());
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
187,"public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}",0
188,"public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}",0
189,"private String getName(File file) {
String name = configuration.getURL().toString();
if (name == null) {
if (file != null) {
name = file.getAbsolutePath();
} else {
name = ""base: "" + configuration.getBasePath() + ""file: "" + configuration.getFileName();
}
}
return name;
}",0
190,"@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = (String) catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = ConfigurationUtils.locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}",0
191,"@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = (String) catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = ConfigurationUtils.locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}",0
192,"public boolean removeNodes(String name) {
if (nodes != null && name != null) {
List<ConfigurationNode> lst = namedNodes.remove(name);
if (lst != null) {
detachNodes(lst);
nodes.removeAll(lst);
return true;
}
}
return false;
}",0
193,"public boolean removeNode(ConfigurationNode node) {
if (nodes != null && node != null && nodes.contains(node)) {
detachNode(node);
nodes.remove(node);
List<ConfigurationNode> lst = namedNodes.get(node.getName());
if (lst != null) {
lst.remove(node);
if (lst.isEmpty()) {
namedNodes.remove(node.getName());
}
}
return true;
} else {
return false;
}
}",0
194,"protected int getMaxPosition() {
return reverse ? getStartOffset() + 1 : subNodes.size() - getStartOffset();
}",0
195,"public double getDouble(String key, double defaultValue) {
return getDouble(key, new Double(defaultValue)).doubleValue();
}",0
196,"public short getShort(String key, short defaultValue) {
return getShort(key, new Short(defaultValue)).shortValue();
}",0
197,"public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writer = null;
if (encoding != null) {
try {
writer = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writer == null) {
writer = new OutputStreamWriter(out);
}
save(writer);
}",0
198,private List<ConfigData> configurations;,0
199,"private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}",0
200,"@Override
protected List<ConfigurationNode> fetchNodeList(String key) {
if (isForceReloadCheck()) {
performReloadCheck();
}
return super.fetchNodeList(key);
}",0
201,"@Override
protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertyListConfiguration();
} else {
return new PropertyListConfiguration();
}
}",0
202,"public static URL locate(FileSystem fileSystem, String base, String name) {
if (LOG.isDebugEnabled()) {
StringBuilder buf = new StringBuilder();
buf.append(""ConfigurationUtils.locate(): base is "").append(base);
buf.append("", name is "").append(name);
LOG.debug(buf.toString());
}
if (name == null) {
return null;
}
URL url = fileSystem.locateFromURL(base, name);
if (url == null) {
File file = new File(name);
if (file.isAbsolute() && file.exists()) {
try {
url = toURL(file);
LOG.debug(""Loading configuration from the absolute path "" + name);
} catch (MalformedURLException e) {
LOG.warn(""Could not obtain URL from file"", e);
}
}
}
if (url == null) {
try {
File file = constructFile(base, name);
if (file != null && file.exists()) {
url = toURL(file);
}
if (url != null) {
LOG.debug(""Loading configuration from the path "" + file);
}
} catch (MalformedURLException e) {
LOG.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
try {
File file = constructFile(System.getProperty(""user.home""), name);
if (file != null && file.exists()) {
url = toURL(file);
}
if (url != null) {
LOG.debug(""Loading configuration from the home path "" + file);
}
} catch (MalformedURLException e) {
LOG.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
url = locateFromClasspath(name);
}
return url;
}",0
203,"public Iterator<String> getKeys() {
Collection<String> keys = new ArrayList<String>();
StringBuilder query = new StringBuilder(""SELECT DISTINCT "" + keyColumn + "" FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
ResultSet rs = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
rs = pstmt.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt, rs);
}
return keys.iterator();
}",0
204,"@Override
protected void addPropertyDirect(String key, Object obj) {
StringBuilder query = new StringBuilder(""INSERT INTO "" + table);
if (nameColumn != null) {
query.append("" ("" + nameColumn + "", "" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?, ?)"");
} else {
query.append("" ("" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?)"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
int index = 1;
if (nameColumn != null) {
pstmt.setString(index++, name);
}
pstmt.setString(index++, key);
pstmt.setString(index++, String.valueOf(obj));
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_ADD_PROPERTY, key, obj, e);
} finally {
close(conn, pstmt, null);
}
}",0
205,"@Override
protected void clearPropertyDirect(String key) {
StringBuilder query = new StringBuilder(""DELETE FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_CLEAR_PROPERTY, key, null, e);
} finally {
close(conn, pstmt, null);
}
}",0
206,"@Override
public void clear() {
fireEvent(EVENT_CLEAR, null, null, true);
StringBuilder query = new StringBuilder(""DELETE FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_CLEAR, null, null, e);
} finally {
close(conn, pstmt, null);
}
fireEvent(EVENT_CLEAR, null, null, false);
}",0
207,"private final StrLookup combinedConfigLookup = new StrLookup() {
@Override
public String lookup(String key) {
if (constructedConfiguration != null) {
Object value = constructedConfiguration.resolveContainerStore(key);
return (value != null) ? value.toString() : null;
}
return null;
}
};",0
208,private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());,0
209,"private CombinedConfiguration getCurrentConfig() {
String key = localSubst.replace(keyPattern);
CombinedConfiguration config = configs.get(key);
if (config == null) {
synchronized (configs) {
config = configs.get(key);
if (config == null) {
config = new CombinedConfiguration(getNodeCombiner());
if (loggerName != null) {
Log log = LogFactory.getLog(loggerName);
if (log != null) {
config.setLogger(log);
}
}
config.setIgnoreReloadExceptions(isIgnoreReloadExceptions());
config.setExpressionEngine(this.getExpressionEngine());
config.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
config.setConversionExpressionEngine(getConversionExpressionEngine());
config.setListDelimiter(getListDelimiter());
for (ConfigurationErrorListener listener : getErrorListeners()) {
config.addErrorListener(listener);
}
for (ConfigurationListener listener : getConfigurationListeners()) {
config.addConfigurationListener(listener);
}
config.setForceReloadCheck(isForceReloadCheck());
for (ConfigData data : configurations) {
config.addConfiguration(data.getConfiguration(), data.getName(), data.getAt());
}
configs.put(key, config);
}
}
}
if (getLogger().isDebugEnabled()) {
getLogger().debug(""Returning config for "" + key + "": "" + config);
}
return config;
}",0
210,private final Object reloadLock;,0
211,private final Object reloadLock;,0
212,"public Lock(String name) {
this.name = name;
synchronized (counterLock) {
instanceId = ++counter;
}
}",0
213,private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());,0
214,private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());,0
215,"private AbstractHierarchicalFileConfiguration getConfiguration() {
if (pattern == null) {
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String path = localSubst.replace(pattern);
if (configurationsMap.containsKey(path)) {
return configurationsMap.get(path);
}
if (path.equals(pattern)) {
XMLConfiguration configuration = new XMLConfiguration() {
@Override
public void load() throws ConfigurationException {
}
@Override
public void save() throws ConfigurationException {
}
};
configurationsMap.putIfAbsent(pattern, configuration);
return configuration;
}
XMLConfiguration configuration = new XMLConfiguration();
if (loggerName != null) {
Log log = LogFactory.getLog(loggerName);
if (log != null) {
configuration.setLogger(log);
}
}
configuration.setBasePath(getBasePath());
configuration.setFileName(path);
configuration.setFileSystem(getFileSystem());
configuration.setExpressionEngine(getExpressionEngine());
ReloadingStrategy strategy = createReloadingStrategy();
if (strategy != null) {
configuration.setReloadingStrategy(strategy);
}
configuration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
configuration.setAttributeSplittingDisabled(isAttributeSplittingDisabled());
configuration.setValidating(validating);
configuration.setSchemaValidation(schemaValidation);
configuration.setEntityResolver(entityResolver);
configuration.setListDelimiter(getListDelimiter());
configuration.addConfigurationListener(this);
configuration.addErrorListener(this);
try {
configuration.load();
} catch (ConfigurationException ce) {
if (isThrowable(ce)) {
throw new ConfigurationRuntimeException(ce);
}
}
configurationsMap.putIfAbsent(path, configuration);
return configurationsMap.get(path);
}",0
216,"@Override
public String[] getStringArray(String key) {
return config.getStringArray(makePath(key));
}",0
217,"public static Double toDouble(Object value) throws ConversionException {
Number n = toNumber(value, Double.class);
if (n instanceof Double) {
return (Double) n;
} else {
return new Double(n.doubleValue());
}
}",0
218,"public static Byte toByte(Object value) throws ConversionException {
Number n = toNumber(value, Byte.class);
if (n instanceof Byte) {
return (Byte) n;
} else {
return new Byte(n.byteValue());
}
}",0
219,"public static Short toShort(Object value) throws ConversionException {
Number n = toNumber(value, Short.class);
if (n instanceof Short) {
return (Short) n;
} else {
return new Short(n.shortValue());
}
}",0
220,"public static Float toFloat(Object value) throws ConversionException {
Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
} else {
return new Float(n.floatValue());
}
}",0
221,"public static Long toLong(Object value) throws ConversionException {
Number n = toNumber(value, Long.class);
if (n instanceof Long) {
return (Long) n;
} else {
return new Long(n.longValue());
}
}",0
222,"public static Integer toInteger(Object value) throws ConversionException {
Number n = toNumber(value, Integer.class);
if (n instanceof Integer) {
return (Integer) n;
} else {
return new Integer(n.intValue());
}
}",0
223,private final String protocol;,0
224,private EntityResolver entityResolver = new DefaultEntityResolver();,0
225,"private XMLNode convertToXMLNode(ConfigurationNode node) {
if (node instanceof XMLNode) {
return (XMLNode) node;
}
XMLNode nd = (XMLNode) createNode(node.getName());
nd.setValue(node.getValue());
nd.setAttribute(node.isAttribute());
for (ConfigurationNode child : node.getChildren()) {
nd.addChild(convertToXMLNode(child));
}
for (ConfigurationNode attr : node.getAttributes()) {
nd.addAttribute(convertToXMLNode(attr));
}
return nd;
}",0
226,"private XMLNode convertToXMLNode(ConfigurationNode node) {
if (node instanceof XMLNode) {
return (XMLNode) node;
}
XMLNode nd = (XMLNode) createNode(node.getName());
nd.setValue(node.getValue());
nd.setAttribute(node.isAttribute());
for (ConfigurationNode child : node.getChildren()) {
nd.addChild(convertToXMLNode(child));
}
for (ConfigurationNode attr : node.getAttributes()) {
nd.addAttribute(convertToXMLNode(attr));
}
return nd;
}",0
227,"private static Class<?> getDefaultClass(Object bean, String propName) {
try {
PropertyDescriptor desc = PropertyUtils.getPropertyDescriptor(bean, propName);
if (desc == null) {
return null;
}
return desc.getPropertyType();
} catch (Exception ex) {
return null;
}
}",0
228,"protected BeanDeclaration createBeanDeclaration(ConfigurationNode node) {
List<HierarchicalConfiguration> list = getConfiguration().configurationsAt(node.getName());
if (list.size() == 1) {
return new XMLBeanDeclaration((SubnodeConfiguration) list.get(0), node);
} else {
Iterator<HierarchicalConfiguration> iter = list.iterator();
while (iter.hasNext()) {
SubnodeConfiguration config = (SubnodeConfiguration) iter.next();
if (config.getRootNode().equals(node)) {
return new XMLBeanDeclaration(config, node);
}
}
throw new ConfigurationRuntimeException(""Unable to match node for "" + node.getName());
}
}",0
229,"private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof Date) {
synchronized (PListNode.FORMAT) {
out.println(padding + ""<date>"" + PListNode.FORMAT.format((Date) value) + ""</date>"");
}
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(padding + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(padding + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(padding + ""<true/>"");
} else {
out.println(padding + ""<false/>"");
}
} else if (value instanceof List) {
out.println(padding + ""<array>"");
Iterator<?> it = ((List<?>) value).iterator();
while (it.hasNext()) {
printValue(out, indentLevel + 1, it.next());
}
out.println(padding + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRoot());
} else if (value instanceof Configuration) {
out.println(padding + ""<dict>"");
Configuration config = (Configuration) value;
Iterator<String> it = config.getKeys();
while (it.hasNext()) {
String key = it.next();
Node node = new Node(key);
node.setValue(config.getProperty(key));
printNode(out, indentLevel + 1, node);
if (it.hasNext()) {
out.println();
}
}
out.println(padding + ""</dict>"");
} else if (value instanceof Map) {
Map<String, Object> map = transformMap((Map<?, ?>) value);
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
String base64 = new String(Base64.encodeBase64((byte[]) value));
out.println(padding + ""<data>"" + StringEscapeUtils.escapeXml(base64) + ""</data>"");
} else if (value != null) {
out.println(padding + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
} else {
out.println(padding + ""<string/>"");
}
}",0
230,"private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof Date) {
synchronized (PListNode.FORMAT) {
out.println(padding + ""<date>"" + PListNode.FORMAT.format((Date) value) + ""</date>"");
}
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(padding + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(padding + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(padding + ""<true/>"");
} else {
out.println(padding + ""<false/>"");
}
} else if (value instanceof List) {
out.println(padding + ""<array>"");
Iterator<?> it = ((List<?>) value).iterator();
while (it.hasNext()) {
printValue(out, indentLevel + 1, it.next());
}
out.println(padding + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRoot());
} else if (value instanceof Configuration) {
out.println(padding + ""<dict>"");
Configuration config = (Configuration) value;
Iterator<String> it = config.getKeys();
while (it.hasNext()) {
String key = it.next();
Node node = new Node(key);
node.setValue(config.getProperty(key));
printNode(out, indentLevel + 1, node);
if (it.hasNext()) {
out.println();
}
}
out.println(padding + ""</dict>"");
} else if (value instanceof Map) {
Map<String, Object> map = transformMap((Map<?, ?>) value);
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
String base64 = new String(Base64.encodeBase64((byte[]) value));
out.println(padding + ""<data>"" + StringEscapeUtils.escapeXml(base64) + ""</data>"");
} else if (value != null) {
out.println(padding + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
} else {
out.println(padding + ""<string/>"");
}
}",0
231,"public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}",0
232,"public void load(Reader in) throws ConfigurationException {
if (!(getRootNode() instanceof PListNode)) {
initRoot();
}
EntityResolver resolver = new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler(getRoot());
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
233,"@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = ConfigurationUtils.locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}",0
234,"@Override
public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog catalog = staticCatalog;
if (catalog == null || !getUseStaticCatalog()) {
try {
catalog = new Catalog();
catalog.setCatalogManager(this);
catalog.setupReaders();
catalog.loadSystemCatalogs();
} catch (Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = catalog;
}
}
return catalog;
}",0
235,"@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = ConfigurationUtils.locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}",0
236,"@Override
protected String normalizeURI(String uriref) {
StrSubstitutor substitutor = ((CatalogManager) catalogManager).getStrSubstitutor();
String resolved = substitutor != null ? substitutor.replace(uriref) : uriref;
return super.normalizeURI(resolved);
}",0
237,"public List<ConfigurationNode> getSubNodes(String name) {
if (name == null) {
return getSubNodes();
}
List<ConfigurationNode> result;
if (nodes == null) {
result = null;
} else {
result = namedNodes.get(name);
}
if (result == null) {
return Collections.emptyList();
} else {
return Collections.unmodifiableList(result);
}
}",0
238,"public boolean removeNodes(String name) {
if (nodes != null && name != null) {
List<ConfigurationNode> lst = namedNodes.remove(name);
if (lst != null) {
detachNodes(lst);
nodes.removeAll(lst);
return true;
}
}
return false;
}",0
239,"public boolean removeNode(ConfigurationNode node) {
if (nodes != null && node != null && nodes.contains(node)) {
detachNode(node);
nodes.remove(node);
List<ConfigurationNode> lst = namedNodes.get(node.getName());
if (lst != null) {
lst.remove(node);
if (lst.isEmpty()) {
namedNodes.remove(node.getName());
}
}
return true;
} else {
return false;
}
}",0
240,"protected int getMaxPosition() {
return reverse ? getStartOffset() + 1 : subNodes.size() - getStartOffset();
}",0
241,private ConfigurationNode node;,0
242,"@Override
public void visitBeforeChildren(ImmutableNode node, NodeHandler<ImmutableNode> handler) {
ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
updateNode(node, refHandler);
insertNewChildNodes(node, refHandler);
}",0
243,"private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}",0
244,"private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}",0
245,"public static Synchronizer cloneSynchronizer(Synchronizer sync) {
if (sync == null) {
throw new IllegalArgumentException(""Synchronizer must not be null!"");
}
if (NoOpSynchronizer.INSTANCE == sync) {
return sync;
}
try {
return sync.getClass().newInstance();
} catch (Exception ex) {
LOG.info(""Cannot create new instance of "" + sync.getClass());
}
try {
return (Synchronizer) clone(sync);
} catch (CloneNotSupportedException cnex) {
throw new ConfigurationRuntimeException(""Cannot clone Synchronizer "" + sync);
}
}",0
246,"@Override
public void read(InputStream in) throws ConfigurationException, IOException {
load(new InputSource(in));
}",0
247,"@Override
public void read(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}",0
248,"public void save(Document document, Node parent) {
Element properties = document.createElement(""properties"");
parent.appendChild(properties);
if (getHeader() != null) {
Element comment = document.createElement(""comment"");
properties.appendChild(comment);
comment.setTextContent(StringEscapeUtils.escapeXml(getHeader()));
}
Iterator<String> keys = getKeys();
while (keys.hasNext()) {
String key = keys.next();
Object value = getProperty(key);
if (value instanceof List) {
writeProperty(document, properties, key, (List<?>) value);
} else {
writeProperty(document, properties, key, value);
}
}
}",0
249,private AutoSaveListener autoSaveListener;,0
250,"private ConfigurationBuilderEvent createEventWithChangedSource(ConfigurationBuilderEvent event) {
if (ConfigurationBuilderResultCreatedEvent.RESULT_CREATED.equals(event.getEventType())) {
return new ConfigurationBuilderResultCreatedEvent(this, ConfigurationBuilderResultCreatedEvent.RESULT_CREATED, ((ConfigurationBuilderResultCreatedEvent) event).getConfiguration());
}
@SuppressWarnings(""unchecked"")
EventType<? extends ConfigurationBuilderEvent> type = (EventType<? extends ConfigurationBuilderEvent>) event.getEventType();
return new ConfigurationBuilderEvent(this, type);
}",0
251,private ReloadingController reloadingController;,0
252,"static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(String.class);
return ctor.newInstance(value);
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}",0
253,private final String protocol;,0
254,"private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}",0
255,"private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}",0
256,"@Override
public void read(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
257,"@Override
public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog catalog = staticCatalog;
if (catalog == null || !getUseStaticCatalog()) {
try {
catalog = new Catalog();
catalog.setCatalogManager(this);
catalog.setupReaders();
catalog.loadSystemCatalogs();
} catch (Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = catalog;
}
}
return catalog;
}",0
258,"@Override
protected String normalizeURI(String uriref) {
ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
String resolved = (ci != null) ? String.valueOf(ci.interpolate(uriref)) : uriref;
return super.normalizeURI(resolved);
}",0
259,private final QueryResult<T> attributeResult;,0
260,private final NodeHandler<T> handler;,0
261,"@Override
@SuppressWarnings(""unchecked"")
public NodePointer createNodePointer(NodePointer parent, QName name, Object bean) {
if (bean instanceof NodeWrapper) {
NodeWrapper<?> wrapper = (NodeWrapper<?>) bean;
return new ConfigurationNodePointer((ConfigurationNodePointer) parent, wrapper.getNode(), wrapper.getNodeHandler());
}
return null;
}",0
262,"public void load(InputStream in, String encoding) throws ConfigurationException {
Reader reader = null;
if (encoding != null) {
try {
reader = new InputStreamReader(in, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (reader == null) {
reader = new InputStreamReader(in);
}
load(reader);
}",0
263,private ExpressionEngine conversionExpressionEngine;,0
264,"private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator it = configurations.iterator();
ConfigurationNode node = ((ConfigData) it.next()).getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, ((ConfigData) it.next()).getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}",0
265,"private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator it = configurations.iterator();
ConfigurationNode node = ((ConfigData) it.next()).getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, ((ConfigData) it.next()).getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}",0
266,"public static URL locate(FileSystem fileSystem, String base, String name) {
if (log.isDebugEnabled()) {
StringBuffer buf = new StringBuffer();
buf.append(""ConfigurationUtils.locate(): base is "").append(base);
buf.append("", name is "").append(name);
log.debug(buf.toString());
}
if (name == null) {
return null;
}
URL url = fileSystem.locateFromURL(base, name);
if (url == null) {
File file = new File(name);
if (file.isAbsolute() && file.exists()) {
try {
url = toURL(file);
log.debug(""Loading configuration from the absolute path "" + name);
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
}
if (url == null) {
try {
File file = constructFile(base, name);
if (file != null && file.exists()) {
url = toURL(file);
}
if (url != null) {
log.debug(""Loading configuration from the path "" + file);
}
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
try {
File file = constructFile(System.getProperty(""user.home""), name);
if (file != null && file.exists()) {
url = toURL(file);
}
if (url != null) {
log.debug(""Loading configuration from the home path "" + file);
}
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
url = locateFromClasspath(name);
}
return url;
}",0
267,"public Iterator getKeys() {
Collection keys = new ArrayList();
StringBuffer query = new StringBuffer(""SELECT DISTINCT "" + keyColumn + "" FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return keys.iterator();
}",0
268,"public boolean isEmpty() {
boolean empty = true;
StringBuffer query = new StringBuffer(""SELECT count(*) FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
if (rs.next()) {
empty = rs.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return empty;
}",0
269,"public boolean containsKey(String key) {
boolean found = false;
StringBuffer query = new StringBuffer(""SELECT * FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
found = rs.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return found;
}",0
270,"public Object createBean(Class beanClass, BeanDeclaration data, Object param) throws Exception {
ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
String tagName = decl.getNode().getName();
ConfigurationProvider provider = decl.getConfigurationBuilder().providerForTag(tagName);
if (provider == null) {
throw new ConfigurationRuntimeException(""No ConfigurationProvider registered for tag "" + tagName);
}
try {
return provider.getConfiguration(decl);
} catch (Exception ex) {
if (!decl.isOptional()) {
throw ex;
} else {
if (logger.isDebugEnabled()) {
logger.debug(""Load failed for optional configuration "" + tagName + "": "" + ex.getMessage());
}
decl.getConfigurationBuilder().fireError(EVENT_ERR_LOAD_OPTIONAL, decl.getConfiguration().getString(ATTR_NAME), null, ex);
if (decl.isForceCreate()) {
try {
return provider.getEmptyConfiguration(decl);
} catch (Exception ex2) {
;
}
}
return null;
}
}
}",0
271,"private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File parent = file.getParentFile();
if (parent != null && !parent.exists()) {
parent.mkdirs();
}
}
}
}",0
272,private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());,0
273,"void extractProperties15() {
try {
Method method = System.class.getMethod(METHOD_NAME, null);
environment = (Map) method.invoke(null, null);
} catch (Exception ex) {
throw new ConfigurationRuntimeException(""Error when accessing environment properties"", ex);
}
}",0
274,private ConfigurationNode rootNode;,0
275,"public void setRootNode(ConfigurationNode rootNode) {
if (init) {
this.getConfiguration().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}",0
276,"public void setRootNode(ConfigurationNode rootNode) {
if (init) {
this.getConfiguration().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}",0
277,"private ReloadingStrategy createReloadingStrategy() {
if (fileStrategy == null) {
return null;
}
try {
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(fileStrategy);
strategy.setConfiguration(null);
return strategy;
} catch (Exception ex) {
return null;
}
}",0
278,"public void setRootNode(ConfigurationNode rootNode) {
if (init) {
getConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}",0
279,"private static String[] doParseProperty(String line) {
String[] result = new String[3];
StringBuffer key = new StringBuffer();
StringBuffer value = new StringBuffer();
StringBuffer separator = new StringBuffer();
// state of the automaton:
int state = 0;
for (int pos = 0; pos < line.length(); pos++) {
char c = line.charAt(pos);
switch(state) {
case 0:
if (c == '\\') {
state = 1;
} else if (ArrayUtils.contains(WHITE_SPACE, c)) {
separator.append(c);
state = 2;
} else if (ArrayUtils.contains(SEPARATORS, c)) {
separator.append(c);
state = 3;
} else {
key.append(c);
}
break;
case 1:
if (ArrayUtils.contains(SEPARATORS, c) || ArrayUtils.contains(WHITE_SPACE, c)) {
key.append(c);
} else {
key.append('\\');
key.append(c);
}
state = 0;
break;
case 2:
if (ArrayUtils.contains(WHITE_SPACE, c) || ArrayUtils.contains(SEPARATORS, c)) {
separator.append(c);
} else {
value.append(c);
state = 3;
}
break;
case 3:
value.append(c);
break;
}
}
result[0] = key.toString().trim();
result[1] = value.toString().trim();
result[2] = separator.toString();
return result;
}",0
280,"static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(new Class[] { String.class });
return ctor.newInstance(new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}",0
281,"static Object toEnum(Object value, Class cls) throws ConversionException {
if (value.getClass().equals(cls)) {
return value;
} else if (value instanceof String) {
try {
Method valueOfMethod = cls.getMethod(""valueOf"", new Class[] { String.class });
return valueOfMethod.invoke(null, new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
}
} else if (value instanceof Number) {
try {
Method valuesMethod = cls.getMethod(""values"", new Class[] {});
Object valuesArray = valuesMethod.invoke(null, new Object[] {});
return Array.get(valuesArray, ((Number) value).intValue());
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
}
}",0
282,"private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class[] paramTypes = new Class[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}",0
283,"private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class[] paramTypes = new Class[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}",0
284,"private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class[] paramTypes = new Class[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}",0
285,private DocumentBuilder documentBuilder;,0
286,private EntityResolver entityResolver = new DefaultEntityResolver();,0
287,"private XMLNode convertToXMLNode(ConfigurationNode node) {
if (node instanceof XMLNode) {
return (XMLNode) node;
}
XMLNode nd = (XMLNode) createNode(node.getName());
nd.setValue(node.getValue());
nd.setAttribute(node.isAttribute());
for (Iterator it = node.getChildren().iterator(); it.hasNext(); ) {
nd.addChild(convertToXMLNode((ConfigurationNode) it.next()));
}
for (Iterator it = node.getAttributes().iterator(); it.hasNext(); ) {
nd.addAttribute(convertToXMLNode((ConfigurationNode) it.next()));
}
return nd;
}",0
288,"private static Class getDefaultClass(Object bean, String propName) {
try {
PropertyDescriptor desc = PropertyUtils.getPropertyDescriptor(bean, propName);
if (desc == null) {
return null;
}
return desc.getPropertyType();
} catch (Exception ex) {
return null;
}
}",0
289,"public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}",0
290,"public void ReInit(PropertyListParserTokenManager tm) {
token_source = tm;
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 6; i++) jj_la1[i] = -1;
for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
}",0
291,"final private void jj_rescan_token() {
jj_rescan = true;
for (int i = 0; i < 1; i++) {
JJCalls p = jj_2_rtns[i];
do {
if (p.gen > jj_gen) {
jj_la = p.arg;
jj_lastpos = jj_scanpos = p.first;
switch(i) {
case 0:
jj_3_1();
break;
}
}
p = p.next;
} while (p != null);
}
jj_rescan = false;
}",0
292,"final public Date Date() throws ParseException {
Token token;
token = jj_consume_token(DATE);
{
if (true)
return parseDate(token.image);
}
throw new Error(""Missing return statement in function"");
}",0
293,"final public Object Element() throws ParseException {
Object value = null;
if (jj_2_1(2)) {
value = Array();
{
if (true)
return value;
}
} else {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DICT_BEGIN:
value = Dictionary();
{
if (true)
return value;
}
break;
case STRING:
case QUOTED_STRING:
value = String();
{
if (true)
return value;
}
break;
case DATA:
value = Data();
{
if (true)
return value;
}
break;
case DATE:
value = Date();
{
if (true)
return value;
}
break;
default:
jj_la1[2] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}
throw new Error(""Missing return statement in function"");
}",0
294,"public void ReInit(java.io.Reader stream) {
jj_input_stream.ReInit(stream, 1, 1);
token_source.ReInit(jj_input_stream);
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 6; i++) jj_la1[i] = -1;
for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
}",0
295,"protected byte[] filterData(String s) throws ParseException {
if (s == null) {
return null;
}
if (s.startsWith(""<"") && s.endsWith("">"") && s.length() >= 2) {
s = s.substring(1, s.length() - 1);
}
s = StringUtils.replaceChars(s, "" \t\n\r"", """");
if (s.length() % 2 != 0) {
s = ""0"" + s;
}
try {
return Hex.decodeHex(s.toCharArray());
} catch (Exception e) {
throw (ParseException) new ParseException(""Unable to parse the byte[] : "" + e.getMessage());
}
}",0
296,"final public String String() throws ParseException {
Token token = null;
String value = null;
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case QUOTED_STRING:
token = jj_consume_token(QUOTED_STRING);
{
if (true)
return unescapeQuotes(removeQuotes(token.image));
}
break;
case STRING:
token = jj_consume_token(STRING);
{
if (true)
return token.image;
}
break;
default:
jj_la1[5] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
throw new Error(""Missing return statement in function"");
}",0
297,"public void ReInit(SimpleCharStream stream) {
jjmatchedPos = jjnewStateCnt = 0;
curLexState = defaultLexState;
input_stream = stream;
ReInitRounds();
}",0
298,"public void ReInit(SimpleCharStream stream, int lexState) {
ReInit(stream);
SwitchTo(lexState);
}",0
299,"private final int jjMoveNfa_0(int startState, int curPos) {
int[] nextStates;
int startsAt = 0;
jjnewStateCnt = 14;
int i = 1;
jjstateSet[0] = startState;
int j, kind = 0x7fffffff;
for (; ; ) {
if (++jjround == 0x7fffffff) {
ReInitRounds();
}
if (curChar < 64) {
long l = 1L << curChar;
MatchLoop: do {
switch(jjstateSet[--i]) {
case 15:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if ((0x7ff280100000000L & l) != 0L) {
jjCheckNAddTwoStates(4, 5);
} else if (curChar == 62) {
if (kind > 20) {
kind = 20;
}
}
break;
case 6:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if ((0x3ff000100002600L & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
} else if (curChar == 42) {
jjstateSet[jjnewStateCnt++] = 3;
} else if (curChar == 62) {
if (kind > 19) {
kind = 19;
}
}
break;
case 14:
if ((0xfffffffbffffffffL & l) != 0L) {
jjCheckNAddStates(0, 2);
} else if (curChar == 34) {
if (kind > 22) {
kind = 22;
}
}
break;
case 3:
case 8:
if ((0xd7ffecfaffffd9ffL & l) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 0:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
} else if (curChar == 34) {
jjCheckNAddStates(0, 2);
}
if (curChar == 60) {
jjstateSet[jjnewStateCnt++] = 6;
}
if (curChar == 60) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 1:
if ((0x3ff000100002600L & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 2:
if (curChar == 62 && kind > 19) {
kind = 19;
}
break;
case 4:
if ((0x7ff280100000000L & l) != 0L) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 5:
if (curChar == 62 && kind > 20) {
kind = 20;
}
break;
case 7:
if (curChar == 60) {
jjstateSet[jjnewStateCnt++] = 6;
}
break;
case 9:
case 11:
if (curChar == 34) {
jjCheckNAddStates(0, 2);
}
break;
case 10:
if ((0xfffffffbffffffffL & l) != 0L) {
jjCheckNAddStates(0, 2);
}
break;
case 13:
if (curChar == 34 && kind > 22) {
kind = 22;
}
break;
default:
break;
}
} while (i != startsAt);
} else if (curChar < 128) {
long l = 1L << (curChar & 077);
MatchLoop: do {
switch(jjstateSet[--i]) {
case 15:
if ((0xd7ffffffffffffffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if (curChar == 90) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 6:
if ((0xd7ffffffffffffffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if ((0x7e0000007eL & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 14:
jjCheckNAddStates(0, 2);
if (curChar == 92) {
jjstateSet[jjnewStateCnt++] = 11;
}
break;
case 3:
if ((0xd7ffffffffffffffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if (curChar == 68) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 0:
case 8:
if ((0xd7ffffffffffffffL & l) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 1:
if ((0x7e0000007eL & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 4:
if (curChar == 90) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 10:
jjCheckNAddStates(0, 2);
break;
case 12:
if (curChar == 92) {
jjstateSet[jjnewStateCnt++] = 11;
}
break;
default:
break;
}
} while (i != startsAt);
} else {
int i2 = (curChar & 0xff) >> 6;
long l2 = 1L << (curChar & 077);
MatchLoop: do {
switch(jjstateSet[--i]) {
case 15:
case 8:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 6:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 14:
case 10:
if ((jjbitVec0[i2] & l2) != 0L) {
jjCheckNAddStates(0, 2);
}
break;
case 3:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 0:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
default:
break;
}
} while (i != startsAt);
}
if (kind != 0x7fffffff) {
jjmatchedKind = kind;
jjmatchedPos = curPos;
kind = 0x7fffffff;
}
++curPos;
if ((i = jjnewStateCnt) == (startsAt = 14 - (jjnewStateCnt = startsAt))) {
return curPos;
}
try {
curChar = input_stream.readChar();
} catch (java.io.IOException e) {
return curPos;
}
}
}",0
300,"public void SwitchTo(int lexState) {
if (lexState >= 1 || lexState < 0) {
throw new TokenMgrError(""Error: Ignoring invalid lexical state : "" + lexState + "". State unchanged."", TokenMgrError.INVALID_LEXICAL_STATE);
} else {
curLexState = lexState;
}
}",0
301,public java.io.PrintStream debugStream = System.out;,0
302,"private final void ReInitRounds() {
int i;
jjround = 0x80000001;
for (i = 14; i-- > 0; ) {
jjrounds[i] = 0x80000000;
}
}",0
303,"private final void jjCheckNAddStates(int start) {
jjCheckNAdd(jjnextStates[start]);
jjCheckNAdd(jjnextStates[start + 1]);
}",0
304,"public void ReInit(java.io.Reader dstream, int startline, int startcolumn) {
ReInit(dstream, startline, startcolumn, 4096);
}",0
305,"public SimpleCharStream(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
this(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
}",0
306,"public String GetImage() {
if (bufpos >= tokenBegin)
return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
else
return new String(buffer, tokenBegin, bufsize - tokenBegin) + new String(buffer, 0, bufpos + 1);
}",0
307,"protected void ExpandBuff(boolean wrapAround) {
char[] newbuffer = new char[bufsize + 2048];
int[] newbufline = new int[bufsize + 2048];
int[] newbufcolumn = new int[bufsize + 2048];
try {
if (wrapAround) {
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
System.arraycopy(buffer, 0, newbuffer, bufsize - tokenBegin, bufpos);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos += (bufsize - tokenBegin));
} else {
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos -= tokenBegin);
}
} catch (Throwable t) {
throw new Error(t.getMessage());
}
bufsize += 2048;
available = bufsize;
tokenBegin = 0;
}",0
308,"public void ReInit(java.io.InputStream dstream, int startline, int startcolumn) {
ReInit(dstream, startline, startcolumn, 4096);
}",0
309,"public void ReInit(java.io.InputStream dstream) {
ReInit(dstream, 1, 1, 4096);
}",0
310,"public int beginLine, beginColumn, endLine, endColumn;",0
311,public Token specialToken;,0
312,"protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {
return (""Lexical error at line "" + errorLine + "", column "" + errorColumn + "".  Encountered: "" + (EOFSeen ? ""<EOF> "" : (""\"""" + addEscapes(String.valueOf(curChar)) + ""\"""") + "" ("" + (int) curChar + ""), "") + ""after : \"""" + addEscapes(errorAfter) + ""\"""");
}",0
313,"private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof Date) {
synchronized (PListNode.format) {
out.println(padding + ""<date>"" + PListNode.format.format((Date) value) + ""</date>"");
}
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(padding + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(padding + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(padding + ""<true/>"");
} else {
out.println(padding + ""<false/>"");
}
} else if (value instanceof List) {
out.println(padding + ""<array>"");
Iterator it = ((List) value).iterator();
while (it.hasNext()) {
printValue(out, indentLevel + 1, it.next());
}
out.println(padding + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRoot());
} else if (value instanceof Configuration) {
out.println(padding + ""<dict>"");
Configuration config = (Configuration) value;
Iterator it = config.getKeys();
while (it.hasNext()) {
String key = (String) it.next();
Node node = new Node(key);
node.setValue(config.getProperty(key));
printNode(out, indentLevel + 1, node);
if (it.hasNext()) {
out.println();
}
}
out.println(padding + ""</dict>"");
} else if (value instanceof Map) {
Map map = (Map) value;
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
String base64 = new String(Base64.encodeBase64((byte[]) value));
out.println(padding + ""<data>"" + StringEscapeUtils.escapeXml(base64) + ""</data>"");
} else if (value != null) {
out.println(padding + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
} else {
out.println(padding + ""<string/>"");
}
}",0
314,"private String getName(File file) {
String name = configuration.getURL().toString();
if (name == null) {
if (file != null) {
name = file.getAbsolutePath();
} else {
name = ""base: "" + configuration.getBasePath() + ""file: "" + configuration.getFileName();
}
}
return name;
}",0
315,"public void init() {
if (configuration.getURL() == null && configuration.getFileName() == null) {
return;
}
if (this.configuration == null) {
throw new IllegalStateException(""No configuration has been set for this strategy"");
}
updateLastModified();
}",0
316,"public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
Vector catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = (String) catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = ConfigurationUtils.locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}",0
317,"public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog catalog = staticCatalog;
if (catalog == null || !getUseStaticCatalog()) {
try {
catalog = new Catalog();
catalog.setCatalogManager(this);
catalog.setupReaders();
catalog.loadSystemCatalogs();
} catch (Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = catalog;
}
}
return catalog;
}",0
318,"public boolean removeNodes(String name) {
if (nodes != null && name != null) {
List lst = (List) namedNodes.remove(name);
if (lst != null) {
detachNodes(lst);
nodes.removeAll(lst);
return true;
}
}
return false;
}",0
319,"public boolean removeNode(ConfigurationNode node) {
if (nodes != null && node != null && nodes.contains(node)) {
detachNode(node);
nodes.remove(node);
List lst = (List) namedNodes.get(node.getName());
if (lst != null) {
lst.remove(node);
if (lst.isEmpty()) {
namedNodes.remove(node.getName());
}
}
return true;
} else {
return false;
}
}",0
320,"protected int getMaxPosition() {
return reverse ? getStartOffset() + 1 : subNodes.size() - getStartOffset();
}",0
321,"public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer((ConfigurationNode) subNodes.get(positionToIndex(getPosition())));
}",0
322,private ConfigurationNode node;,0
323,"public float getFloat(String key, float defaultValue) {
return getFloat(key, new Float(defaultValue)).floatValue();
}",0
324,"public double getDouble(String key, double defaultValue) {
return getDouble(key, new Double(defaultValue)).doubleValue();
}",0
325,"public long getLong(String key, long defaultValue) {
return getLong(key, new Long(defaultValue)).longValue();
}",0
326,"public long getLong(String key, long defaultValue) {
return getLong(key, new Long(defaultValue)).longValue();
}",0
327,"public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writer = null;
if (encoding != null) {
try {
writer = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writer == null) {
writer = new OutputStreamWriter(out);
}
save(writer);
}",0
328,"private boolean hasDelimiter() {
int count = 0;
for (int idx = keyBuffer.length() - 1; idx >= 0 && keyBuffer.charAt(idx) == PROPERTY_DELIMITER; idx--) {
count++;
}
return count % 2 == 1;
}",0
329,protected Configuration configuration;,0
330,"public void clear() {
StringBuffer query = new StringBuffer(""DELETE FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
pstmt.executeUpdate();
} catch (SQLException e) {
fireError(EVENT_CLEAR, null, null, e);
} finally {
close(conn, pstmt);
}
}",0
331,"protected void addPropertyDirect(String key, Object obj) {
StringBuffer query = new StringBuffer(""INSERT INTO "" + table);
if (nameColumn != null) {
query.append("" ("" + nameColumn + "", "" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?, ?)"");
} else {
query.append("" ("" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?)"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
int index = 1;
if (nameColumn != null) {
pstmt.setString(index++, name);
}
pstmt.setString(index++, key);
pstmt.setString(index++, String.valueOf(obj));
pstmt.executeUpdate();
} catch (SQLException e) {
fireError(EVENT_ADD_PROPERTY, key, obj, e);
} finally {
close(conn, pstmt);
}
}",0
332,"public boolean containsKey(String key) {
boolean found = false;
StringBuffer query = new StringBuffer(""SELECT * FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
found = rs.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return found;
}",0
333,"public boolean isEmpty() {
boolean empty = true;
StringBuffer query = new StringBuffer(""SELECT count(*) FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
if (rs.next()) {
empty = rs.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return empty;
}",0
334,"public Iterator getKeys() {
Collection keys = new ArrayList();
StringBuffer query = new StringBuffer(""SELECT DISTINCT "" + keyColumn + "" FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return keys.iterator();
}",0
335,"public Object getProperty(String key) {
Object result = null;
StringBuffer query = new StringBuffer(""SELECT * FROM "");
query.append(table).append("" WHERE "");
query.append(keyColumn).append(""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
List results = new ArrayList();
while (rs.next()) {
Object value = rs.getObject(valueColumn);
if (isDelimiterParsingDisabled()) {
results.add(value);
} else {
CollectionUtils.addAll(results, PropertyConverter.toIterator(value, getListDelimiter()));
}
}
if (!results.isEmpty()) {
result = (results.size() > 1) ? results : results.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return result;
}",0
336,"public boolean containsKey(String key) {
boolean found = false;
StringBuffer query = new StringBuffer(""SELECT * FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
found = rs.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return found;
}",0
337,"protected Object createBeanInstance(Class beanClass, BeanDeclaration data) throws Exception {
String fileName = ((ConfigurationDeclaration) data).getConfiguration().getString(ATTR_FILENAME);
if (fileName != null && fileName.toLowerCase().trim().endsWith(fileExtension)) {
return super.createBeanInstance(fetchMatchingClass(), data);
} else {
return super.createBeanInstance(fetchDefaultClass(), data);
}
}",0
338,private ExpressionEngine expressionEngine;,0
339,"private static String[] parseProperty(String line) {
String[] result = new String[2];
StringBuffer key = new StringBuffer();
StringBuffer value = new StringBuffer();
// state of the automaton:
int state = 0;
for (int pos = 0; pos < line.length(); pos++) {
char c = line.charAt(pos);
switch(state) {
case 0:
if (c == '\\') {
state = 1;
} else if (ArrayUtils.contains(WHITE_SPACE, c)) {
state = 2;
} else if (ArrayUtils.contains(SEPARATORS, c)) {
state = 3;
} else {
key.append(c);
}
break;
case 1:
if (ArrayUtils.contains(SEPARATORS, c) || ArrayUtils.contains(WHITE_SPACE, c)) {
key.append(c);
} else {
key.append('\\');
key.append(c);
}
state = 0;
break;
case 2:
if (ArrayUtils.contains(WHITE_SPACE, c)) {
state = 2;
} else if (ArrayUtils.contains(SEPARATORS, c)) {
state = 3;
} else {
value.append(c);
state = 3;
}
break;
case 3:
value.append(c);
break;
}
}
result[0] = key.toString().trim();
result[1] = value.toString().trim();
return result;
}",0
340,"private static boolean checkCombineLines(String line) {
int bsCount = 0;
for (int idx = line.length() - 1; idx >= 0 && line.charAt(idx) == '\\'; idx--) {
bsCount++;
}
return bsCount % 2 == 1;
}",0
341,"public static Float toFloat(Object value) throws ConversionException {
Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
} else {
return new Float(n.floatValue());
}
}",0
342,"public static Byte toByte(Object value) throws ConversionException {
Number n = toNumber(value, Byte.class);
if (n instanceof Byte) {
return (Byte) n;
} else {
return new Byte(n.byteValue());
}
}",0
343,"static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(new Class[] { String.class });
return ctor.newInstance(new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}",0
344,"public static Integer toInteger(Object value) throws ConversionException {
Number n = toNumber(value, Integer.class);
if (n instanceof Integer) {
return (Integer) n;
} else {
return new Integer(n.intValue());
}
}",0
345,"public static Double toDouble(Object value) throws ConversionException {
Number n = toNumber(value, Double.class);
if (n instanceof Double) {
return (Double) n;
} else {
return new Double(n.doubleValue());
}
}",0
346,"public ConfigurationNode getRootNode() {
if (getSubnodeKey() != null) {
try {
List nodes = getParent().fetchNodeList(getSubnodeKey());
if (nodes.size() != 1) {
setSubnodeKey(null);
} else {
ConfigurationNode currentRoot = (ConfigurationNode) nodes.get(0);
if (currentRoot != super.getRootNode()) {
setRootNode(currentRoot);
}
return currentRoot;
}
} catch (Exception ex) {
setSubnodeKey(null);
}
}
return super.getRootNode();
}",0
347,"private void load(InputSource source) throws ConfigurationException {
try {
URL sourceURL = getDelegate().getURL();
if (sourceURL != null) {
source.setSystemId(sourceURL.toString());
}
DocumentBuilder builder = createDocumentBuilder();
Document newDocument = builder.parse(source);
Document oldDocument = document;
document = null;
initProperties(newDocument, oldDocument == null);
document = (oldDocument == null) ? newDocument : oldDocument;
} catch (Exception e) {
throw new ConfigurationException(e.getMessage(), e);
}
}",0
348,"public void load(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
349,"public void load(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}",0
350,"public static void initBean(Object bean, BeanDeclaration data) throws ConfigurationRuntimeException {
Map properties = data.getBeanProperties();
if (properties != null) {
for (Iterator it = properties.keySet().iterator(); it.hasNext(); ) {
String propName = (String) it.next();
initProperty(bean, propName, properties.get(propName));
}
}
Map nestedBeans = data.getNestedBeanDeclarations();
if (nestedBeans != null) {
for (Iterator it = nestedBeans.keySet().iterator(); it.hasNext(); ) {
String propName = (String) it.next();
initProperty(bean, propName, createBean((BeanDeclaration) nestedBeans.get(propName), null));
}
}
}",0
351,public Token currentToken;,0
352,"private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof List) {
out.print(""( "");
Iterator it = ((List) value).iterator();
while (it.hasNext()) {
printValue(out, indentLevel + 1, it.next());
if (it.hasNext()) {
out.print("", "");
}
}
out.print("" )"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRoot());
} else if (value instanceof Configuration) {
out.println();
out.println(padding + ""{"");
Configuration config = (Configuration) value;
Iterator it = config.getKeys();
while (it.hasNext()) {
String key = (String) it.next();
Node node = new Node(key);
node.setValue(config.getProperty(key));
printNode(out, indentLevel + 1, node);
out.println("";"");
}
out.println(padding + ""}"");
} else if (value instanceof Map) {
Map map = (Map) value;
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
out.print(""<"" + new String(Hex.encodeHex((byte[]) value)) + "">"");
} else if (value instanceof Date) {
out.print(""<*D"" + DATE_FORMAT.format((Date) value) + "">"");
} else if (value != null) {
out.print(quoteString(String.valueOf(value)));
}
}",0
353,"protected Date parseDate(String s) throws ParseException {
String substring = s.substring(3, s.length() - 1);
try {
return PropertyListConfiguration.DATE_FORMAT.parse(substring);
} catch (Exception e) {
throw (ParseException) new ParseException(""Unable to parse the date '"" + s + ""' : "" + e.getMessage());
}
}",0
354,"final public String String() throws ParseException {
Token token = null;
String value = null;
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case QUOTED_STRING:
token = jj_consume_token(QUOTED_STRING);
{
if (true)
return unescapeQuotes(removeQuotes(token.image));
}
break;
case STRING:
token = jj_consume_token(STRING);
{
if (true)
return token.image;
}
break;
default:
jj_la1[5] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
throw new Error(""Missing return statement in function"");
}",0
355,"final public List Array() throws ParseException {
List list = new ArrayList();
Object element = null;
jj_consume_token(ARRAY_BEGIN);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_BEGIN:
case DICT_BEGIN:
case DATA:
case DATE:
case STRING:
case QUOTED_STRING:
element = Element();
list.add(element);
label_2: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_SEPARATOR:
;
break;
default:
jj_la1[3] = jj_gen;
break label_2;
}
jj_consume_token(ARRAY_SEPARATOR);
element = Element();
list.add(element);
}
break;
default:
jj_la1[4] = jj_gen;
;
}
jj_consume_token(ARRAY_END);
{
if (true)
return list;
}
throw new Error(""Missing return statement in function"");
}",0
356,"final public Object Element() throws ParseException {
Object value = null;
if (jj_2_1(2)) {
value = Array();
{
if (true)
return value;
}
} else {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DICT_BEGIN:
value = Dictionary();
{
if (true)
return value;
}
break;
case STRING:
case QUOTED_STRING:
value = String();
{
if (true)
return value;
}
break;
case DATA:
value = Data();
{
if (true)
return value;
}
break;
case DATE:
value = Date();
{
if (true)
return value;
}
break;
default:
jj_la1[2] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}
throw new Error(""Missing return statement in function"");
}",0
357,"final public Node Property() throws ParseException {
String key = null;
Object value = null;
Node node = new Node();
key = String();
node.setName(key);
jj_consume_token(EQUAL);
value = Element();
node.setValue(value);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DICT_SEPARATOR:
jj_consume_token(DICT_SEPARATOR);
break;
default:
jj_la1[1] = jj_gen;
;
}
{
if (true)
return node;
}
throw new Error(""Missing return statement in function"");
}",0
358,private boolean jj_semLA;,0
359,"public void ReInit(SimpleCharStream stream, int lexState) {
ReInit(stream);
SwitchTo(lexState);
}",0
360,"public void ReInit(SimpleCharStream stream) {
jjmatchedPos = jjnewStateCnt = 0;
curLexState = defaultLexState;
input_stream = stream;
ReInitRounds();
}",0
361,"public void SwitchTo(int lexState) {
if (lexState >= 1 || lexState < 0) {
throw new TokenMgrError(""Error: Ignoring invalid lexical state : "" + lexState + "". State unchanged."", TokenMgrError.INVALID_LEXICAL_STATE);
} else {
curLexState = lexState;
}
}",0
362,"public char BeginToken() throws java.io.IOException {
tokenBegin = -1;
char c = readChar();
tokenBegin = bufpos;
return c;
}",0
363,"public void ReInit(java.io.Reader dstream, int startline, int startcolumn, int buffersize) {
inputStream = dstream;
line = startline;
column = startcolumn - 1;
if (buffer == null || buffersize != buffer.length) {
available = bufsize = buffersize;
buffer = new char[buffersize];
bufline = new int[buffersize];
bufcolumn = new int[buffersize];
}
prevCharIsLF = prevCharIsCR = false;
tokenBegin = inBuf = maxNextCharInd = 0;
bufpos = -1;
}",0
364,"public void ReInit(java.io.Reader dstream, int startline, int startcolumn) {
ReInit(dstream, startline, startcolumn, 4096);
}",0
365,"public void ReInit(java.io.InputStream dstream) {
ReInit(dstream, 1, 1, 4096);
}",0
366,"public char[] GetSuffix(int len) {
char[] ret = new char[len];
if ((bufpos + 1) >= len)
System.arraycopy(buffer, bufpos - len + 1, ret, 0, len);
else {
System.arraycopy(buffer, bufsize - (len - bufpos - 1), ret, 0, len - bufpos - 1);
System.arraycopy(buffer, 0, ret, len - bufpos - 1, bufpos + 1);
}
return ret;
}",0
367,"public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
}",0
368,"public void ReInit(java.io.InputStream dstream, int startline, int startcolumn) {
ReInit(dstream, startline, startcolumn, 4096);
}",0
369,public Token specialToken;,0
370,"public int beginLine, beginColumn, endLine, endColumn;",0
371,"public void addDateValue(String value) {
try {
addValue(format.parse(value));
} catch (ParseException e) {
;
}
}",0
372,"public void addRealValue(String value) {
addValue(new Double(value));
}",0
373,"public void load(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler(getRoot());
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
374,"public void load(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler(getRoot());
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
375,"private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof Date) {
out.println(padding + ""<date>"" + PListNode.format.format((Date) value) + ""</date>"");
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(padding + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(padding + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(padding + ""<true/>"");
} else {
out.println(padding + ""<false/>"");
}
} else if (value instanceof List) {
out.println(padding + ""<array>"");
Iterator it = ((List) value).iterator();
while (it.hasNext()) {
printValue(out, indentLevel + 1, it.next());
}
out.println(padding + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRoot());
} else if (value instanceof Configuration) {
out.println(padding + ""<dict>"");
Configuration config = (Configuration) value;
Iterator it = config.getKeys();
while (it.hasNext()) {
String key = (String) it.next();
Node node = new Node(key);
node.setValue(config.getProperty(key));
printNode(out, indentLevel + 1, node);
if (it.hasNext()) {
out.println();
}
}
out.println(padding + ""</dict>"");
} else if (value instanceof Map) {
Map map = (Map) value;
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
String base64 = new String(Base64.encodeBase64((byte[]) value));
out.println(padding + ""<data>"" + StringEscapeUtils.escapeXml(base64) + ""</data>"");
} else {
out.println(padding + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
}
}",0
376,"public List getSubNodes(String name) {
if (name == null) {
return getSubNodes();
}
List result;
if (nodes == null) {
result = null;
} else {
result = (List) namedNodes.get(name);
}
return (result == null) ? Collections.EMPTY_LIST : Collections.unmodifiableList(result);
}",0
377,"public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer((ConfigurationNode) subNodes.get(positionToIndex(getPosition())));
}",0
378,private ConfigurationNode node;,0
379,"public long getLong(String key, long defaultValue) {
return getLong(key, new Long(defaultValue)).longValue();
}",0
380,"public short getShort(String key, short defaultValue) {
return getShort(key, new Short(defaultValue)).shortValue();
}",0
381,"public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writer = null;
if (encoding != null) {
try {
writer = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writer == null) {
writer = new OutputStreamWriter(out);
}
save(writer);
}",0
382,"public void load(InputStream in, String encoding) throws ConfigurationException {
Reader reader = null;
if (encoding != null) {
try {
reader = new InputStreamReader(in, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (reader == null) {
reader = new InputStreamReader(in);
}
load(reader);
}",0
383,"private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}",0
384,"private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}",0
385,"@Override
protected List<ConfigurationNode> fetchNodeList(String key) {
if (isForceReloadCheck()) {
performReloadCheck();
}
return super.fetchNodeList(key);
}",0
386,"@Override
protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertiesConfiguration();
} else {
return new PropertiesConfiguration();
}
}",0
387,"public static URL locate(FileSystem fileSystem, String base, String name) {
if (LOG.isDebugEnabled()) {
StringBuilder buf = new StringBuilder();
buf.append(""ConfigurationUtils.locate(): base is "").append(base);
buf.append("", name is "").append(name);
LOG.debug(buf.toString());
}
if (name == null) {
return null;
}
URL url = fileSystem.locateFromURL(base, name);
if (url == null) {
File file = new File(name);
if (file.isAbsolute() && file.exists()) {
try {
url = toURL(file);
LOG.debug(""Loading configuration from the absolute path "" + name);
} catch (MalformedURLException e) {
LOG.warn(""Could not obtain URL from file"", e);
}
}
}
if (url == null) {
try {
File file = constructFile(base, name);
if (file != null && file.exists()) {
url = toURL(file);
}
if (url != null) {
LOG.debug(""Loading configuration from the path "" + file);
}
} catch (MalformedURLException e) {
LOG.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
try {
File file = constructFile(System.getProperty(""user.home""), name);
if (file != null && file.exists()) {
url = toURL(file);
}
if (url != null) {
LOG.debug(""Loading configuration from the home path "" + file);
}
} catch (MalformedURLException e) {
LOG.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
url = locateFromClasspath(name);
}
return url;
}",0
388,protected Configuration configuration;,0
389,"@Override
protected void clearPropertyDirect(String key) {
StringBuilder query = new StringBuilder(""DELETE FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_CLEAR_PROPERTY, key, null, e);
} finally {
close(conn, pstmt, null);
}
}",0
390,"@Override
protected void addPropertyDirect(String key, Object obj) {
StringBuilder query = new StringBuilder(""INSERT INTO "" + table);
if (nameColumn != null) {
query.append("" ("" + nameColumn + "", "" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?, ?)"");
} else {
query.append("" ("" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?)"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
int index = 1;
if (nameColumn != null) {
pstmt.setString(index++, name);
}
pstmt.setString(index++, key);
pstmt.setString(index++, String.valueOf(obj));
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_ADD_PROPERTY, key, obj, e);
} finally {
close(conn, pstmt, null);
}
}",0
391,"public boolean containsKey(String key) {
boolean found = false;
StringBuilder query = new StringBuilder(""SELECT * FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
ResultSet rs = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
rs = pstmt.executeQuery();
found = rs.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt, rs);
}
return found;
}",0
392,"public Object getProperty(String key) {
Object result = null;
StringBuilder query = new StringBuilder(""SELECT * FROM "");
query.append(table).append("" WHERE "");
query.append(keyColumn).append(""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
ResultSet rs = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
rs = pstmt.executeQuery();
List<Object> results = new ArrayList<Object>();
while (rs.next()) {
Object value = rs.getObject(valueColumn);
if (isDelimiterParsingDisabled()) {
results.add(value);
} else {
Iterator<?> it = PropertyConverter.toIterator(value, getListDelimiter());
while (it.hasNext()) {
results.add(it.next());
}
}
}
if (!results.isEmpty()) {
result = (results.size() > 1) ? results : results.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt, rs);
}
return result;
}",0
393,"@Override
protected Object createBeanInstance(Class<?> beanClass, BeanDeclaration data) throws Exception {
String fileName = ((ConfigurationDeclaration) data).getConfiguration().getString(ATTR_FILENAME);
if (fileName != null && fileName.toLowerCase().trim().endsWith(fileExtension)) {
return super.createBeanInstance(fetchMatchingClass(), data);
} else {
return super.createBeanInstance(fetchDefaultClass(), data);
}
}",0
394,"private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File parent = file.getParentFile();
if (parent != null && !parent.exists()) {
parent.mkdirs();
}
}
}
}",0
395,private final Object reloadLock;,0
396,private final Object reloadLock;,0
397,private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());,0
398,"private AbstractHierarchicalFileConfiguration getConfiguration() {
if (pattern == null) {
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String path = localSubst.replace(pattern);
if (configurationsMap.containsKey(path)) {
return configurationsMap.get(path);
}
if (path.equals(pattern)) {
XMLConfiguration configuration = new XMLConfiguration() {
@Override
public void load() throws ConfigurationException {
}
@Override
public void save() throws ConfigurationException {
}
};
configurationsMap.putIfAbsent(pattern, configuration);
return configuration;
}
XMLConfiguration configuration = new XMLConfiguration();
if (loggerName != null) {
Log log = LogFactory.getLog(loggerName);
if (log != null) {
configuration.setLogger(log);
}
}
configuration.setBasePath(getBasePath());
configuration.setFileName(path);
configuration.setFileSystem(getFileSystem());
configuration.setExpressionEngine(getExpressionEngine());
ReloadingStrategy strategy = createReloadingStrategy();
if (strategy != null) {
configuration.setReloadingStrategy(strategy);
}
configuration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
configuration.setValidating(validating);
configuration.setSchemaValidation(schemaValidation);
configuration.setEntityResolver(entityResolver);
configuration.setListDelimiter(getListDelimiter());
configuration.addConfigurationListener(this);
configuration.addErrorListener(this);
try {
configuration.load();
} catch (ConfigurationException ce) {
if (isThrowable(ce)) {
throw new ConfigurationRuntimeException(ce);
}
}
configurationsMap.putIfAbsent(path, configuration);
return configurationsMap.get(path);
}",0
399,"private ReloadingStrategy createReloadingStrategy() {
if (fileStrategy == null) {
return null;
}
try {
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(fileStrategy);
strategy.setConfiguration(null);
return strategy;
} catch (Exception ex) {
return null;
}
}",0
400,"@Override
public void setRootNode(ConfigurationNode rootNode) {
if (init) {
getConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}",0
401,"public static Long toLong(Object value) throws ConversionException {
Number n = toNumber(value, Long.class);
if (n instanceof Long) {
return (Long) n;
} else {
return new Long(n.longValue());
}
}",0
402,"public static Integer toInteger(Object value) throws ConversionException {
Number n = toNumber(value, Integer.class);
if (n instanceof Integer) {
return (Integer) n;
} else {
return new Integer(n.intValue());
}
}",0
403,"public static Short toShort(Object value) throws ConversionException {
Number n = toNumber(value, Short.class);
if (n instanceof Short) {
return (Short) n;
} else {
return new Short(n.shortValue());
}
}",0
404,"@Override
public void load(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}",0
405,"@Override
public void startElement(String uri, String localName, String qName, Attributes attrs) {
if (""comment"".equals(qName)) {
inCommentElement = true;
}
if (""entry"".equals(qName)) {
key = attrs.getValue(""key"");
inEntryElement = true;
}
}",0
406,"public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}",0
407,"private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof Date) {
synchronized (PListNode.FORMAT) {
out.println(padding + ""<date>"" + PListNode.FORMAT.format((Date) value) + ""</date>"");
}
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(padding + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(padding + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(padding + ""<true/>"");
} else {
out.println(padding + ""<false/>"");
}
} else if (value instanceof List) {
out.println(padding + ""<array>"");
Iterator<?> it = ((List<?>) value).iterator();
while (it.hasNext()) {
printValue(out, indentLevel + 1, it.next());
}
out.println(padding + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRootNode());
} else if (value instanceof Configuration) {
out.println(padding + ""<dict>"");
Configuration config = (Configuration) value;
Iterator<String> it = config.getKeys();
while (it.hasNext()) {
String key = it.next();
ConfigurationNode node = new DefaultConfigurationNode(key);
node.setValue(config.getProperty(key));
printNode(out, indentLevel + 1, node);
if (it.hasNext()) {
out.println();
}
}
out.println(padding + ""</dict>"");
} else if (value instanceof Map) {
Map<String, Object> map = transformMap((Map<?, ?>) value);
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
String base64 = new String(Base64.encodeBase64((byte[]) value));
out.println(padding + ""<data>"" + StringEscapeUtils.escapeXml(base64) + ""</data>"");
} else if (value != null) {
out.println(padding + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
} else {
out.println(padding + ""<string/>"");
}
}",0
408,"public void load(Reader in) throws ConfigurationException {
if (!(getRootNode() instanceof PListNode)) {
initRoot();
}
EntityResolver resolver = new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler(getRootNode());
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
409,"private String getName(File file) {
String name = configuration.getURL().toString();
if (name == null) {
if (file != null) {
name = file.getAbsolutePath();
} else {
name = ""base: "" + configuration.getBasePath() + ""file: "" + configuration.getFileName();
}
}
return name;
}",0
410,"@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = ConfigurationUtils.locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}",0
411,"@Override
public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog catalog = staticCatalog;
if (catalog == null || !getUseStaticCatalog()) {
try {
catalog = new Catalog();
catalog.setCatalogManager(this);
catalog.setupReaders();
catalog.loadSystemCatalogs();
} catch (Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = catalog;
}
}
return catalog;
}",0
412,"public List<ConfigurationNode> getSubNodes(String name) {
if (name == null) {
return getSubNodes();
}
List<ConfigurationNode> result;
if (nodes == null) {
result = null;
} else {
result = namedNodes.get(name);
}
if (result == null) {
return Collections.emptyList();
} else {
return Collections.unmodifiableList(result);
}
}",0
413,"protected int getMaxPosition() {
return reverse ? getStartOffset() + 1 : subNodes.size() - getStartOffset();
}",0
414,"public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer(subNodes.get(positionToIndex(getPosition())));
}",0
415,private ConfigurationNode node;,0
416,private ConfigurationNode rootNode;,0
417,"private void validSubnodeConfigurations(ConfigurationEvent event) {
Set<SubnodeConfiguration> subs = new HashSet<SubnodeConfiguration>(subConfigs.keySet());
for (SubnodeConfiguration sub : subs) {
if (sub != event.getSource()) {
sub.validateRootNode();
}
}
}",0
418,"private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}",0
419,"private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}",0
420,"public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}",0
421,"public static Synchronizer cloneSynchronizer(Synchronizer sync) {
if (sync == null) {
throw new IllegalArgumentException(""Synchronizer must not be null!"");
}
if (NoOpSynchronizer.INSTANCE == sync) {
return sync;
}
try {
return sync.getClass().newInstance();
} catch (Exception ex) {
LOG.info(""Cannot create new instance of "" + sync.getClass());
}
try {
return (Synchronizer) clone(sync);
} catch (CloneNotSupportedException cnex) {
throw new ConfigurationRuntimeException(""Cannot clone Synchronizer "" + sync);
}
}",0
422,private final Configuration configuration;,0
423,"@Override
protected Boolean performOperation() throws SQLException {
PreparedStatement pstmt = initStatement(String.format(SQL_GET_PROPERTY, table, keyColumn), true, key);
ResultSet rs = pstmt.executeQuery();
return rs.next();
}",0
424,private NodeCombiner nodeCombiner;,0
425,"@Override
protected void setPropertyInternal(String key, Object value) {
getConfig().setProperty(key, value);
}",0
426,private EntityResolver entityResolver = new DefaultEntityResolver();,0
427,private FileLocator locator;,0
428,"private static Class<?> getDefaultClass(Object bean, String propName) {
try {
PropertyDescriptor desc = beanUtilsBean.getPropertyUtils().getPropertyDescriptor(bean, propName);
if (desc == null) {
return null;
}
return desc.getPropertyType();
} catch (Exception ex) {
return null;
}
}",0
429,private AutoSaveListener autoSaveListener;,0
430,private ConfigurationSourceData sourceData;,0
431,"public static Float toFloat(Object value) throws ConversionException {
Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
} else {
return new Float(n.floatValue());
}
}",0
432,"public static Byte toByte(Object value) throws ConversionException {
Number n = toNumber(value, Byte.class);
if (n instanceof Byte) {
return (Byte) n;
} else {
return new Byte(n.byteValue());
}
}",0
433,"public static Long toLong(Object value) throws ConversionException {
Number n = toNumber(value, Long.class);
if (n instanceof Long) {
return (Long) n;
} else {
return new Long(n.longValue());
}
}",0
434,"public static Short toShort(Object value) throws ConversionException {
Number n = toNumber(value, Short.class);
if (n instanceof Short) {
return (Short) n;
} else {
return new Short(n.shortValue());
}
}",0
435,"public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}",0
436,"private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File parent = file.getParentFile();
if (parent != null && !parent.exists()) {
parent.mkdirs();
}
}
}
}",0
437,private final String protocol;,0
438,"private FileSystemOptions getOptions(String scheme) {
FileSystemOptions opts = new FileSystemOptions();
FileSystemConfigBuilder builder;
try {
builder = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}",0
439,"private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof Date) {
synchronized (PListNode.FORMAT) {
out.println(padding + ""<date>"" + PListNode.FORMAT.format((Date) value) + ""</date>"");
}
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(padding + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(padding + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(padding + ""<true/>"");
} else {
out.println(padding + ""<false/>"");
}
} else if (value instanceof List) {
out.println(padding + ""<array>"");
Iterator<?> it = ((List<?>) value).iterator();
while (it.hasNext()) {
printValue(out, indentLevel + 1, it.next());
}
out.println(padding + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRootNode());
} else if (value instanceof Configuration) {
out.println(padding + ""<dict>"");
Configuration config = (Configuration) value;
Iterator<String> it = config.getKeys();
while (it.hasNext()) {
String key = it.next();
ConfigurationNode node = new DefaultConfigurationNode(key);
node.setValue(config.getProperty(key));
printNode(out, indentLevel + 1, node);
if (it.hasNext()) {
out.println();
}
}
out.println(padding + ""</dict>"");
} else if (value instanceof Map) {
Map<String, Object> map = transformMap((Map<?, ?>) value);
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
String base64 = new String(Base64.encodeBase64((byte[]) value));
out.println(padding + ""<data>"" + StringEscapeUtils.escapeXml(base64) + ""</data>"");
} else if (value != null) {
out.println(padding + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
} else {
out.println(padding + ""<string/>"");
}
}",0
440,private FileLocator locator;,0
441,"public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}",0
442,"@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}",0
443,"@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}",0
444,"public boolean removeNodes(String name) {
if (nodes != null && name != null) {
List<ConfigurationNode> lst = namedNodes.remove(name);
if (lst != null) {
detachNodes(lst);
nodes.removeAll(lst);
return true;
}
}
return false;
}",0
445,"public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer(subNodes.get(positionToIndex(getPosition())));
}",0
446,"@Override
public void visitBeforeChildren(ImmutableNode node, NodeHandler<ImmutableNode> handler) {
ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
updateNode(node, refHandler);
insertNewChildNodes(node, refHandler);
}",0
447,"private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}",0
448,"private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}",0
449,"public static Synchronizer cloneSynchronizer(Synchronizer sync) {
if (sync == null) {
throw new IllegalArgumentException(""Synchronizer must not be null!"");
}
if (NoOpSynchronizer.INSTANCE == sync) {
return sync;
}
try {
return sync.getClass().newInstance();
} catch (Exception ex) {
LOG.info(""Cannot create new instance of "" + sync.getClass());
}
try {
return (Synchronizer) clone(sync);
} catch (CloneNotSupportedException cnex) {
throw new ConfigurationRuntimeException(""Cannot clone Synchronizer "" + sync);
}
}",0
450,"protected PreparedStatement createStatement(String sql, boolean nameCol) throws SQLException {
String statement;
if (nameCol && configurationNameColumn != null) {
StringBuilder buf = new StringBuilder(sql);
buf.append("" AND "").append(configurationNameColumn).append(""=?"");
statement = buf.toString();
} else {
statement = sql;
}
pstmt = getConnection().prepareStatement(statement);
return pstmt;
}",0
451,"private ConfigurationBuilderEvent createEventWithChangedSource(ConfigurationBuilderEvent event) {
if (ConfigurationBuilderResultCreatedEvent.RESULT_CREATED.equals(event.getEventType())) {
return new ConfigurationBuilderResultCreatedEvent(this, ConfigurationBuilderResultCreatedEvent.RESULT_CREATED, ((ConfigurationBuilderResultCreatedEvent) event).getConfiguration());
}
@SuppressWarnings(""unchecked"")
EventType<? extends ConfigurationBuilderEvent> type = (EventType<? extends ConfigurationBuilderEvent>) event.getEventType();
return new ConfigurationBuilderEvent(this, type);
}",0
452,private ReloadingController reloadingController;,0
453,"static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(String.class);
return ctor.newInstance(value);
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}",0
454,"public static Float toFloat(Object value) throws ConversionException {
Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
} else {
return new Float(n.floatValue());
}
}",0
455,"public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}",0
456,"private FileSystemOptions getOptions(String scheme) {
FileSystemOptions opts = new FileSystemOptions();
FileSystemConfigBuilder builder;
try {
builder = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}",0
457,"@Override
public void read(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
458,"@Override
public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog catalog = staticCatalog;
if (catalog == null || !getUseStaticCatalog()) {
try {
catalog = new Catalog();
catalog.setCatalogManager(this);
catalog.setupReaders();
catalog.loadSystemCatalogs();
} catch (Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = catalog;
}
}
return catalog;
}",0
459,private final QueryResult<T> attributeResult;,0
460,private NodeCombiner nodeCombiner;,0
461,"private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator it = configurations.iterator();
ConfigurationNode node = ((ConfigData) it.next()).getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, ((ConfigData) it.next()).getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}",0
462,"private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator it = configurations.iterator();
ConfigurationNode node = ((ConfigData) it.next()).getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, ((ConfigData) it.next()).getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}",0
463,"protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertiesConfiguration();
} else {
return new PropertiesConfiguration();
}
}",0
464,"public static URL locate(FileSystem fileSystem, String base, String name) {
if (LOG.isDebugEnabled()) {
StringBuffer buf = new StringBuffer();
buf.append(""ConfigurationUtils.locate(): base is "").append(base);
buf.append("", name is "").append(name);
LOG.debug(buf.toString());
}
if (name == null) {
return null;
}
URL url = fileSystem.locateFromURL(base, name);
if (url == null) {
File file = new File(name);
if (file.isAbsolute() && file.exists()) {
try {
url = toURL(file);
LOG.debug(""Loading configuration from the absolute path "" + name);
} catch (MalformedURLException e) {
LOG.warn(""Could not obtain URL from file"", e);
}
}
}
if (url == null) {
try {
File file = constructFile(base, name);
if (file != null && file.exists()) {
url = toURL(file);
}
if (url != null) {
LOG.debug(""Loading configuration from the path "" + file);
}
} catch (MalformedURLException e) {
LOG.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
try {
File file = constructFile(System.getProperty(""user.home""), name);
if (file != null && file.exists()) {
url = toURL(file);
}
if (url != null) {
LOG.debug(""Loading configuration from the home path "" + file);
}
} catch (MalformedURLException e) {
LOG.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
url = locateFromClasspath(name);
}
return url;
}",0
465,"public void clear() {
fireEvent(EVENT_CLEAR, null, null, true);
StringBuffer query = new StringBuffer(""DELETE FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_CLEAR, null, null, e);
} finally {
close(conn, pstmt);
}
fireEvent(EVENT_CLEAR, null, null, false);
}",0
466,"public boolean isEmpty() {
boolean empty = true;
StringBuffer query = new StringBuffer(""SELECT count(*) FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
if (rs.next()) {
empty = rs.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return empty;
}",0
467,"public Iterator getKeys() {
Collection keys = new ArrayList();
StringBuffer query = new StringBuffer(""SELECT DISTINCT "" + keyColumn + "" FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return keys.iterator();
}",0
468,"public String getPath(File file, URL url, String basePath, String fileName) {
String path = null;
if (file != null) {
path = file.getAbsolutePath();
}
if (path == null) {
if (url != null) {
path = url.getPath();
} else {
try {
path = getURL(basePath, fileName).getPath();
} catch (Exception e) {
;
}
}
}
return path;
}",0
469,"private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File parent = file.getParentFile();
if (parent != null && !parent.exists()) {
parent.mkdirs();
}
}
}
}",0
470,private NodeCombiner nodeCombiner;,0
471,"public void setRootNode(ConfigurationNode rootNode) {
if (configs != null) {
this.getCurrentConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}",0
472,"public Lock(String name) {
this.name = name;
synchronized (counterLock) {
instanceId = ++counter;
}
}",0
473,"private ReloadingStrategy createReloadingStrategy() {
if (fileStrategy == null) {
return null;
}
try {
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(fileStrategy);
strategy.setConfiguration(null);
return strategy;
} catch (Exception ex) {
return null;
}
}",0
474,"public void setRootNode(ConfigurationNode rootNode) {
if (init) {
this.getConfiguration().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}",0
475,private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());,0
476,"private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class[] paramTypes = new Class[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}",0
477,private final String protocol;,0
478,"private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class[] paramTypes = new Class[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}",0
479,"private FileSystemOptions getOptions(String scheme) {
FileSystemOptions opts = new FileSystemOptions();
FileSystemConfigBuilder builder;
try {
builder = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
Map map = provider.getOptions();
if (map == null) {
return null;
}
Iterator iter = map.entrySet().iterator();
int count = 0;
while (iter.hasNext()) {
Map.Entry entry = (Map.Entry) iter.next();
try {
String key = (String) entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}",0
480,"private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class[] paramTypes = new Class[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}",0
481,private EntityResolver entityResolver = new DefaultEntityResolver();,0
482,"private XMLNode convertToXMLNode(ConfigurationNode node) {
if (node instanceof XMLNode) {
return (XMLNode) node;
}
XMLNode nd = (XMLNode) createNode(node.getName());
nd.setValue(node.getValue());
nd.setAttribute(node.isAttribute());
for (Iterator it = node.getChildren().iterator(); it.hasNext(); ) {
nd.addChild(convertToXMLNode((ConfigurationNode) it.next()));
}
for (Iterator it = node.getAttributes().iterator(); it.hasNext(); ) {
nd.addAttribute(convertToXMLNode((ConfigurationNode) it.next()));
}
return nd;
}",0
483,"private XMLNode convertToXMLNode(ConfigurationNode node) {
if (node instanceof XMLNode) {
return (XMLNode) node;
}
XMLNode nd = (XMLNode) createNode(node.getName());
nd.setValue(node.getValue());
nd.setAttribute(node.isAttribute());
for (Iterator it = node.getChildren().iterator(); it.hasNext(); ) {
nd.addChild(convertToXMLNode((ConfigurationNode) it.next()));
}
for (Iterator it = node.getAttributes().iterator(); it.hasNext(); ) {
nd.addAttribute(convertToXMLNode((ConfigurationNode) it.next()));
}
return nd;
}",0
484,"public void load(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}",0
485,"public void save(Writer out) throws ConfigurationException {
PrintWriter writer = new PrintWriter(out);
String encoding = getEncoding() != null ? getEncoding() : DEFAULT_ENCODING;
writer.println(""<?xml version=\""1.0\"" encoding=\"""" + encoding + ""\""?>"");
writer.println(""<!DOCTYPE properties SYSTEM \""http://java.sun.com/dtd/properties.dtd\"">"");
writer.println(""<properties>"");
if (getHeader() != null) {
writer.println(""  <comment>"" + StringEscapeUtils.escapeXml(getHeader()) + ""</comment>"");
}
Iterator keys = getKeys();
while (keys.hasNext()) {
String key = (String) keys.next();
Object value = getProperty(key);
if (value instanceof List) {
writeProperty(writer, key, (List) value);
} else {
writeProperty(writer, key, value);
}
}
writer.println(""</properties>"");
writer.flush();
}",0
486,"public void startElement(String uri, String localName, String qName, Attributes attrs) {
if (""comment"".equals(qName)) {
inCommentElement = true;
}
if (""entry"".equals(qName)) {
key = attrs.getValue(""key"");
inEntryElement = true;
}
}",0
487,"private static Class getDefaultClass(Object bean, String propName) {
try {
PropertyDescriptor desc = PropertyUtils.getPropertyDescriptor(bean, propName);
if (desc == null) {
return null;
}
return desc.getPropertyType();
} catch (Exception ex) {
return null;
}
}",0
488,"public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}",0
489,"public void load(Reader in) throws ConfigurationException {
if (!(getRootNode() instanceof PListNode)) {
initRoot();
}
EntityResolver resolver = new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler(getRoot());
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
490,"public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}",0
491,"private String getName(File file) {
String name = configuration.getURL().toString();
if (name == null) {
if (file != null) {
name = file.getAbsolutePath();
} else {
name = ""base: "" + configuration.getBasePath() + ""file: "" + configuration.getFileName();
}
}
return name;
}",0
492,"protected String normalizeURI(String uriref) {
StrSubstitutor substitutor = ((CatalogManager) catalogManager).getStrSubstitutor();
String resolved = substitutor != null ? substitutor.replace(uriref) : uriref;
return super.normalizeURI(resolved);
}",0
493,"public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
Vector catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = (String) catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = ConfigurationUtils.locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}",0
494,"public boolean removeNodes(String name) {
if (nodes != null && name != null) {
List lst = (List) namedNodes.remove(name);
if (lst != null) {
detachNodes(lst);
nodes.removeAll(lst);
return true;
}
}
return false;
}",0
495,"public boolean removeNode(ConfigurationNode node) {
if (nodes != null && node != null && nodes.contains(node)) {
detachNode(node);
nodes.remove(node);
List lst = (List) namedNodes.get(node.getName());
if (lst != null) {
lst.remove(node);
if (lst.isEmpty()) {
namedNodes.remove(node.getName());
}
}
return true;
} else {
return false;
}
}",0
496,"public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer((ConfigurationNode) subNodes.get(positionToIndex(getPosition())));
}",0
497,"public short getShort(String key, short defaultValue) {
return getShort(key, new Short(defaultValue)).shortValue();
}",0
498,"public long getLong(String key, long defaultValue) {
return getLong(key, new Long(defaultValue)).longValue();
}",0
499,"public double getDouble(String key, double defaultValue) {
return getDouble(key, new Double(defaultValue)).doubleValue();
}",0
500,"public void load(InputStream in, String encoding) throws ConfigurationException {
Reader reader = null;
if (encoding != null) {
try {
reader = new InputStreamReader(in, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (reader == null) {
reader = new InputStreamReader(in);
}
load(reader);
}",0
501,"public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writer = null;
if (encoding != null) {
try {
writer = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writer == null) {
writer = new OutputStreamWriter(out);
}
save(writer);
}",0
502,private List<ConfigData> configurations;,0
503,"@Override
protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertyListConfiguration();
} else {
return new PropertyListConfiguration();
}
}",0
504,"public static URL locate(FileSystem fileSystem, String base, String name) {
if (LOG.isDebugEnabled()) {
StringBuilder buf = new StringBuilder();
buf.append(""ConfigurationUtils.locate(): base is "").append(base);
buf.append("", name is "").append(name);
LOG.debug(buf.toString());
}
if (name == null) {
return null;
}
URL url = fileSystem.locateFromURL(base, name);
if (url == null) {
File file = new File(name);
if (file.isAbsolute() && file.exists()) {
try {
url = toURL(file);
LOG.debug(""Loading configuration from the absolute path "" + name);
} catch (MalformedURLException e) {
LOG.warn(""Could not obtain URL from file"", e);
}
}
}
if (url == null) {
try {
File file = constructFile(base, name);
if (file != null && file.exists()) {
url = toURL(file);
}
if (url != null) {
LOG.debug(""Loading configuration from the path "" + file);
}
} catch (MalformedURLException e) {
LOG.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
try {
File file = constructFile(System.getProperty(""user.home""), name);
if (file != null && file.exists()) {
url = toURL(file);
}
if (url != null) {
LOG.debug(""Loading configuration from the home path "" + file);
}
} catch (MalformedURLException e) {
LOG.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
url = locateFromClasspath(name);
}
return url;
}",0
505,protected Configuration configuration;,0
506,"public Object getProperty(String key) {
Object result = null;
StringBuilder query = new StringBuilder(""SELECT * FROM "");
query.append(table).append("" WHERE "");
query.append(keyColumn).append(""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
List<Object> results = new ArrayList<Object>();
while (rs.next()) {
Object value = rs.getObject(valueColumn);
if (isDelimiterParsingDisabled()) {
results.add(value);
} else {
Iterator<?> it = PropertyConverter.toIterator(value, getListDelimiter());
while (it.hasNext()) {
results.add(it.next());
}
}
}
if (!results.isEmpty()) {
result = (results.size() > 1) ? results : results.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return result;
}",0
507,"@Override
public void clear() {
fireEvent(EVENT_CLEAR, null, null, true);
StringBuilder query = new StringBuilder(""DELETE FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_CLEAR, null, null, e);
} finally {
close(conn, pstmt);
}
fireEvent(EVENT_CLEAR, null, null, false);
}",0
508,"@Override
protected void addPropertyDirect(String key, Object obj) {
StringBuilder query = new StringBuilder(""INSERT INTO "" + table);
if (nameColumn != null) {
query.append("" ("" + nameColumn + "", "" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?, ?)"");
} else {
query.append("" ("" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?)"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
int index = 1;
if (nameColumn != null) {
pstmt.setString(index++, name);
}
pstmt.setString(index++, key);
pstmt.setString(index++, String.valueOf(obj));
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_ADD_PROPERTY, key, obj, e);
} finally {
close(conn, pstmt);
}
}",0
509,"public boolean isEmpty() {
boolean empty = true;
StringBuilder query = new StringBuilder(""SELECT count(*) FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
if (rs.next()) {
empty = rs.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return empty;
}",0
510,"public boolean containsKey(String key) {
boolean found = false;
StringBuilder query = new StringBuilder(""SELECT * FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
found = rs.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return found;
}",0
511,"public Iterator<String> getKeys() {
Collection<String> keys = new ArrayList<String>();
StringBuilder query = new StringBuilder(""SELECT DISTINCT "" + keyColumn + "" FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return keys.iterator();
}",0
512,"public boolean isEmpty() {
boolean empty = true;
StringBuilder query = new StringBuilder(""SELECT count(*) FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
if (rs.next()) {
empty = rs.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return empty;
}",0
513,"@Override
protected Object createBeanInstance(Class<?> beanClass, BeanDeclaration data) throws Exception {
String fileName = ((ConfigurationDeclaration) data).getConfiguration().getString(ATTR_FILENAME);
if (fileName != null && fileName.toLowerCase().trim().endsWith(fileExtension)) {
return super.createBeanInstance(fetchMatchingClass(), data);
} else {
return super.createBeanInstance(fetchDefaultClass(), data);
}
}",0
514,private ConfigurationNode rootNode;,0
515,private final Object reloadLock;,0
516,"public Lock(String name) {
this.name = name;
synchronized (counterLock) {
instanceId = ++counter;
}
}",0
517,"private AbstractHierarchicalFileConfiguration getConfiguration() {
if (pattern == null) {
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String path = localSubst.replace(pattern);
if (configurationsMap.containsKey(path)) {
return configurationsMap.get(path);
}
if (path.equals(pattern)) {
XMLConfiguration configuration = new XMLConfiguration() {
@Override
public void load() throws ConfigurationException {
}
@Override
public void save() throws ConfigurationException {
}
};
configurationsMap.putIfAbsent(pattern, configuration);
return configuration;
}
XMLConfiguration configuration = new XMLConfiguration();
if (loggerName != null) {
Log log = LogFactory.getLog(loggerName);
if (log != null) {
configuration.setLogger(log);
}
}
configuration.setBasePath(getBasePath());
configuration.setFileName(path);
configuration.setFileSystem(getFileSystem());
configuration.setExpressionEngine(getExpressionEngine());
ReloadingStrategy strategy = createReloadingStrategy();
if (strategy != null) {
configuration.setReloadingStrategy(strategy);
}
configuration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
configuration.setAttributeSplittingDisabled(isAttributeSplittingDisabled());
configuration.setValidating(validating);
configuration.setSchemaValidation(schemaValidation);
configuration.setEntityResolver(entityResolver);
configuration.setListDelimiter(getListDelimiter());
configuration.addConfigurationListener(this);
configuration.addErrorListener(this);
try {
configuration.load();
} catch (ConfigurationException ce) {
if (isThrowable(ce)) {
throw new ConfigurationRuntimeException(ce);
}
}
configurationsMap.putIfAbsent(path, configuration);
return configurationsMap.get(path);
}",0
518,"@Override
public void setRootNode(ConfigurationNode rootNode) {
if (init) {
this.getConfiguration().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}",0
519,"private ReloadingStrategy createReloadingStrategy() {
if (fileStrategy == null) {
return null;
}
try {
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(fileStrategy);
strategy.setConfiguration(null);
return strategy;
} catch (Exception ex) {
return null;
}
}",0
520,"private ReloadingStrategy createReloadingStrategy() {
if (fileStrategy == null) {
return null;
}
try {
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(fileStrategy);
strategy.setConfiguration(null);
return strategy;
} catch (Exception ex) {
return null;
}
}",0
521,"@Override
public void setRootNode(ConfigurationNode rootNode) {
if (init) {
getConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}",0
522,"static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(new Class[] { String.class });
return ctor.newInstance(new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}",0
523,"public static Short toShort(Object value) throws ConversionException {
Number n = toNumber(value, Short.class);
if (n instanceof Short) {
return (Short) n;
} else {
return new Short(n.shortValue());
}
}",0
524,"public static Double toDouble(Object value) throws ConversionException {
Number n = toNumber(value, Double.class);
if (n instanceof Double) {
return (Double) n;
} else {
return new Double(n.doubleValue());
}
}",0
525,"private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}",0
526,private final String protocol;,0
527,private EntityResolver entityResolver = new DefaultEntityResolver();,0
528,private EntityResolver entityResolver = new DefaultEntityResolver();,0
529,"private XMLNode convertToXMLNode(ConfigurationNode node) {
if (node instanceof XMLNode) {
return (XMLNode) node;
}
XMLNode nd = (XMLNode) createNode(node.getName());
nd.setValue(node.getValue());
nd.setAttribute(node.isAttribute());
for (ConfigurationNode child : node.getChildren()) {
nd.addChild(convertToXMLNode(child));
}
for (ConfigurationNode attr : node.getAttributes()) {
nd.addAttribute(convertToXMLNode(attr));
}
return nd;
}",0
530,"@Override
public void save(Writer out) throws ConfigurationException {
PrintWriter writer = new PrintWriter(out);
String encoding = getEncoding() != null ? getEncoding() : DEFAULT_ENCODING;
writer.println(""<?xml version=\""1.0\"" encoding=\"""" + encoding + ""\""?>"");
writer.println(""<!DOCTYPE properties SYSTEM \""http://java.sun.com/dtd/properties.dtd\"">"");
writer.println(""<properties>"");
if (getHeader() != null) {
writer.println(""  <comment>"" + StringEscapeUtils.escapeXml(getHeader()) + ""</comment>"");
}
Iterator<String> keys = getKeys();
while (keys.hasNext()) {
String key = keys.next();
Object value = getProperty(key);
if (value instanceof List) {
writeProperty(writer, key, (List<?>) value);
} else {
writeProperty(writer, key, value);
}
}
writer.println(""</properties>"");
writer.flush();
}",0
531,"private static Class<?> getDefaultClass(Object bean, String propName) {
try {
PropertyDescriptor desc = PropertyUtils.getPropertyDescriptor(bean, propName);
if (desc == null) {
return null;
}
return desc.getPropertyType();
} catch (Exception ex) {
return null;
}
}",0
532,"protected BeanDeclaration createBeanDeclaration(ConfigurationNode node) {
List<HierarchicalConfiguration> list = getConfiguration().configurationsAt(node.getName());
if (list.size() == 1) {
return new XMLBeanDeclaration((SubnodeConfiguration) list.get(0), node);
} else {
Iterator<HierarchicalConfiguration> iter = list.iterator();
while (iter.hasNext()) {
SubnodeConfiguration config = (SubnodeConfiguration) iter.next();
if (config.getRootNode().equals(node)) {
return new XMLBeanDeclaration(config, node);
}
}
throw new ConfigurationRuntimeException(""Unable to match node for "" + node.getName());
}
}",0
533,"public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}",0
534,"public void load(Reader in) throws ConfigurationException {
if (!(getRootNode() instanceof PListNode)) {
initRoot();
}
EntityResolver resolver = new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler(getRoot());
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
535,"private String getName(File file) {
String name = configuration.getURL().toString();
if (name == null) {
if (file != null) {
name = file.getAbsolutePath();
} else {
name = ""base: "" + configuration.getBasePath() + ""file: "" + configuration.getFileName();
}
}
return name;
}",0
536,"public void init() {
if (configuration.getURL() == null && configuration.getFileName() == null) {
return;
}
if (this.configuration == null) {
throw new IllegalStateException(""No configuration has been set for this strategy"");
}
updateLastModified();
}",0
537,"@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = (String) catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = ConfigurationUtils.locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}",0
538,"public boolean removeNodes(String name) {
if (nodes != null && name != null) {
List<ConfigurationNode> lst = namedNodes.remove(name);
if (lst != null) {
detachNodes(lst);
nodes.removeAll(lst);
return true;
}
}
return false;
}",0
539,"public List<ConfigurationNode> getSubNodes(String name) {
if (name == null) {
return getSubNodes();
}
List<ConfigurationNode> result;
if (nodes == null) {
result = null;
} else {
result = namedNodes.get(name);
}
if (result == null) {
return Collections.emptyList();
} else {
return Collections.unmodifiableList(result);
}
}",0
540,"public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer(subNodes.get(positionToIndex(getPosition())));
}",0
541,"protected int getMaxPosition() {
return reverse ? getStartOffset() + 1 : subNodes.size() - getStartOffset();
}",0
542,"@Override
public void visitBeforeChildren(final ImmutableNode node, final NodeHandler<ImmutableNode> handler) {
final ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
updateNode(node, refHandler);
insertNewChildNodes(node, refHandler);
}",0
543,"public static Synchronizer cloneSynchronizer(final Synchronizer sync) {
if (sync == null) {
throw new IllegalArgumentException(""Synchronizer must not be null!"");
}
if (NoOpSynchronizer.INSTANCE == sync) {
return sync;
}
try {
return sync.getClass().newInstance();
} catch (final Exception ex) {
LOG.info(""Cannot create new instance of "" + sync.getClass());
}
try {
return (Synchronizer) clone(sync);
} catch (final CloneNotSupportedException cnex) {
throw new ConfigurationRuntimeException(""Cannot clone Synchronizer "" + sync);
}
}",0
544,"public static void dump(final ImmutableConfiguration configuration, final PrintStream out) {
dump(configuration, new PrintWriter(out));
}",0
545,"protected PreparedStatement createStatement(final String sql, final boolean nameCol) throws SQLException {
String statement;
if (nameCol && configurationNameColumn != null) {
final StringBuilder buf = new StringBuilder(sql);
buf.append("" AND "").append(configurationNameColumn).append(""=?"");
statement = buf.toString();
} else {
statement = sql;
}
pstmt = getConnection().prepareStatement(statement);
return pstmt;
}",0
546,"public DataSource getDataSource() {
return dataSource;
}",0
547,"@Override
public void read(final Reader in) throws ConfigurationException {
final SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
final SAXParser parser = factory.newSAXParser();
final XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
@Override
public InputSource resolveEntity(final String publicId, final String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (final Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}",0
548,private final ImmutableConfiguration configuration;,0
549,private ConfigurationSourceData sourceData;,0
550,"@Override
public CombinedConfiguration getConfiguration() throws ConfigurationException {
final CombinedConfiguration result = super.getConfiguration();
reloadingController.resetReloadingState();
return result;
}",0
551,"static Object toInternetAddress(final Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
final Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(String.class);
return ctor.newInstance(value);
} catch (final Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}",0
552,private final String protocol;,0
553,"@Override
public void read(final Reader in) throws ConfigurationException {
final EntityResolver resolver = new EntityResolver() {
@Override
public InputSource resolveEntity(final String publicId, final String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
final XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
final SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
final SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (final Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
554,"@Override
public void read(final Reader in) throws ConfigurationException {
final EntityResolver resolver = new EntityResolver() {
@Override
public InputSource resolveEntity(final String publicId, final String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
final XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
final SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
final SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (final Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
555,private final QueryResult<T> attributeResult;,0
556,"public double getDouble(String key, double defaultValue) {
return getDouble(key, new Double(defaultValue)).doubleValue();
}",0
557,"public short getShort(String key, short defaultValue) {
return getShort(key, new Short(defaultValue)).shortValue();
}",0
558,"public float getFloat(String key, float defaultValue) {
return getFloat(key, new Float(defaultValue)).floatValue();
}",0
559,"public void load(InputStream in, String encoding) throws ConfigurationException {
Reader reader = null;
if (encoding != null) {
try {
reader = new InputStreamReader(in, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (reader == null) {
reader = new InputStreamReader(in);
}
load(reader);
}",0
560,"public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writer = null;
if (encoding != null) {
try {
writer = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writer == null) {
writer = new OutputStreamWriter(out);
}
save(writer);
}",0
561,"public Object getProperty(String key) {
if (isForceReloadCheck()) {
for (ConfigData cd : configurations) {
try {
cd.getConfiguration().getProperty(PROP_RELOAD_CHECK);
} catch (Exception ex) {
;
}
}
}
return super.getProperty(key);
}",0
562,"public static URL locate(FileSystem fileSystem, String base, String name) {
if (log.isLoggable(Level.FINE)) {
StringBuilder buf = new StringBuilder();
buf.append(""ConfigurationUtils.locate(): base is "").append(base);
buf.append("", name is "").append(name);
log.fine(buf.toString());
}
if (name == null) {
return null;
}
URL url = fileSystem.locateFromURL(base, name);
if (url == null) {
File file = new File(name);
if (file.isAbsolute() && file.exists()) {
try {
url = file.toURI().toURL();
log.fine(""Loading configuration from the absolute path "" + name);
} catch (MalformedURLException e) {
log.log(Level.WARNING, ""Could not obtain URL from file"", e);
}
}
}
if (url == null) {
try {
File file = constructFile(base, name);
if (file != null && file.exists()) {
url = file.toURI().toURL();
}
if (url != null) {
log.fine(""Loading configuration from the path "" + file);
}
} catch (MalformedURLException e) {
log.log(Level.WARNING, ""Could not obtain URL from file"", e);
}
}
if (url == null) {
try {
File file = constructFile(System.getProperty(""user.home""), name);
if (file != null && file.exists()) {
url = file.toURI().toURL();
}
if (url != null) {
log.fine(""Loading configuration from the home path "" + file);
}
} catch (MalformedURLException e) {
log.log(Level.WARNING, ""Could not obtain URL from file"", e);
}
}
if (url == null) {
url = locateFromClasspath(name);
}
return url;
}",0
563,protected Configuration configuration;,0
564,"@Override
protected Object performOperation() throws SQLException {
PreparedStatement pstmt = initStatement(String.format(SQL_GET_PROPERTY, table, keyColumn), true, key);
ResultSet rs = pstmt.executeQuery();
return rs.next();
}",0
565,"@Override
protected Object performOperation() throws SQLException {
PreparedStatement ps = initStatement(String.format(SQL_IS_EMPTY, table), true);
ResultSet rs = ps.executeQuery();
return rs.next() ? rs.getInt(1) : null;
}",0
566,"protected PreparedStatement createStatement(String sql, boolean nameCol) throws SQLException {
String statement;
if (nameCol && nameColumn != null) {
StringBuilder buf = new StringBuilder(sql);
buf.append("" AND "").append(nameColumn).append(""=?"");
statement = buf.toString();
} else {
statement = sql;
}
pstmt = getConnection().prepareStatement(statement);
return pstmt;
}",0
567,"public Object createBean(Class<?> beanClass, BeanDeclaration data, Object param) throws Exception {
ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
String tagName = decl.getNode().getName();
ConfigurationProvider provider = decl.getConfigurationBuilder().providerForTag(tagName);
if (provider == null) {
throw new ConfigurationRuntimeException(""No ConfigurationProvider registered for tag "" + tagName);
}
try {
return provider.getConfiguration(decl);
} catch (Exception ex) {
if (!decl.isOptional()) {
throw ex;
} else {
decl.getConfigurationBuilder().fireError(EVENT_ERR_LOAD_OPTIONAL, decl.getConfiguration().getString(ATTR_NAME), null, ex);
if (decl.isForceCreate()) {
try {
return provider.getEmptyConfiguration(decl);
} catch (Exception ex2) {
;
}
}
return null;
}
}
}",0
568,"private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File parent = file.getParentFile();
if (parent != null && !parent.exists()) {
parent.mkdirs();
}
}
}
}",0
569,"public void setRootNode(ConfigurationNode rootNode) {
if (configs != null) {
this.getCurrentConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}",0
570,private ConfigurationNode rootNode;,0
571,"@Override
public void setRootNode(ConfigurationNode rootNode) {
if (init) {
getConfiguration().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}",0
572,"@Override
public void setRootNode(ConfigurationNode rootNode) {
if (init) {
getConfiguration().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}",0
573,"private AbstractHierarchicalFileConfiguration getConfiguration() {
if (pattern == null) {
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String path = getSubstitutor().replace(pattern);
if (configurationsMap.containsKey(path)) {
return configurationsMap.get(path);
}
if (path.equals(pattern)) {
XMLConfiguration configuration = new XMLConfiguration() {
public void load() throws ConfigurationException {
}
public void save() throws ConfigurationException {
}
};
configurationsMap.putIfAbsent(pattern, configuration);
return configuration;
}
XMLConfiguration configuration = new XMLConfiguration();
if (loggerName != null) {
Logger log = Logger.getLogger(loggerName);
if (log != null) {
configuration.setLogger(log);
}
}
configuration.setBasePath(getBasePath());
configuration.setFileName(path);
configuration.setFileSystem(getFileSystem());
configuration.setExpressionEngine(getExpressionEngine());
ReloadingStrategy strategy = createReloadingStrategy();
if (strategy != null) {
configuration.setReloadingStrategy(strategy);
}
configuration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
configuration.setAttributeSplittingDisabled(isAttributeSplittingDisabled());
configuration.setValidating(validating);
configuration.setSchemaValidation(schemaValidation);
configuration.setEntityResolver(entityResolver);
configuration.setListDelimiter(getListDelimiter());
configuration.addConfigurationListener(this);
configuration.addErrorListener(this);
try {
configuration.load();
} catch (ConfigurationException ce) {
if (!ignoreException) {
throw new ConfigurationRuntimeException(ce);
}
}
configurationsMap.putIfAbsent(path, configuration);
return configurationsMap.get(path);
}",0
574,"@Override
public T getRootNode() {
if (getSubnodeKey() != null) {
try {
NodeList<T> nodes = getParent().fetchNodeList(getSubnodeKey());
if (nodes.size() != 1 || !nodes.isNode(0)) {
setSubnodeKey(null);
} else {
T currentRoot = nodes.getNode(0);
if (currentRoot != rootNode) {
fireEvent(EVENT_SUBNODE_CHANGED, null, null, true);
rootNode = currentRoot;
fireEvent(EVENT_SUBNODE_CHANGED, null, null, false);
}
return currentRoot;
}
} catch (Exception ex) {
setSubnodeKey(null);
}
}
return rootNode;
}",0
575,"public ConfigurationNode getRootNode() {
if (getSubnodeKey() != null) {
try {
List<ConfigurationNode> nodes = getParent().fetchNodeList(getSubnodeKey());
if (nodes.size() != 1) {
setSubnodeKey(null);
} else {
ConfigurationNode currentRoot = nodes.get(0);
if (currentRoot != super.getRootNode()) {
setRootNode(currentRoot);
}
return currentRoot;
}
} catch (Exception ex) {
setSubnodeKey(null);
}
}
return super.getRootNode();
}",0
576,"public void save(Writer writer) throws ConfigurationException {
try {
Transformer transformer = createTransformer();
Source source = new DOMSource(createDocument());
Result result = new StreamResult(writer);
transformer.transform(source, result);
} catch (TransformerException e) {
throw new ConfigurationException(""Unable to save the configuration"", e);
} catch (TransformerFactoryConfigurationError err) {
throw new ConfigurationException(""Unable to save the configuration"", err);
}
}",0
577,"public void save(Writer out) throws ConfigurationException {
PrintWriter writer = new PrintWriter(out);
String encoding = getEncoding() != null ? getEncoding() : DEFAULT_ENCODING;
writer.println(""<?xml version=\""1.0\"" encoding=\"""" + encoding + ""\""?>"");
writer.println(""<!DOCTYPE properties SYSTEM \""http://java.sun.com/dtd/properties.dtd\"">"");
writer.println(""<properties>"");
if (getHeader() != null) {
writer.println(""  <comment>"" + StringEscapeUtils.escapeXml(getHeader()) + ""</comment>"");
}
Iterator<String> keys = getKeys();
while (keys.hasNext()) {
String key = keys.next();
Object value = getProperty(key);
if (value instanceof List) {
writeProperty(writer, key, (List) value);
} else {
writeProperty(writer, key, value);
}
}
writer.println(""</properties>"");
writer.flush();
}",0
578,"public void load(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}",0
579,"public Float convert(Object value, Object... params) throws ConversionException {
Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
} else {
return new Float(n.floatValue());
}
}",0
580,"public Integer convert(Object value, Object... params) throws ConversionException {
Number n = toNumber(value, Integer.class);
if (n instanceof Integer) {
return (Integer) n;
} else {
return new Integer(n.intValue());
}
}",0
581,"public Short convert(Object value, Object... params) throws ConversionException {
Number n = toNumber(value, Short.class);
if (n instanceof Short) {
return (Short) n;
} else {
return new Short(n.shortValue());
}
}",0
582,"@SuppressWarnings(""unchecked"")
@Override
public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2) {
T node1 = ((ConfigurationNodePointer<T>) pointer1).getConfigurationNode();
T node2 = ((ConfigurationNodePointer<T>) pointer2).getConfigurationNode();
for (T child : getNodeHandler().getChildren(getConfigurationNode())) {
if (child == node1) {
return -1;
} else if (child == node2) {
return 1;
}
}
return 0;
}",0
583,private NodeHandler<T> nodeHandler;,0
584,"@SuppressWarnings(""unchecked"")
@Override
public NodeIterator childIterator(NodeTest test, boolean reverse, NodePointer startWith) {
return new ConfigurationNodeIteratorChildren<T>(this, test, reverse, (ConfigurationNodePointer<T>) startWith);
}",0
585,"public static synchronized byte[] decodeBase64(String base64String) {
instance.put(null, base64String);
return instance.getByteArray(null, null);
}",0
586,"final public Object Element() throws ParseException {
Object value = null;
if (jj_2_1(2)) {
value = Array();
{
if (true)
return value;
}
} else {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DICT_BEGIN:
value = Dictionary();
{
if (true)
return value;
}
break;
case STRING:
case QUOTED_STRING:
value = String();
{
if (true)
return value;
}
break;
case DATA:
value = Data();
{
if (true)
return value;
}
break;
case DATE:
value = Date();
{
if (true)
return value;
}
break;
default:
jj_la1[2] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}
throw new Error(""Missing return statement in function"");
}",0
587,"final public Date Date() throws ParseException {
Token token;
token = jj_consume_token(DATE);
{
if (true)
return parseDate(token.image);
}
throw new Error(""Missing return statement in function"");
}",0
588,"protected byte[] filterData(String s) throws ParseException {
if (s == null) {
return null;
}
if (s.startsWith(""<"") && s.endsWith("">"") && s.length() >= 2) {
s = s.substring(1, s.length() - 1);
}
s = StringUtils.replaceChars(s, "" \t\n\r"", """");
if (s.length() % 2 != 0) {
s = ""0"" + s;
}
try {
return Hex.decodeHex(s.toCharArray());
} catch (Exception e) {
throw (ParseException) new ParseException(""Unable to parse the byte[] : "" + e.getMessage());
}
}",0
589,"private void jj_rescan_token() {
jj_rescan = true;
for (int i = 0; i < 1; i++) {
try {
JJCalls p = jj_2_rtns[i];
do {
if (p.gen > jj_gen) {
jj_la = p.arg;
jj_lastpos = jj_scanpos = p.first;
switch(i) {
case 0:
jj_3_1();
break;
}
}
p = p.next;
} while (p != null);
} catch (LookaheadSuccess ls) {
}
}
jj_rescan = false;
}",0
590,"final public byte[] Data() throws ParseException {
Token token;
token = jj_consume_token(DATA);
{
if (true)
return filterData(token.image);
}
throw new Error(""Missing return statement in function"");
}",0
591,"public void ReInit(SimpleCharStream stream) {
jjmatchedPos = jjnewStateCnt = 0;
curLexState = defaultLexState;
input_stream = stream;
ReInitRounds();
}",0
592,"private int jjMoveNfa_0(int startState, int curPos) {
int startsAt = 0;
jjnewStateCnt = 14;
int i = 1;
jjstateSet[0] = startState;
int kind = 0x7fffffff;
for (; ; ) {
if (++jjround == 0x7fffffff) {
ReInitRounds();
}
if (curChar < 64) {
long l = 1L << curChar;
do {
switch(jjstateSet[--i]) {
case 15:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if ((0x7ff280100000000L & l) != 0L) {
jjCheckNAddTwoStates(4, 5);
} else if (curChar == 62) {
if (kind > 20) {
kind = 20;
}
}
break;
case 6:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if ((0x3ff000100002600L & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
} else if (curChar == 42) {
jjstateSet[jjnewStateCnt++] = 3;
} else if (curChar == 62) {
if (kind > 19) {
kind = 19;
}
}
break;
case 14:
if ((0xfffffffbffffffffL & l) != 0L) {
jjCheckNAddStates(0, 2);
} else if (curChar == 34) {
if (kind > 22) {
kind = 22;
}
}
break;
case 3:
case 8:
if ((0xd7ffecfaffffd9ffL & l) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 0:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
} else if (curChar == 34) {
jjCheckNAddStates(0, 2);
}
if (curChar == 60) {
jjstateSet[jjnewStateCnt++] = 6;
}
if (curChar == 60) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 1:
if ((0x3ff000100002600L & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 2:
if (curChar == 62 && kind > 19) {
kind = 19;
}
break;
case 4:
if ((0x7ff280100000000L & l) != 0L) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 5:
if (curChar == 62 && kind > 20) {
kind = 20;
}
break;
case 7:
if (curChar == 60) {
jjstateSet[jjnewStateCnt++] = 6;
}
break;
case 9:
case 11:
if (curChar == 34) {
jjCheckNAddStates(0, 2);
}
break;
case 10:
if ((0xfffffffbffffffffL & l) != 0L) {
jjCheckNAddStates(0, 2);
}
break;
case 13:
if (curChar == 34 && kind > 22) {
kind = 22;
}
break;
default:
break;
}
} while (i != startsAt);
} else if (curChar < 128) {
long l = 1L << (curChar & 077);
do {
switch(jjstateSet[--i]) {
case 15:
if ((0xd7ffffffffffffffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if (curChar == 90) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 6:
if ((0xd7ffffffffffffffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if ((0x7e0000007eL & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 14:
jjCheckNAddStates(0, 2);
if (curChar == 92) {
jjstateSet[jjnewStateCnt++] = 11;
}
break;
case 3:
if ((0xd7ffffffffffffffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if (curChar == 68) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 0:
case 8:
if ((0xd7ffffffffffffffL & l) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 1:
if ((0x7e0000007eL & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 4:
if (curChar == 90) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 10:
jjCheckNAddStates(0, 2);
break;
case 12:
if (curChar == 92) {
jjstateSet[jjnewStateCnt++] = 11;
}
break;
default:
break;
}
} while (i != startsAt);
} else {
int i2 = (curChar & 0xff) >> 6;
long l2 = 1L << (curChar & 077);
do {
switch(jjstateSet[--i]) {
case 15:
case 8:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 6:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 14:
case 10:
if ((jjbitVec0[i2] & l2) != 0L) {
jjCheckNAddStates(0, 2);
}
break;
case 3:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 0:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
default:
break;
}
} while (i != startsAt);
}
if (kind != 0x7fffffff) {
jjmatchedKind = kind;
jjmatchedPos = curPos;
kind = 0x7fffffff;
}
++curPos;
if ((i = jjnewStateCnt) == (startsAt = 14 - (jjnewStateCnt = startsAt))) {
return curPos;
}
try {
curChar = input_stream.readChar();
} catch (java.io.IOException e) {
return curPos;
}
}
}",0
593,"public void SwitchTo(int lexState) {
if (lexState >= 1 || lexState < 0) {
throw new TokenMgrError(""Error: Ignoring invalid lexical state : "" + lexState + "". State unchanged."", TokenMgrError.INVALID_LEXICAL_STATE);
} else {
curLexState = lexState;
}
}",0
594,"public SimpleCharStream(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
this(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
}",0
595,"public void ReInit(java.io.InputStream dstream, String encoding, int startline, int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException {
ReInit(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
}",0
596,"public char BeginToken() throws java.io.IOException {
tokenBegin = -1;
char c = readChar();
tokenBegin = bufpos;
return c;
}",0
597,"public String GetImage() {
if (bufpos >= tokenBegin)
return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
else
return new String(buffer, tokenBegin, bufsize - tokenBegin) + new String(buffer, 0, bufpos + 1);
}",0
598,"public void ReInit(java.io.Reader dstream, int startline, int startcolumn) {
ReInit(dstream, startline, startcolumn, 4096);
}",0
599,"public void ReInit(java.io.InputStream dstream, String encoding, int startline, int startcolumn) throws java.io.UnsupportedEncodingException {
ReInit(dstream, encoding, startline, startcolumn, 4096);
}",0
600,"public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
}",0
601,"public void ReInit(java.io.Reader dstream) {
ReInit(dstream, 1, 1, 4096);
}",0
602,"public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
}",0
603,public Token specialToken;,0
604,"protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {
return (""Lexical error at line "" + errorLine + "", column "" + errorColumn + "".  Encountered: "" + (EOFSeen ? ""<EOF> "" : (""\"""" + addEscapes(String.valueOf(curChar)) + ""\"""") + "" ("" + (int) curChar + ""), "") + ""after : \"""" + addEscapes(errorAfter) + ""\"""");
}",0
605,"public void load(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler(getRootNode());
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
606,"@Override
public void setProperty(String key, Object value) {
if (value instanceof byte[]) {
fireEvent(EVENT_SET_PROPERTY, key, value, true);
setDetailEvents(false);
try {
clearProperty(key);
addPropertyDirect(key, value);
} finally {
setDetailEvents(true);
}
fireEvent(EVENT_SET_PROPERTY, key, value, false);
} else {
super.setProperty(key, value);
}
}",0
607,"protected File getFile() {
return (configuration.getURL() != null) ? fileFromURL(configuration.getURL()) : configuration.getFile();
}",0
608,"public boolean removeNode(ConfigurationNode node) {
if (nodes != null && node != null && nodes.contains(node)) {
detachNode(node);
this.nodes.remove(node);
List<ConfigurationNode> nodes = namedNodes.get(node.getName());
if (nodes != null) {
nodes.remove(node);
if (nodes.isEmpty()) {
namedNodes.remove(node.getName());
}
}
return true;
} else {
return false;
}
}",0
609,"public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer(subNodes.get(positionToIndex(getPosition())));
}",0
610,private ConfigurationNode node;,0
611,"private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File parent = file.getParentFile();
if (parent != null && !parent.exists()) {
parent.mkdirs();
}
}
}
}",0
612,"public void reload() {
synchronized (reloadLock) {
if (noReload == 0) {
try {
enterNoReload();
if (strategy.reloadingRequired()) {
if (getLogger().isInfoEnabled()) {
getLogger().info(""Reloading configuration. URL is "" + getURL());
}
fireEvent(EVENT_RELOAD, null, getURL(), true);
setDetailEvents(false);
boolean autoSaveBak = this.isAutoSave();
this.setAutoSave(false);
try {
clear();
load();
} finally {
this.setAutoSave(autoSaveBak);
setDetailEvents(true);
}
fireEvent(EVENT_RELOAD, null, getURL(), false);
strategy.reloadingPerformed();
}
} catch (Exception e) {
fireError(EVENT_RELOAD, null, null, e);
} finally {
exitNoReload();
}
}
}
}",0
613,private volatile ConfigurationNode combinedRoot;,0
614,private volatile ConfigurationNode combinedRoot;,0
615,"protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertiesConfiguration();
} else {
return new PropertiesConfiguration();
}
}",0
616,"private boolean hasDelimiter() {
int count = 0;
for (int idx = keyBuffer.length() - 1; idx >= 0 && keyBuffer.charAt(idx) == PROPERTY_DELIMITER; idx--) {
count++;
}
return count % 2 == 1;
}",0
617,"public void clear() {
StringBuffer query = new StringBuffer(""DELETE FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
pstmt.executeUpdate();
} catch (SQLException e) {
fireError(EVENT_CLEAR, null, null, e);
} finally {
close(conn, pstmt);
}
}",0
618,"public boolean containsKey(String key) {
boolean found = false;
StringBuffer query = new StringBuffer(""SELECT * FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
found = rs.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return found;
}",0
619,"public boolean containsKey(String key) {
boolean found = false;
StringBuffer query = new StringBuffer(""SELECT * FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
found = rs.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return found;
}",0
620,"public boolean isEmpty() {
boolean empty = true;
StringBuffer query = new StringBuffer(""SELECT count(*) FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
if (rs.next()) {
empty = rs.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return empty;
}",0
621,"public Object getProperty(String key) {
Object result = null;
StringBuffer query = new StringBuffer(""SELECT * FROM "");
query.append(table).append("" WHERE "");
query.append(keyColumn).append(""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
List results = new ArrayList();
while (rs.next()) {
Object value = rs.getObject(valueColumn);
if (isDelimiterParsingDisabled()) {
results.add(value);
} else {
CollectionUtils.addAll(results, PropertyConverter.toIterator(value, getListDelimiter()));
}
}
if (!results.isEmpty()) {
result = (results.size() > 1) ? results : results.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return result;
}",0
622,"protected Object createBeanInstance(Class beanClass, BeanDeclaration data) throws Exception {
String fileName = ((ConfigurationDeclaration) data).getConfiguration().getString(ATTR_FILENAME);
if (fileName != null && fileName.toLowerCase().trim().endsWith(fileExtension)) {
return super.createBeanInstance(fetchMatchingClass(), data);
} else {
return super.createBeanInstance(fetchDefaultClass(), data);
}
}",0
623,"void extractProperties15() {
try {
Method method = System.class.getMethod(METHOD_NAME, null);
environment = (Map) method.invoke(null, null);
} catch (Exception ex) {
throw new ConfigurationRuntimeException(""Error when accessing environment properties"", ex);
}
}",0
624,private ConfigurationNode rootNode;,0
625,"private static String[] parseProperty(String line) {
String[] result = new String[2];
StringBuffer key = new StringBuffer();
StringBuffer value = new StringBuffer();
// state of the automaton:
int state = 0;
for (int pos = 0; pos < line.length(); pos++) {
char c = line.charAt(pos);
switch(state) {
case 0:
if (c == '\\') {
state = 1;
} else if (ArrayUtils.contains(WHITE_SPACE, c)) {
state = 2;
} else if (ArrayUtils.contains(SEPARATORS, c)) {
state = 3;
} else {
key.append(c);
}
break;
case 1:
if (ArrayUtils.contains(SEPARATORS, c) || ArrayUtils.contains(WHITE_SPACE, c)) {
key.append(c);
} else {
key.append('\\');
key.append(c);
}
state = 0;
break;
case 2:
if (ArrayUtils.contains(WHITE_SPACE, c)) {
state = 2;
} else if (ArrayUtils.contains(SEPARATORS, c)) {
state = 3;
} else {
value.append(c);
state = 3;
}
break;
case 3:
value.append(c);
break;
}
}
result[0] = key.toString().trim();
result[1] = value.toString().trim();
return result;
}",0
626,private DocumentBuilder documentBuilder;,0
627,private DocumentBuilder documentBuilder;,0
628,public Token currentToken;,0
629,"public void ReInit(PropertyListParserTokenManager tm) {
token_source = tm;
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 6; i++) jj_la1[i] = -1;
for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
}",0
630,"public void ReInit(java.io.InputStream stream) {
jj_input_stream.ReInit(stream, 1, 1);
token_source.ReInit(jj_input_stream);
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 6; i++) jj_la1[i] = -1;
for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
}",0
631,"final public PropertyListConfiguration Dictionary() throws ParseException {
PropertyListConfiguration configuration = new PropertyListConfiguration();
List children = new ArrayList();
Node child = null;
jj_consume_token(DICT_BEGIN);
label_1: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case STRING:
case QUOTED_STRING:
;
break;
default:
jj_la1[0] = jj_gen;
break label_1;
}
child = Property();
if (child.getValue() instanceof HierarchicalConfiguration) {
HierarchicalConfiguration conf = (HierarchicalConfiguration) child.getValue();
Node root = conf.getRoot();
root.setName(child.getName());
children.add(root);
} else {
children.add(child);
}
}
jj_consume_token(DICT_END);
for (int i = 0; i < children.size(); i++) {
child = (Node) children.get(i);
configuration.getRoot().addChild(child);
}
{
if (true)
return configuration;
}
throw new Error(""Missing return statement in function"");
}",0
632,"private final int jjMoveNfa_0(int startState, int curPos) {
int[] nextStates;
int startsAt = 0;
jjnewStateCnt = 14;
int i = 1;
jjstateSet[0] = startState;
int j, kind = 0x7fffffff;
for (; ; ) {
if (++jjround == 0x7fffffff) {
ReInitRounds();
}
if (curChar < 64) {
long l = 1L << curChar;
MatchLoop: do {
switch(jjstateSet[--i]) {
case 15:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if ((0x7ff280100000000L & l) != 0L) {
jjCheckNAddTwoStates(4, 5);
} else if (curChar == 62) {
if (kind > 20) {
kind = 20;
}
}
break;
case 6:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if ((0x3ff000100002600L & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
} else if (curChar == 42) {
jjstateSet[jjnewStateCnt++] = 3;
} else if (curChar == 62) {
if (kind > 19) {
kind = 19;
}
}
break;
case 14:
if ((0xfffffffbffffffffL & l) != 0L) {
jjCheckNAddStates(0, 2);
} else if (curChar == 34) {
if (kind > 22) {
kind = 22;
}
}
break;
case 3:
case 8:
if ((0xd7ffecfaffffd9ffL & l) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 0:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
} else if (curChar == 34) {
jjCheckNAddStates(0, 2);
}
if (curChar == 60) {
jjstateSet[jjnewStateCnt++] = 6;
}
if (curChar == 60) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 1:
if ((0x3ff000100002600L & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 2:
if (curChar == 62 && kind > 19) {
kind = 19;
}
break;
case 4:
if ((0x7ff280100000000L & l) != 0L) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 5:
if (curChar == 62 && kind > 20) {
kind = 20;
}
break;
case 7:
if (curChar == 60) {
jjstateSet[jjnewStateCnt++] = 6;
}
break;
case 9:
case 11:
if (curChar == 34) {
jjCheckNAddStates(0, 2);
}
break;
case 10:
if ((0xfffffffbffffffffL & l) != 0L) {
jjCheckNAddStates(0, 2);
}
break;
case 13:
if (curChar == 34 && kind > 22) {
kind = 22;
}
break;
default:
break;
}
} while (i != startsAt);
} else if (curChar < 128) {
long l = 1L << (curChar & 077);
MatchLoop: do {
switch(jjstateSet[--i]) {
case 15:
if ((0xd7ffffffffffffffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if (curChar == 90) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 6:
if ((0xd7ffffffffffffffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if ((0x7e0000007eL & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 14:
jjCheckNAddStates(0, 2);
if (curChar == 92) {
jjstateSet[jjnewStateCnt++] = 11;
}
break;
case 3:
if ((0xd7ffffffffffffffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if (curChar == 68) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 0:
case 8:
if ((0xd7ffffffffffffffL & l) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 1:
if ((0x7e0000007eL & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 4:
if (curChar == 90) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 10:
jjCheckNAddStates(0, 2);
break;
case 12:
if (curChar == 92) {
jjstateSet[jjnewStateCnt++] = 11;
}
break;
default:
break;
}
} while (i != startsAt);
} else {
int i2 = (curChar & 0xff) >> 6;
long l2 = 1L << (curChar & 077);
MatchLoop: do {
switch(jjstateSet[--i]) {
case 15:
case 8:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 6:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 14:
case 10:
if ((jjbitVec0[i2] & l2) != 0L) {
jjCheckNAddStates(0, 2);
}
break;
case 3:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 0:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
default:
break;
}
} while (i != startsAt);
}
if (kind != 0x7fffffff) {
jjmatchedKind = kind;
jjmatchedPos = curPos;
kind = 0x7fffffff;
}
++curPos;
if ((i = jjnewStateCnt) == (startsAt = 14 - (jjnewStateCnt = startsAt))) {
return curPos;
}
try {
curChar = input_stream.readChar();
} catch (java.io.IOException e) {
return curPos;
}
}
}",0
633,"private final void jjAddStates(int start, int end) {
do {
jjstateSet[jjnewStateCnt++] = jjnextStates[start];
} while (start++ != end);
}",0
634,"public void ReInit(SimpleCharStream stream) {
jjmatchedPos = jjnewStateCnt = 0;
curLexState = defaultLexState;
input_stream = stream;
ReInitRounds();
}",0
635,"private final void ReInitRounds() {
int i;
jjround = 0x80000001;
for (i = 14; i-- > 0; ) {
jjrounds[i] = 0x80000000;
}
}",0
636,"public void SwitchTo(int lexState) {
if (lexState >= 1 || lexState < 0) {
throw new TokenMgrError(""Error: Ignoring invalid lexical state : "" + lexState + "". State unchanged."", TokenMgrError.INVALID_LEXICAL_STATE);
} else {
curLexState = lexState;
}
}",0
637,"public void ReInit(java.io.InputStream dstream) {
ReInit(dstream, 1, 1, 4096);
}",0
638,"public String GetImage() {
if (bufpos >= tokenBegin)
return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
else
return new String(buffer, tokenBegin, bufsize - tokenBegin) + new String(buffer, 0, bufpos + 1);
}",0
639,"public SimpleCharStream(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
this(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
}",0
640,"public void ReInit(java.io.Reader dstream, int startline, int startcolumn) {
ReInit(dstream, startline, startcolumn, 4096);
}",0
641,"public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
}",0
642,"public int beginLine, beginColumn, endLine, endColumn;",0
643,"private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof Date) {
synchronized (PListNode.format) {
out.println(padding + ""<date>"" + PListNode.format.format((Date) value) + ""</date>"");
}
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(padding + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(padding + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(padding + ""<true/>"");
} else {
out.println(padding + ""<false/>"");
}
} else if (value instanceof List) {
out.println(padding + ""<array>"");
Iterator it = ((List) value).iterator();
while (it.hasNext()) {
printValue(out, indentLevel + 1, it.next());
}
out.println(padding + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRoot());
} else if (value instanceof Configuration) {
out.println(padding + ""<dict>"");
Configuration config = (Configuration) value;
Iterator it = config.getKeys();
while (it.hasNext()) {
String key = (String) it.next();
Node node = new Node(key);
node.setValue(config.getProperty(key));
printNode(out, indentLevel + 1, node);
if (it.hasNext()) {
out.println();
}
}
out.println(padding + ""</dict>"");
} else if (value instanceof Map) {
Map map = (Map) value;
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
String base64 = new String(Base64.encodeBase64((byte[]) value));
out.println(padding + ""<data>"" + StringEscapeUtils.escapeXml(base64) + ""</data>"");
} else {
out.println(padding + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
}
}",0
644,"public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}",0
645,"public void load(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler(getRoot());
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
646,"public void setProperty(String key, Object value) {
if (value instanceof byte[]) {
fireEvent(EVENT_SET_PROPERTY, key, value, true);
setDetailEvents(false);
try {
clearProperty(key);
addPropertyDirect(key, value);
} finally {
setDetailEvents(true);
}
fireEvent(EVENT_SET_PROPERTY, key, value, false);
} else {
super.setProperty(key, value);
}
}",0
647,"protected File getFile() {
return (configuration.getURL() != null) ? fileFromURL(configuration.getURL()) : configuration.getFile();
}",0
648,"public List getSubNodes(String name) {
if (name == null) {
return getSubNodes();
}
List result;
if (nodes == null) {
result = null;
} else {
result = (List) namedNodes.get(name);
}
return (result == null) ? Collections.EMPTY_LIST : Collections.unmodifiableList(result);
}",0
649,"public boolean removeNode(ConfigurationNode node) {
if (nodes != null && node != null && nodes.contains(node)) {
detachNode(node);
nodes.remove(node);
List lst = (List) namedNodes.get(node.getName());
if (lst != null) {
lst.remove(node);
if (lst.isEmpty()) {
namedNodes.remove(node.getName());
}
}
return true;
} else {
return false;
}
}",0
650,"public boolean removeNodes(String name) {
if (nodes != null && name != null) {
List lst = (List) namedNodes.remove(name);
if (lst != null) {
detachNodes(lst);
nodes.removeAll(lst);
return true;
}
}
return false;
}",0
651,"public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer((ConfigurationNode) subNodes.get(positionToIndex(getPosition())));
}",0
652,"protected int getMaxPosition() {
return reverse ? getStartOffset() + 1 : subNodes.size() - getStartOffset();
}",0
653,private ConfigurationNode node;,0
654,"@Override
public void visitBeforeChildren(ImmutableNode node, NodeHandler<ImmutableNode> handler) {
ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
updateNode(node, refHandler);
insertNewChildNodes(node, refHandler);
}",0
655,"public static void dump(ImmutableConfiguration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}",0
656,"public static Synchronizer cloneSynchronizer(Synchronizer sync) {
if (sync == null) {
throw new IllegalArgumentException(""Synchronizer must not be null!"");
}
if (NoOpSynchronizer.INSTANCE == sync) {
return sync;
}
try {
return sync.getClass().newInstance();
} catch (Exception ex) {
LOG.info(""Cannot create new instance of "" + sync.getClass());
}
try {
return (Synchronizer) clone(sync);
} catch (CloneNotSupportedException cnex) {
throw new ConfigurationRuntimeException(""Cannot clone Synchronizer "" + sync);
}
}",0
657,"public DataSource getDataSource() {
return dataSource;
}",0
658,"private static Class<?> getDefaultClass(Object bean, String propName) {
try {
PropertyDescriptor desc = BEAN_UTILS_BEAN.getPropertyUtils().getPropertyDescriptor(bean, propName);
if (desc == null) {
return null;
}
return desc.getPropertyType();
} catch (Exception ex) {
return null;
}
}",0
659,private final ImmutableConfiguration configuration;,0
660,private AutoSaveListener autoSaveListener;,0
661,"@Override
public CombinedConfiguration getConfiguration() throws ConfigurationException {
CombinedConfiguration result = super.getConfiguration();
reloadingController.resetReloadingState();
return result;
}",0
662,"public static Float toFloat(Object value) throws ConversionException {
Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
} else {
return new Float(n.floatValue());
}
}",0
663,"static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(String.class);
return ctor.newInstance(value);
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}",0
664,"public static Double toDouble(Object value) throws ConversionException {
Number n = toNumber(value, Double.class);
if (n instanceof Double) {
return (Double) n;
} else {
return new Double(n.doubleValue());
}
}",0
665,"public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}",0
666,"private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}",0
667,"@Override
public void read(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
668,"private static <T> T[] defensiveCopy(T[] src) {
return (src != null) ? src.clone() : null;
}",0
669,private final QueryResult<T> attributeResult;,0
670,private final NodeHandler<T> handler;,0
671,"@Override
public void visitBeforeChildren(ImmutableNode node, NodeHandler<ImmutableNode> handler) {
ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
updateNode(node, refHandler);
insertNewChildNodes(node, refHandler);
}",0
672,"@Override
public void visitBeforeChildren(ImmutableNode node, NodeHandler<ImmutableNode> handler) {
ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
updateNode(node, refHandler);
insertNewChildNodes(node, refHandler);
}",0
673,"private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}",0
674,"private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}",0
675,"public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}",0
676,"public static Synchronizer cloneSynchronizer(Synchronizer sync) {
if (sync == null) {
throw new IllegalArgumentException(""Synchronizer must not be null!"");
}
if (NoOpSynchronizer.INSTANCE == sync) {
return sync;
}
try {
return sync.getClass().newInstance();
} catch (Exception ex) {
LOG.info(""Cannot create new instance of "" + sync.getClass());
}
try {
return (Synchronizer) clone(sync);
} catch (CloneNotSupportedException cnex) {
throw new ConfigurationRuntimeException(""Cannot clone Synchronizer "" + sync);
}
}",0
677,"protected PreparedStatement createStatement(String sql, boolean nameCol) throws SQLException {
String statement;
if (nameCol && configurationNameColumn != null) {
StringBuilder buf = new StringBuilder(sql);
buf.append("" AND "").append(configurationNameColumn).append(""=?"");
statement = buf.toString();
} else {
statement = sql;
}
pstmt = getConnection().prepareStatement(statement);
return pstmt;
}",0
678,"private static Class<?> getDefaultClass(Object bean, String propName) {
try {
PropertyDescriptor desc = BEAN_UTILS_BEAN.getPropertyUtils().getPropertyDescriptor(bean, propName);
if (desc == null) {
return null;
}
return desc.getPropertyType();
} catch (Exception ex) {
return null;
}
}",0
679,private ConfigurationSourceData sourceData;,0
680,"public static Byte toByte(Object value) throws ConversionException {
Number n = toNumber(value, Byte.class);
if (n instanceof Byte) {
return (Byte) n;
} else {
return new Byte(n.byteValue());
}
}",0
681,"public static Long toLong(Object value) throws ConversionException {
Number n = toNumber(value, Long.class);
if (n instanceof Long) {
return (Long) n;
} else {
return new Long(n.longValue());
}
}",0
682,private final EventType<?> errorOperationType;,0
683,private final EventType<? extends Event> eventType;,0
684,"private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File parent = file.getParentFile();
if (parent != null && !parent.exists()) {
parent.mkdirs();
}
}
}
}",0
685,"private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}",0
686,private final String protocol;,0
687,"private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}",0
688,"@Override
public void write(Writer out) throws ConfigurationException {
PrintWriter writer = new PrintWriter(out);
if (locator.getEncoding() != null) {
writer.println(""<?xml version=\""1.0\"" encoding=\"""" + locator.getEncoding() + ""\""?>"");
} else {
writer.println(""<?xml version=\""1.0\""?>"");
}
writer.println(""<!DOCTYPE plist SYSTEM \""file://localhost/System/Library/DTDs/PropertyList.dtd\"">"");
writer.println(""<plist version=\""1.0\"">"");
printNode(writer, 1, getNodeModel().getNodeHandler().getRootNode());
writer.println(""</plist>"");
writer.flush();
}",0
689,"private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof Date) {
synchronized (PListNodeBuilder.FORMAT) {
out.println(padding + ""<date>"" + PListNodeBuilder.FORMAT.format((Date) value) + ""</date>"");
}
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(padding + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(padding + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(padding + ""<true/>"");
} else {
out.println(padding + ""<false/>"");
}
} else if (value instanceof List) {
out.println(padding + ""<array>"");
for (Object o : (List<?>) value) {
printValue(out, indentLevel + 1, o);
}
out.println(padding + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
@SuppressWarnings(""unchecked"")
HierarchicalConfiguration<ImmutableNode> config = (HierarchicalConfiguration<ImmutableNode>) value;
printNode(out, indentLevel, config.getNodeModel().getNodeHandler().getRootNode());
} else if (value instanceof Configuration) {
out.println(padding + ""<dict>"");
Configuration config = (Configuration) value;
Iterator<String> it = config.getKeys();
while (it.hasNext()) {
String key = it.next();
ImmutableNode node = new ImmutableNode.Builder().name(key).value(config.getProperty(key)).create();
printNode(out, indentLevel + 1, node);
if (it.hasNext()) {
out.println();
}
}
out.println(padding + ""</dict>"");
} else if (value instanceof Map) {
Map<String, Object> map = transformMap((Map<?, ?>) value);
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
String base64 = new String(Base64.encodeBase64((byte[]) value));
out.println(padding + ""<data>"" + StringEscapeUtils.escapeXml(base64) + ""</data>"");
} else if (value != null) {
out.println(padding + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
} else {
out.println(padding + ""<string/>"");
}
}",0
690,"@Override
public void read(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
691,"@Override
public void read(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
692,"@Override
public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog catalog = staticCatalog;
if (catalog == null || !getUseStaticCatalog()) {
try {
catalog = new Catalog();
catalog.setCatalogManager(this);
catalog.setupReaders();
catalog.loadSystemCatalogs();
} catch (Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = catalog;
}
}
return catalog;
}",0
693,"public double getDouble(String key, double defaultValue) {
return getDouble(key, new Double(defaultValue)).doubleValue();
}",0
694,"public short getShort(String key, short defaultValue) {
return getShort(key, new Short(defaultValue)).shortValue();
}",0
695,"public byte getByte(String key, byte defaultValue) {
return getByte(key, new Byte(defaultValue)).byteValue();
}",0
696,"public long getLong(String key, long defaultValue) {
return getLong(key, new Long(defaultValue)).longValue();
}",0
697,private List<ConfigData> configurations;,0
698,"@Override
protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertiesConfiguration();
} else {
return new PropertiesConfiguration();
}
}",0
699,"@Override
protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertyListConfiguration();
} else {
return new PropertyListConfiguration();
}
}",0
700,"static File constructFile(String basePath, String fileName) {
File file;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
StringBuilder fName = new StringBuilder();
fName.append(basePath);
if (!basePath.endsWith(File.separator)) {
fName.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
fName.append(fileName.substring(2));
} else {
fName.append(fileName);
}
file = new File(fName.toString());
}
return file;
}",0
701,"public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}",0
702,protected Configuration configuration;,0
703,"@Override
protected void clearPropertyDirect(String key) {
StringBuilder query = new StringBuilder(""DELETE FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_CLEAR_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
}",0
704,"public Object getProperty(String key) {
Object result = null;
StringBuilder query = new StringBuilder(""SELECT * FROM "");
query.append(table).append("" WHERE "");
query.append(keyColumn).append(""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
List<Object> results = new ArrayList<Object>();
while (rs.next()) {
Object value = rs.getObject(valueColumn);
if (isDelimiterParsingDisabled()) {
results.add(value);
} else {
Iterator<?> it = PropertyConverter.toIterator(value, getListDelimiter());
while (it.hasNext()) {
results.add(it.next());
}
}
}
if (!results.isEmpty()) {
result = (results.size() > 1) ? results : results.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return result;
}",0
705,"public boolean isEmpty() {
boolean empty = true;
StringBuilder query = new StringBuilder(""SELECT count(*) FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
if (rs.next()) {
empty = rs.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return empty;
}",0
706,"public boolean isEmpty() {
boolean empty = true;
StringBuilder query = new StringBuilder(""SELECT count(*) FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
if (rs.next()) {
empty = rs.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return empty;
}",0
707,"public Iterator<String> getKeys() {
Collection<String> keys = new ArrayList<String>();
StringBuilder query = new StringBuilder(""SELECT DISTINCT "" + keyColumn + "" FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return keys.iterator();
}",0
708,"@Override
protected void addPropertyDirect(String key, Object obj) {
StringBuilder query = new StringBuilder(""INSERT INTO "" + table);
if (nameColumn != null) {
query.append("" ("" + nameColumn + "", "" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?, ?)"");
} else {
query.append("" ("" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?)"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
int index = 1;
if (nameColumn != null) {
pstmt.setString(index++, name);
}
pstmt.setString(index++, key);
pstmt.setString(index++, String.valueOf(obj));
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_ADD_PROPERTY, key, obj, e);
} finally {
close(conn, pstmt);
}
}",0
709,"@Override
protected Object createBeanInstance(Class<?> beanClass, BeanDeclaration data) throws Exception {
String fileName = ((ConfigurationDeclaration) data).getConfiguration().getString(ATTR_FILENAME);
if (fileName != null && fileName.toLowerCase().trim().endsWith(fileExtension)) {
return super.createBeanInstance(fetchMatchingClass(), data);
} else {
return super.createBeanInstance(fetchDefaultClass(), data);
}
}",0
710,"private Map<String, ConfigurationProvider> providers;",0
711,"public Object createBean(Class<?> beanClass, BeanDeclaration data, Object param) throws Exception {
ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
String tagName = decl.getNode().getName();
ConfigurationProvider provider = decl.getConfigurationBuilder().providerForTag(tagName);
if (provider == null) {
throw new ConfigurationRuntimeException(""No ConfigurationProvider registered for tag "" + tagName);
}
try {
return provider.getConfiguration(decl);
} catch (Exception ex) {
if (!decl.isOptional()) {
throw ex;
} else {
if (logger.isDebugEnabled()) {
logger.debug(""Load failed for optional configuration "" + tagName + "": "" + ex.getMessage());
}
decl.getConfigurationBuilder().fireError(EVENT_ERR_LOAD_OPTIONAL, decl.getConfiguration().getString(ATTR_NAME), null, ex);
if (decl.isForceCreate()) {
try {
return provider.getEmptyConfiguration(decl);
} catch (Exception ex2) {
;
}
}
return null;
}
}
}",0
712,"public String getPath(File file, URL url, String basePath, String fileName) {
String path = null;
if (file != null) {
path = file.getAbsolutePath();
}
if (path == null) {
if (url != null) {
path = url.getPath();
} else {
try {
path = getURL(basePath, fileName).getPath();
} catch (Exception e) {
;
}
}
}
return path;
}",0
713,"private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File parent = file.getParentFile();
if (parent != null && !parent.exists()) {
parent.mkdirs();
}
}
}
}",0
714,private ConfigurationNode rootNode;,0
715,private ConfigurationNode rootNode;,0
716,private final Object reloadLock;,0
717,private final Object reloadLock;,0
718,private ReloadingStrategy fileStrategy;,0
719,"@Override
public void setRootNode(ConfigurationNode rootNode) {
if (init) {
getConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}",0
720,"public static Byte toByte(Object value) throws ConversionException {
Number n = toNumber(value, Byte.class);
if (n instanceof Byte) {
return (Byte) n;
} else {
return new Byte(n.byteValue());
}
}",0
721,"public static Integer toInteger(Object value) throws ConversionException {
Number n = toNumber(value, Integer.class);
if (n instanceof Integer) {
return (Integer) n;
} else {
return new Integer(n.intValue());
}
}",0
722,"public static Double toDouble(Object value) throws ConversionException {
Number n = toNumber(value, Double.class);
if (n instanceof Double) {
return (Double) n;
} else {
return new Double(n.doubleValue());
}
}",0
723,"private FileSystemOptions getOptions(String scheme) {
FileSystemOptions opts = new FileSystemOptions();
FileSystemConfigBuilder builder;
try {
builder = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}",0
724,"private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}",0
725,private final String protocol;,0
726,private EntityResolver entityResolver = new DefaultEntityResolver();,0
727,private EntityResolver entityResolver = new DefaultEntityResolver();,0
728,"private XMLNode convertToXMLNode(ConfigurationNode node) {
if (node instanceof XMLNode) {
return (XMLNode) node;
}
XMLNode nd = (XMLNode) createNode(node.getName());
nd.setValue(node.getValue());
nd.setAttribute(node.isAttribute());
for (ConfigurationNode child : node.getChildren()) {
nd.addChild(convertToXMLNode(child));
}
for (ConfigurationNode attr : node.getAttributes()) {
nd.addAttribute(convertToXMLNode(attr));
}
return nd;
}",0
729,"@Override
public void save(Writer out) throws ConfigurationException {
PrintWriter writer = new PrintWriter(out);
String encoding = getEncoding() != null ? getEncoding() : DEFAULT_ENCODING;
writer.println(""<?xml version=\""1.0\"" encoding=\"""" + encoding + ""\""?>"");
writer.println(""<!DOCTYPE properties SYSTEM \""http://java.sun.com/dtd/properties.dtd\"">"");
writer.println(""<properties>"");
if (getHeader() != null) {
writer.println(""  <comment>"" + StringEscapeUtils.escapeXml(getHeader()) + ""</comment>"");
}
Iterator<String> keys = getKeys();
while (keys.hasNext()) {
String key = keys.next();
Object value = getProperty(key);
if (value instanceof List) {
writeProperty(writer, key, (List<?>) value);
} else {
writeProperty(writer, key, value);
}
}
writer.println(""</properties>"");
writer.flush();
}",0
730,"private static Class<?> getDefaultClass(Object bean, String propName) {
try {
PropertyDescriptor desc = PropertyUtils.getPropertyDescriptor(bean, propName);
if (desc == null) {
return null;
}
return desc.getPropertyType();
} catch (Exception ex) {
return null;
}
}",0
731,"private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof Date) {
synchronized (PListNode.format) {
out.println(padding + ""<date>"" + PListNode.format.format((Date) value) + ""</date>"");
}
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(padding + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(padding + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(padding + ""<true/>"");
} else {
out.println(padding + ""<false/>"");
}
} else if (value instanceof List) {
out.println(padding + ""<array>"");
Iterator<?> it = ((List<?>) value).iterator();
while (it.hasNext()) {
printValue(out, indentLevel + 1, it.next());
}
out.println(padding + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRoot());
} else if (value instanceof Configuration) {
out.println(padding + ""<dict>"");
Configuration config = (Configuration) value;
Iterator<String> it = config.getKeys();
while (it.hasNext()) {
String key = it.next();
Node node = new Node(key);
node.setValue(config.getProperty(key));
printNode(out, indentLevel + 1, node);
if (it.hasNext()) {
out.println();
}
}
out.println(padding + ""</dict>"");
} else if (value instanceof Map) {
Map<String, Object> map = transformMap((Map<?, ?>) value);
;
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
String base64 = new String(Base64.encodeBase64((byte[]) value));
out.println(padding + ""<data>"" + StringEscapeUtils.escapeXml(base64) + ""</data>"");
} else if (value != null) {
out.println(padding + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
} else {
out.println(padding + ""<string/>"");
}
}",0
732,"public void load(Reader in) throws ConfigurationException {
if (!(getRootNode() instanceof PListNode)) {
initRoot();
}
EntityResolver resolver = new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler(getRoot());
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
733,"private String getName(File file) {
String name = configuration.getURL().toString();
if (name == null) {
if (file != null) {
name = file.getAbsolutePath();
} else {
name = ""base: "" + configuration.getBasePath() + ""file: "" + configuration.getFileName();
}
}
return name;
}",0
734,"@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = (String) catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = ConfigurationUtils.locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}",0
735,"@Override
public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog catalog = staticCatalog;
if (catalog == null || !getUseStaticCatalog()) {
try {
catalog = new Catalog();
catalog.setCatalogManager(this);
catalog.setupReaders();
catalog.loadSystemCatalogs();
} catch (Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = catalog;
}
}
return catalog;
}",0
736,"@Override
protected String normalizeURI(String uriref) {
StrSubstitutor substitutor = ((CatalogManager) catalogManager).getStrSubstitutor();
String resolved = substitutor != null ? substitutor.replace(uriref) : uriref;
return super.normalizeURI(resolved);
}",0
737,"public boolean removeNodes(String name) {
if (nodes != null && name != null) {
List<ConfigurationNode> lst = namedNodes.remove(name);
if (lst != null) {
detachNodes(lst);
nodes.removeAll(lst);
return true;
}
}
return false;
}",0
738,private ConfigurationNode node;,0
739,"private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}",0
740,"private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}",0
741,"public List<Configuration> getConfigurations() {
beginRead(true);
try {
List<Configuration> list = new ArrayList<Configuration>(getNumberOfConfigurationsInternal());
for (ConfigData cd : configurations) {
list.add(cd.getConfiguration());
}
return list;
} finally {
endRead();
}
}",0
742,"public static Synchronizer cloneSynchronizer(Synchronizer sync) {
if (sync == null) {
throw new IllegalArgumentException(""Synchronizer must not be null!"");
}
if (NoOpSynchronizer.INSTANCE == sync) {
return sync;
}
try {
return sync.getClass().newInstance();
} catch (Exception ex) {
LOG.info(""Cannot create new instance of "" + sync.getClass());
}
try {
return (Synchronizer) clone(sync);
} catch (CloneNotSupportedException cnex) {
throw new ConfigurationRuntimeException(""Cannot clone Synchronizer "" + sync);
}
}",0
743,"protected PreparedStatement createStatement(String sql, boolean nameCol) throws SQLException {
String statement;
if (nameCol && configurationNameColumn != null) {
StringBuilder buf = new StringBuilder(sql);
buf.append("" AND "").append(configurationNameColumn).append(""=?"");
statement = buf.toString();
} else {
statement = sql;
}
pstmt = getConnection().prepareStatement(statement);
return pstmt;
}",0
744,private final ImmutableConfiguration configuration;,0
745,private AutoSaveListener autoSaveListener;,0
746,private ConfigurationSourceData sourceData;,0
747,"private ConfigurationBuilderEvent createEventWithChangedSource(ConfigurationBuilderEvent event) {
if (ConfigurationBuilderResultCreatedEvent.RESULT_CREATED.equals(event.getEventType())) {
return new ConfigurationBuilderResultCreatedEvent(this, ConfigurationBuilderResultCreatedEvent.RESULT_CREATED, ((ConfigurationBuilderResultCreatedEvent) event).getConfiguration());
}
@SuppressWarnings(""unchecked"")
EventType<? extends ConfigurationBuilderEvent> type = (EventType<? extends ConfigurationBuilderEvent>) event.getEventType();
return new ConfigurationBuilderEvent(this, type);
}",0
748,"static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(String.class);
return ctor.newInstance(value);
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}",0
749,"public static Float toFloat(Object value) throws ConversionException {
Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
} else {
return new Float(n.floatValue());
}
}",0
750,"public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}",0
751,"public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}",0
752,"private FileSystemOptions getOptions(String scheme) {
FileSystemOptions opts = new FileSystemOptions();
FileSystemConfigBuilder builder;
try {
builder = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}",0
753,"private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}",0
754,private final String protocol;,0
755,"@Override
public void read(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
756,"@Override
protected String normalizeURI(String uriref) {
ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
String resolved = (ci != null) ? String.valueOf(ci.interpolate(uriref)) : uriref;
return super.normalizeURI(resolved);
}",0
757,"@Override
@SuppressWarnings(""unchecked"")
public NodePointer createNodePointer(NodePointer parent, QName name, Object bean) {
if (bean instanceof NodeWrapper) {
NodeWrapper<?> wrapper = (NodeWrapper<?>) bean;
return new ConfigurationNodePointer((ConfigurationNodePointer) parent, wrapper.getNode(), wrapper.getNodeHandler());
}
return null;
}",0
758,"public float getFloat(String key, float defaultValue) {
return getFloat(key, new Float(defaultValue)).floatValue();
}",0
759,"public short getShort(String key, short defaultValue) {
return getShort(key, new Short(defaultValue)).shortValue();
}",0
760,"public long getLong(String key, long defaultValue) {
return getLong(key, new Long(defaultValue)).longValue();
}",0
761,"protected Object resolveContainerStore(String key) {
Object value = getProperty(key);
if (value != null) {
if (value instanceof List) {
List list = (List) value;
value = list.isEmpty() ? null : list.get(0);
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
value = array.length == 0 ? null : array[0];
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
value = array.length == 0 ? null : array[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
value = array.length == 0 ? null : new Byte(array[0]);
} else if (value instanceof short[]) {
short[] array = (short[]) value;
value = array.length == 0 ? null : new Short(array[0]);
} else if (value instanceof int[]) {
int[] array = (int[]) value;
value = array.length == 0 ? null : new Integer(array[0]);
} else if (value instanceof long[]) {
long[] array = (long[]) value;
value = array.length == 0 ? null : new Long(array[0]);
} else if (value instanceof float[]) {
float[] array = (float[]) value;
value = array.length == 0 ? null : new Float(array[0]);
} else if (value instanceof double[]) {
double[] array = (double[]) value;
value = array.length == 0 ? null : new Double(array[0]);
}
}
return value;
}",0
762,"protected Object resolveContainerStore(String key) {
Object value = getProperty(key);
if (value != null) {
if (value instanceof List) {
List list = (List) value;
value = list.isEmpty() ? null : list.get(0);
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
value = array.length == 0 ? null : array[0];
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
value = array.length == 0 ? null : array[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
value = array.length == 0 ? null : new Byte(array[0]);
} else if (value instanceof short[]) {
short[] array = (short[]) value;
value = array.length == 0 ? null : new Short(array[0]);
} else if (value instanceof int[]) {
int[] array = (int[]) value;
value = array.length == 0 ? null : new Integer(array[0]);
} else if (value instanceof long[]) {
long[] array = (long[]) value;
value = array.length == 0 ? null : new Long(array[0]);
} else if (value instanceof float[]) {
float[] array = (float[]) value;
value = array.length == 0 ? null : new Float(array[0]);
} else if (value instanceof double[]) {
double[] array = (double[]) value;
value = array.length == 0 ? null : new Double(array[0]);
}
}
return value;
}",0
763,"protected Object resolveContainerStore(String key) {
Object value = getProperty(key);
if (value != null) {
if (value instanceof List) {
List list = (List) value;
value = list.isEmpty() ? null : list.get(0);
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
value = array.length == 0 ? null : array[0];
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
value = array.length == 0 ? null : array[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
value = array.length == 0 ? null : new Byte(array[0]);
} else if (value instanceof short[]) {
short[] array = (short[]) value;
value = array.length == 0 ? null : new Short(array[0]);
} else if (value instanceof int[]) {
int[] array = (int[]) value;
value = array.length == 0 ? null : new Integer(array[0]);
} else if (value instanceof long[]) {
long[] array = (long[]) value;
value = array.length == 0 ? null : new Long(array[0]);
} else if (value instanceof float[]) {
float[] array = (float[]) value;
value = array.length == 0 ? null : new Float(array[0]);
} else if (value instanceof double[]) {
double[] array = (double[]) value;
value = array.length == 0 ? null : new Double(array[0]);
}
}
return value;
}",0
764,"protected Object resolveContainerStore(String key) {
Object value = getProperty(key);
if (value != null) {
if (value instanceof List) {
List list = (List) value;
value = list.isEmpty() ? null : list.get(0);
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
value = array.length == 0 ? null : array[0];
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
value = array.length == 0 ? null : array[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
value = array.length == 0 ? null : new Byte(array[0]);
} else if (value instanceof short[]) {
short[] array = (short[]) value;
value = array.length == 0 ? null : new Short(array[0]);
} else if (value instanceof int[]) {
int[] array = (int[]) value;
value = array.length == 0 ? null : new Integer(array[0]);
} else if (value instanceof long[]) {
long[] array = (long[]) value;
value = array.length == 0 ? null : new Long(array[0]);
} else if (value instanceof float[]) {
float[] array = (float[]) value;
value = array.length == 0 ? null : new Float(array[0]);
} else if (value instanceof double[]) {
double[] array = (double[]) value;
value = array.length == 0 ? null : new Double(array[0]);
}
}
return value;
}",0
765,"protected Object resolveContainerStore(String key) {
Object value = getProperty(key);
if (value != null) {
if (value instanceof List) {
List list = (List) value;
value = list.isEmpty() ? null : list.get(0);
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
value = array.length == 0 ? null : array[0];
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
value = array.length == 0 ? null : array[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
value = array.length == 0 ? null : new Byte(array[0]);
} else if (value instanceof short[]) {
short[] array = (short[]) value;
value = array.length == 0 ? null : new Short(array[0]);
} else if (value instanceof int[]) {
int[] array = (int[]) value;
value = array.length == 0 ? null : new Integer(array[0]);
} else if (value instanceof long[]) {
long[] array = (long[]) value;
value = array.length == 0 ? null : new Long(array[0]);
} else if (value instanceof float[]) {
float[] array = (float[]) value;
value = array.length == 0 ? null : new Float(array[0]);
} else if (value instanceof double[]) {
double[] array = (double[]) value;
value = array.length == 0 ? null : new Double(array[0]);
}
}
return value;
}",0
766,"protected Object resolveContainerStore(String key) {
Object value = getProperty(key);
if (value != null) {
if (value instanceof List) {
List list = (List) value;
value = list.isEmpty() ? null : list.get(0);
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
value = array.length == 0 ? null : array[0];
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
value = array.length == 0 ? null : array[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
value = array.length == 0 ? null : new Byte(array[0]);
} else if (value instanceof short[]) {
short[] array = (short[]) value;
value = array.length == 0 ? null : new Short(array[0]);
} else if (value instanceof int[]) {
int[] array = (int[]) value;
value = array.length == 0 ? null : new Integer(array[0]);
} else if (value instanceof long[]) {
long[] array = (long[]) value;
value = array.length == 0 ? null : new Long(array[0]);
} else if (value instanceof float[]) {
float[] array = (float[]) value;
value = array.length == 0 ? null : new Float(array[0]);
} else if (value instanceof double[]) {
double[] array = (double[]) value;
value = array.length == 0 ? null : new Double(array[0]);
}
}
return value;
}",0
767,"public void load(InputStream in, String encoding) throws ConfigurationException {
Reader reader = null;
if (encoding != null) {
try {
reader = new InputStreamReader(in, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (reader == null) {
reader = new InputStreamReader(in);
}
load(reader);
}",0
768,"private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File parent = file.getParentFile();
if (parent != null && !parent.exists()) {
parent.mkdirs();
}
}
}
}",0
769,"public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writer = null;
if (encoding != null) {
try {
writer = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writer == null) {
writer = new OutputStreamWriter(out);
}
save(writer);
}",0
770,"private Collection parseAt(String at) {
if (at == null) {
return null;
}
Collection result = new ArrayList();
DefaultConfigurationKey.KeyIterator it = new DefaultConfigurationKey(AT_ENGINE, at).iterator();
while (it.hasNext()) {
result.add(it.nextKey());
}
return result;
}",0
771,"protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertiesConfiguration();
} else {
return new PropertiesConfiguration();
}
}",0
772,"public Iterator getKeys() {
Collection keys = new ArrayList();
StringBuffer query = new StringBuffer(""SELECT DISTINCT "" + keyColumn + "" FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
closeQuietly(conn, pstmt);
}
return keys.iterator();
}",0
773,"public void clearProperty(String key) {
StringBuffer query = new StringBuffer(""DELETE FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
pstmt.executeUpdate();
} catch (SQLException e) {
fireError(EVENT_CLEAR_PROPERTY, key, null, e);
} finally {
closeQuietly(conn, pstmt);
}
}",0
774,"public boolean isEmpty() {
boolean empty = true;
StringBuffer query = new StringBuffer(""SELECT count(*) FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
if (rs.next()) {
empty = rs.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
closeQuietly(conn, pstmt);
}
return empty;
}",0
775,"public boolean containsKey(String key) {
boolean found = false;
StringBuffer query = new StringBuffer(""SELECT * FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
found = rs.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
closeQuietly(conn, pstmt);
}
return found;
}",0
776,"protected void addPropertyDirect(String key, Object obj) {
StringBuffer query = new StringBuffer(""INSERT INTO "" + table);
if (nameColumn != null) {
query.append("" ("" + nameColumn + "", "" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?, ?)"");
} else {
query.append("" ("" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?)"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
int index = 1;
if (nameColumn != null) {
pstmt.setString(index++, name);
}
pstmt.setString(index++, key);
pstmt.setString(index++, String.valueOf(obj));
pstmt.executeUpdate();
} catch (SQLException e) {
fireError(EVENT_ADD_PROPERTY, key, obj, e);
} finally {
closeQuietly(conn, pstmt);
}
}",0
777,"public void clear() {
StringBuffer query = new StringBuffer(""DELETE FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
pstmt.executeUpdate();
} catch (SQLException e) {
fireError(EVENT_CLEAR, null, null, e);
} finally {
closeQuietly(conn, pstmt);
}
}",0
778,"public Object getProperty(String key) {
Object result = null;
StringBuffer query = new StringBuffer(""SELECT * FROM "");
query.append(table).append("" WHERE "");
query.append(keyColumn).append(""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
List results = new ArrayList();
while (rs.next()) {
Object val = rs.getObject(valueColumn);
if (isDelimiterParsingDisabled()) {
results.add(val);
} else {
CollectionUtils.addAll(results, PropertyConverter.toIterator(val, getListDelimiter()));
}
}
if (!results.isEmpty()) {
result = (results.size() > 1) ? results : results.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
closeQuietly(conn, pstmt);
}
return result;
}",0
779,"protected Object createBeanInstance(Class beanClass, BeanDeclaration data) throws Exception {
String fileName = ((ConfigurationDeclaration) data).getConfiguration().getString(ATTR_FILENAME);
if (fileName != null && fileName.toLowerCase().trim().endsWith(fileExtension)) {
return super.createBeanInstance(fetchMatchingClass(), data);
} else {
return super.createBeanInstance(fetchDefaultClass(), data);
}
}",0
780,private ConfigurationNode rootNode;,0
781,"public void clearTree(String key) {
fireEvent(EVENT_CLEAR_TREE, key, null, true);
List nodes = fetchNodeList(key);
for (Iterator it = nodes.iterator(); it.hasNext(); ) {
removeNode((ConfigurationNode) it.next());
}
fireEvent(EVENT_CLEAR_TREE, key, nodes, false);
}",0
782,"public static Byte toByte(Object value) throws ConversionException {
Number n = toNumber(value, Byte.class);
if (n instanceof Byte) {
return (Byte) n;
} else {
return new Byte(n.byteValue());
}
}",0
783,"private void load(InputSource source) throws ConfigurationException {
try {
URL sourceURL = getDelegate().getURL();
if (sourceURL != null) {
source.setSystemId(sourceURL.toString());
}
DocumentBuilder builder = createDocumentBuilder();
Document newDocument = builder.parse(source);
Document oldDocument = document;
document = null;
initProperties(newDocument, oldDocument == null);
document = (oldDocument == null) ? newDocument : oldDocument;
} catch (Exception e) {
throw new ConfigurationException(e.getMessage(), e);
}
}",0
784,"public void load(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
785,"public static void initBean(Object bean, BeanDeclaration data) throws ConfigurationRuntimeException {
Map properties = data.getBeanProperties();
if (properties != null) {
for (Iterator it = properties.keySet().iterator(); it.hasNext(); ) {
String propName = (String) it.next();
initProperty(bean, propName, properties.get(propName));
}
}
Map nestedBeans = data.getNestedBeanDeclarations();
if (nestedBeans != null) {
for (Iterator it = nestedBeans.keySet().iterator(); it.hasNext(); ) {
String propName = (String) it.next();
initProperty(bean, propName, createBean((BeanDeclaration) nestedBeans.get(propName), null));
}
}
}",0
786,"public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List list = (List) value;
Iterator iterator = list.iterator();
while (iterator.hasNext()) {
getConfiguration().addProperty(name, iterator.next());
}
} else if (value instanceof int[]) {
int[] array = (int[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Integer(array[i]));
}
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(array[i]));
}
} else if (value instanceof char[]) {
char[] array = (char[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Character(array[i]));
}
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Byte(array[i]));
}
} else if (value instanceof short[]) {
short[] array = (short[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Short(array[i]));
}
} else if (value instanceof long[]) {
long[] array = (long[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Long(array[i]));
}
} else if (value instanceof float[]) {
float[] array = (float[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Float(array[i]));
}
} else if (value instanceof double[]) {
double[] array = (double[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Double(array[i]));
}
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, array[i]);
}
} else {
getConfiguration().setProperty(name, value);
}
}",0
787,"public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List list = (List) value;
Iterator iterator = list.iterator();
while (iterator.hasNext()) {
getConfiguration().addProperty(name, iterator.next());
}
} else if (value instanceof int[]) {
int[] array = (int[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Integer(array[i]));
}
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(array[i]));
}
} else if (value instanceof char[]) {
char[] array = (char[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Character(array[i]));
}
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Byte(array[i]));
}
} else if (value instanceof short[]) {
short[] array = (short[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Short(array[i]));
}
} else if (value instanceof long[]) {
long[] array = (long[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Long(array[i]));
}
} else if (value instanceof float[]) {
float[] array = (float[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Float(array[i]));
}
} else if (value instanceof double[]) {
double[] array = (double[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Double(array[i]));
}
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, array[i]);
}
} else {
getConfiguration().setProperty(name, value);
}
}",0
788,"public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List list = (List) value;
Iterator iterator = list.iterator();
while (iterator.hasNext()) {
getConfiguration().addProperty(name, iterator.next());
}
} else if (value instanceof int[]) {
int[] array = (int[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Integer(array[i]));
}
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(array[i]));
}
} else if (value instanceof char[]) {
char[] array = (char[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Character(array[i]));
}
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Byte(array[i]));
}
} else if (value instanceof short[]) {
short[] array = (short[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Short(array[i]));
}
} else if (value instanceof long[]) {
long[] array = (long[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Long(array[i]));
}
} else if (value instanceof float[]) {
float[] array = (float[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Float(array[i]));
}
} else if (value instanceof double[]) {
double[] array = (double[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Double(array[i]));
}
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, array[i]);
}
} else {
getConfiguration().setProperty(name, value);
}
}",0
789,"public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List list = (List) value;
Iterator iterator = list.iterator();
while (iterator.hasNext()) {
getConfiguration().addProperty(name, iterator.next());
}
} else if (value instanceof int[]) {
int[] array = (int[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Integer(array[i]));
}
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(array[i]));
}
} else if (value instanceof char[]) {
char[] array = (char[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Character(array[i]));
}
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Byte(array[i]));
}
} else if (value instanceof short[]) {
short[] array = (short[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Short(array[i]));
}
} else if (value instanceof long[]) {
long[] array = (long[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Long(array[i]));
}
} else if (value instanceof float[]) {
float[] array = (float[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Float(array[i]));
}
} else if (value instanceof double[]) {
double[] array = (double[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Double(array[i]));
}
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, array[i]);
}
} else {
getConfiguration().setProperty(name, value);
}
}",0
790,"public DynaProperty getDynaProperty(String name) {
if (log.isTraceEnabled()) {
log.trace(""getDynaProperty("" + name + "")"");
}
if (name == null) {
throw new IllegalArgumentException(""No such property name=["" + name + ""]"");
}
Object value = configuration.getProperty(name);
if (value == null) {
return null;
} else {
Class type = value.getClass();
if (type == Byte.class) {
type = Byte.TYPE;
}
if (type == Character.class) {
type = Character.TYPE;
} else if (type == Boolean.class) {
type = Boolean.TYPE;
} else if (type == Double.class) {
type = Double.TYPE;
} else if (type == Float.class) {
type = Float.TYPE;
} else if (type == Integer.class) {
type = Integer.TYPE;
} else if (type == Long.class) {
type = Long.TYPE;
} else if (type == Short.class) {
type = Short.TYPE;
}
return new DynaProperty(name, type);
}
}",0
791,public Token currentToken;,0
792,"final public Object Element() throws ParseException {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_BEGIN:
return Array();
case DICT_BEGIN:
return Dictionary();
case STRING:
case QUOTED_STRING:
return String();
case DATA:
return Data();
default:
jj_la1[2] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}",0
793,"final public PropertyListConfiguration Dictionary() throws ParseException {
PropertyListConfiguration configuration = new PropertyListConfiguration();
List children = new ArrayList();
Node child = null;
jj_consume_token(DICT_BEGIN);
label_1: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case STRING:
case QUOTED_STRING:
;
break;
default:
jj_la1[0] = jj_gen;
break label_1;
}
child = Property();
if (child.getValue() instanceof HierarchicalConfiguration) {
HierarchicalConfiguration conf = (HierarchicalConfiguration) child.getValue();
Node root = conf.getRoot();
root.setName(child.getName());
children.add(root);
} else {
children.add(child);
}
}
jj_consume_token(DICT_END);
for (int i = 0; i < children.size(); i++) {
child = (Node) children.get(i);
configuration.getRoot().addChild(child);
}
return configuration;
}",0
794,"final public List Array() throws ParseException {
List list = new ArrayList();
Object element = null;
jj_consume_token(ARRAY_BEGIN);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_BEGIN:
case DICT_BEGIN:
case DATA:
case STRING:
case QUOTED_STRING:
element = Element();
list.add(element);
label_2: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_SEPARATOR:
;
break;
default:
jj_la1[3] = jj_gen;
break label_2;
}
jj_consume_token(ARRAY_SEPARATOR);
element = Element();
list.add(element);
}
break;
default:
jj_la1[4] = jj_gen;
;
}
jj_consume_token(ARRAY_END);
return list;
}",0
795,"private final int jjMoveNfa_0(int startState, int curPos) {
int startsAt = 0;
jjnewStateCnt = 9;
int i = 1;
jjstateSet[0] = startState;
int kind = 0x7fffffff;
for (; ; ) {
if (++jjround == 0x7fffffff)
ReInitRounds();
if (curChar < 64) {
long l = 1L << curChar;
MatchLoop: do {
switch(jjstateSet[--i]) {
case 9:
if ((0xfffffffbffffffffL & l) != 0L)
jjCheckNAddStates(0, 2);
else if (curChar == 34) {
if (kind > 20)
kind = 20;
}
break;
case 10:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
}
if ((0x3ff000100002600L & l) != 0L)
jjCheckNAddTwoStates(1, 2);
else if (curChar == 62) {
if (kind > 18)
kind = 18;
}
break;
case 0:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
} else if (curChar == 34)
jjCheckNAddStates(0, 2);
if (curChar == 60)
jjCheckNAddTwoStates(1, 2);
break;
case 1:
if ((0x3ff000100002600L & l) != 0L)
jjCheckNAddTwoStates(1, 2);
break;
case 2:
if (curChar == 62 && kind > 18)
kind = 18;
break;
case 3:
if ((0xd7ffecfaffffd9ffL & l) == 0L)
break;
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
break;
case 4:
case 6:
if (curChar == 34)
jjCheckNAddStates(0, 2);
break;
case 5:
if ((0xfffffffbffffffffL & l) != 0L)
jjCheckNAddStates(0, 2);
break;
case 8:
if (curChar == 34 && kind > 20)
kind = 20;
break;
default:
break;
}
} while (i != startsAt);
} else if (curChar < 128) {
long l = 1L << (curChar & 077);
MatchLoop: do {
switch(jjstateSet[--i]) {
case 9:
jjCheckNAddStates(0, 2);
if (curChar == 92)
jjstateSet[jjnewStateCnt++] = 6;
break;
case 10:
if ((0xd7ffffffffffffffL & l) != 0L) {
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
}
if ((0x7e0000007eL & l) != 0L)
jjCheckNAddTwoStates(1, 2);
break;
case 0:
case 3:
if ((0xd7ffffffffffffffL & l) == 0L)
break;
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
break;
case 1:
if ((0x7e0000007eL & l) != 0L)
jjCheckNAddTwoStates(1, 2);
break;
case 5:
jjCheckNAddStates(0, 2);
break;
case 7:
if (curChar == 92)
jjstateSet[jjnewStateCnt++] = 6;
break;
default:
break;
}
} while (i != startsAt);
} else {
int i2 = (curChar & 0xff) >> 6;
long l2 = 1L << (curChar & 077);
MatchLoop: do {
switch(jjstateSet[--i]) {
case 9:
case 5:
if ((jjbitVec0[i2] & l2) != 0L)
jjCheckNAddStates(0, 2);
break;
case 10:
case 3:
if ((jjbitVec0[i2] & l2) == 0L)
break;
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
break;
case 0:
if ((jjbitVec0[i2] & l2) == 0L)
break;
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
break;
default:
break;
}
} while (i != startsAt);
}
if (kind != 0x7fffffff) {
jjmatchedKind = kind;
jjmatchedPos = curPos;
kind = 0x7fffffff;
}
++curPos;
if ((i = jjnewStateCnt) == (startsAt = 9 - (jjnewStateCnt = startsAt)))
return curPos;
try {
curChar = input_stream.readChar();
} catch (IOException e) {
return curPos;
}
}
}",0
796,"public SimpleCharStream(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
this(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
}",0
797,"protected void FillBuff() throws java.io.IOException {
if (maxNextCharInd == available) {
if (available == bufsize) {
if (tokenBegin > 2048) {
bufpos = maxNextCharInd = 0;
available = tokenBegin;
} else if (tokenBegin < 0)
bufpos = maxNextCharInd = 0;
else
ExpandBuff(false);
} else if (available > tokenBegin)
available = bufsize;
else if ((tokenBegin - available) < 2048)
ExpandBuff(true);
else
available = tokenBegin;
}
int i;
try {
if ((i = inputStream.read(buffer, maxNextCharInd, available - maxNextCharInd)) == -1) {
inputStream.close();
throw new java.io.IOException();
} else
maxNextCharInd += i;
return;
} catch (java.io.IOException e) {
--bufpos;
backup(0);
if (tokenBegin == -1)
tokenBegin = bufpos;
throw e;
}
}",0
798,"protected void UpdateLineColumn(char c) {
column++;
if (prevCharIsLF) {
prevCharIsLF = false;
line += (column = 1);
} else if (prevCharIsCR) {
prevCharIsCR = false;
if (c == '\n') {
prevCharIsLF = true;
} else
line += (column = 1);
}
switch(c) {
case '\r':
prevCharIsCR = true;
break;
case '\n':
prevCharIsLF = true;
break;
case '\t':
column--;
column += (8 - (column & 07));
break;
default:
break;
}
bufline[bufpos] = line;
bufcolumn[bufpos] = column;
}",0
799,"public char BeginToken() throws java.io.IOException {
tokenBegin = -1;
char c = readChar();
tokenBegin = bufpos;
return c;
}",0
800,public Token specialToken;,0
801,"public int beginLine, beginColumn, endLine, endColumn;",0
802,"public int beginLine, beginColumn, endLine, endColumn;",0
803,"protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {
return (""Lexical error at line "" + errorLine + "", column "" + errorColumn + "".  Encountered: "" + (EOFSeen ? ""<EOF> "" : (""\"""" + addEscapes(String.valueOf(curChar)) + ""\"""") + "" ("" + (int) curChar + ""), "") + ""after : \"""" + addEscapes(errorAfter) + ""\"""");
}",0
804,"public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}",0
805,"public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}",0
806,"public void addRealValue(String value) {
addValue(new Double(value));
}",0
807,"public void addRealValue(String value) {
addValue(new Double(value));
}",0
808,"private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof Date) {
out.println(padding + ""<date>"" + PListNode.format.format((Date) value) + ""</date>"");
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(padding + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(padding + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(padding + ""<true/>"");
} else {
out.println(padding + ""<false/>"");
}
} else if (value instanceof List) {
out.println(padding + ""<array>"");
Iterator it = ((List) value).iterator();
while (it.hasNext()) {
printValue(out, indentLevel + 1, it.next());
}
out.println(padding + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRoot());
} else if (value instanceof Configuration) {
out.println(padding + ""<dict>"");
Configuration config = (Configuration) value;
Iterator it = config.getKeys();
while (it.hasNext()) {
String key = (String) it.next();
Node node = new Node(key);
node.setValue(config.getProperty(key));
printNode(out, indentLevel + 1, node);
if (it.hasNext()) {
out.println();
}
}
out.println(padding + ""</dict>"");
} else if (value instanceof Map) {
Map map = (Map) value;
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
String base64 = new String(Base64.encodeBase64((byte[]) value));
out.println(padding + ""<data>"" + StringEscapeUtils.escapeXml(base64) + ""</data>"");
} else {
out.println(padding + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
}
}",0
809,"public void addIntegerValue(String value) {
addValue(new Integer(value));
}",0
810,"public boolean removeNode(ConfigurationNode node) {
if (nodes != null && node != null && nodes.contains(node)) {
detachNode(node);
nodes.remove(node);
List lst = (List) namedNodes.get(node.getName());
if (lst != null) {
lst.remove(node);
if (lst.isEmpty()) {
namedNodes.remove(node.getName());
}
}
return true;
} else {
return false;
}
}",0
811,"public boolean removeNodes(String name) {
if (nodes != null && name != null) {
List lst = (List) namedNodes.remove(name);
if (lst != null) {
detachNodes(lst);
nodes.removeAll(lst);
return true;
}
}
return false;
}",0
812,"public List getSubNodes(String name) {
if (name == null) {
return getSubNodes();
}
List result;
if (nodes == null) {
result = null;
} else {
result = (List) namedNodes.get(name);
}
return (result == null) ? Collections.EMPTY_LIST : Collections.unmodifiableList(result);
}",0
813,"public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer((ConfigurationNode) subNodes.get(positionToIndex(getPosition())));
}",0
814,private ConfigurationNode node;,0
815,"@Override
public void visitBeforeChildren(final ImmutableNode node, final NodeHandler<ImmutableNode> handler) {
final ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
updateNode(node, refHandler);
insertNewChildNodes(node, refHandler);
}",0
816,"private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
}
final Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
final ByteArrayOutputStream os = new ByteArrayOutputStream();
final PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}",0
817,"public static void dump(final ImmutableConfiguration configuration, final PrintStream out) {
dump(configuration, new PrintWriter(out));
}",0
818,"protected PreparedStatement createStatement(final String sql, final boolean nameCol) throws SQLException {
final String statement;
if (nameCol && configurationNameColumn != null) {
final StringBuilder buf = new StringBuilder(sql);
buf.append("" AND "").append(configurationNameColumn).append(""=?"");
statement = buf.toString();
} else {
statement = sql;
}
pstmt = getConnection().prepareStatement(statement);
return pstmt;
}",0
819,"public DataSource getDataSource() {
return dataSource;
}",0
820,"@Override
public void read(final InputStream in) throws ConfigurationException, IOException {
load(new InputSource(in));
}",0
821,"private static Class<?> getDefaultClass(final Object bean, final String propName) {
try {
final PropertyDescriptor desc = BEAN_UTILS_BEAN.getPropertyUtils().getPropertyDescriptor(bean, propName);
if (desc == null) {
return null;
}
return desc.getPropertyType();
} catch (final Exception ex) {
return null;
}
}",0
822,private final ImmutableConfiguration configuration;,0
823,private AutoSaveListener autoSaveListener;,0
824,private ConfigurationSourceData sourceData;,0
825,"@Override
public CombinedConfiguration getConfiguration() throws ConfigurationException {
final CombinedConfiguration result = super.getConfiguration();
reloadingController.resetReloadingState();
return result;
}",0
826,"static Object toInternetAddress(final Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
}
if (!(value instanceof String)) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
try {
final Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(String.class);
return ctor.newInstance(value);
} catch (final Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
}",0
827,private final String protocol;,0
828,"private FileSystemOptions getOptions(final String scheme) {
if (scheme == null) {
return null;
}
final FileSystemOptions opts = new FileSystemOptions();
final FileSystemConfigBuilder builder;
try {
builder = getManager().getFileSystemConfigBuilder(scheme);
} catch (final Exception ex) {
return null;
}
final FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
final Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (final Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (final Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}",0
829,"private void setProperty(final FileSystemConfigBuilder builder, final FileSystemOptions options, final String key, final Object value) {
final String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
final Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
final Method method = builder.getClass().getMethod(methodName, paramTypes);
final Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (final Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}",0
830,"@Override
public void read(final Reader in) throws ConfigurationException {
final EntityResolver resolver = (publicId, systemId) -> new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
final XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
final SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
final SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (final Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
831,"@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
final String base = ((CatalogManager) catalogManager).getBaseDir();
final Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
final String fileName = catalogs.elementAt(count);
URL url = null;
InputStream inputStream = null;
try {
url = locate(fs, base, fileName);
if (url != null) {
inputStream = fs.getInputStream(url);
}
} catch (final ConfigurationException ce) {
final String name = url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (inputStream != null) {
final String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, inputStream);
continue;
}
} catch (final Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
inputStream.close();
}
}
parseCatalog(base, fileName);
}
}
}",0
832,"@Override
protected String normalizeURI(final String uriref) {
final ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
final String resolved = ci != null ? String.valueOf(ci.interpolate(uriref)) : uriref;
return super.normalizeURI(resolved);
}",0
833,"private static <T> T[] defensiveCopy(final T[] src) {
return src != null ? src.clone() : null;
}",0
834,private final NodeHandler<T> handler;,0
835,"public byte getByte(String key, byte defaultValue) {
return getByte(key, new Byte(defaultValue)).byteValue();
}",0
836,"public long getLong(String key, long defaultValue) {
return getLong(key, new Long(defaultValue)).longValue();
}",0
837,"public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writer = null;
if (encoding != null) {
try {
writer = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writer == null) {
writer = new OutputStreamWriter(out);
}
save(writer);
}",0
838,"@Override
protected Object performOperation() throws SQLException {
PreparedStatement ps = initStatement(String.format(SQL_IS_EMPTY, table), true);
ResultSet rs = ps.executeQuery();
return rs.next() ? rs.getInt(1) : null;
}",0
839,"@Override
protected Object performOperation() throws SQLException {
PreparedStatement pstmt = initStatement(String.format(SQL_GET_PROPERTY, table, keyColumn), true, key);
ResultSet rs = pstmt.executeQuery();
return rs.next();
}",0
840,"protected PreparedStatement createStatement(String sql, boolean nameCol) throws SQLException {
String statement;
if (nameCol && nameColumn != null) {
StringBuilder buf = new StringBuilder(sql);
buf.append("" AND "").append(nameColumn).append(""=?"");
statement = buf.toString();
} else {
statement = sql;
}
pstmt = getConnection().prepareStatement(statement);
return pstmt;
}",0
841,"public Object createBean(Class<?> beanClass, BeanDeclaration data, Object param) throws Exception {
ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
String tagName = decl.getNode().getName();
ConfigurationProvider provider = decl.getConfigurationBuilder().providerForTag(tagName);
if (provider == null) {
throw new ConfigurationRuntimeException(""No ConfigurationProvider registered for tag "" + tagName);
}
try {
return provider.getConfiguration(decl);
} catch (Exception ex) {
if (!decl.isOptional()) {
throw ex;
} else {
if (logger.isDebugEnabled()) {
logger.debug(""Load failed for optional configuration "" + tagName + "": "" + ex.getMessage());
}
decl.getConfigurationBuilder().fireError(EVENT_ERR_LOAD_OPTIONAL, decl.getConfiguration().getString(ATTR_NAME), null, ex);
if (decl.isForceCreate()) {
try {
return provider.getEmptyConfiguration(decl);
} catch (Exception ex2) {
;
}
}
return null;
}
}
}",0
842,"public void setRootNode(ConfigurationNode rootNode) {
if (rootNode == null) {
throw new IllegalArgumentException(""Root node must not be null!"");
}
this.rootNode = rootNode;
}",0
843,"@Override
public void setRootNode(ConfigurationNode rootNode) {
if (init) {
getConfiguration().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}",0
844,"private ReloadingStrategy createReloadingStrategy() {
if (getReloadingStrategy() == null) {
return null;
}
try {
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(getReloadingStrategy());
strategy.setConfiguration(null);
return strategy;
} catch (Exception ex) {
return null;
}
}",0
845,"public void load(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
846,"public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writer = null;
if (encoding != null) {
try {
writer = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writer == null) {
writer = new OutputStreamWriter(out);
}
save(writer);
}",0
847,"private static Class getDefaultClass(Object bean, String propName) {
try {
PropertyDescriptor desc = PropertyUtils.getPropertyDescriptor(bean, propName);
if (desc == null) {
return null;
}
return desc.getPropertyType();
} catch (Exception ex) {
return null;
}
}",0
848,"protected void performReloadCheck() {
for (ConfigData cd : configurations) {
try {
cd.getConfiguration().getProperty(PROP_RELOAD_CHECK);
} catch (Exception ex) {
;
}
}
}",0
849,"private CombinedNode constructCombinedNode() {
initSubHandlers();
if (getNumberOfConfigurations() < 1) {
return new CombinedNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
CombinedNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, getNodeHandler(), it.next().getTransformedRoot(), getNodeHandler());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node, getNodeHandler());
getLogger().debug(os.toString());
}
return node;
}
}",0
850,"@SuppressWarnings(""unchecked"")
@Override
public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2) {
T node1 = ((ConfigurationNodePointer<T>) pointer1).getConfigurationNode();
T node2 = ((ConfigurationNodePointer<T>) pointer2).getConfigurationNode();
for (T child : getNodeHandler().getChildren(getConfigurationNode())) {
if (child == node1) {
return -1;
} else if (child == node2) {
return 1;
}
}
return 0;
}",0
851,"@SuppressWarnings(""unchecked"")
@Override
public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2) {
T node1 = ((ConfigurationNodePointer<T>) pointer1).getConfigurationNode();
T node2 = ((ConfigurationNodePointer<T>) pointer2).getConfigurationNode();
for (T child : getNodeHandler().getChildren(getConfigurationNode())) {
if (child == node1) {
return -1;
} else if (child == node2) {
return 1;
}
}
return 0;
}",0
852,"private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File parent = file.getParentFile();
if (parent != null && !parent.exists()) {
parent.mkdirs();
}
}
}
}",0
853,private final String protocol;,0
854,"public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}",0
855,"public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}",0
856,"public void ReInit(java.io.InputStream stream, String encoding) {
try {
jj_input_stream.ReInit(stream, encoding, 1, 1);
} catch (java.io.UnsupportedEncodingException e) {
throw new RuntimeException(e);
}
token_source.ReInit(jj_input_stream);
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 5; i++) jj_la1[i] = -1;
}",0
857,"final public String String() throws ParseException {
Token token = null;
token = jj_consume_token(STRING);
{
if (true)
return StringEscapeUtils.unescapeJava(removeQuotes(token.image));
}
throw new Error(""Missing return statement in function"");
}",0
858,"public void ReInit(JSONParserTokenManager tm) {
token_source = tm;
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 5; i++) jj_la1[i] = -1;
}",0
859,"final public List Array() throws ParseException {
List list = new ArrayList();
Object element = null;
jj_consume_token(ARRAY_BEGIN);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_BEGIN:
case OBJECT_BEGIN:
case STRING:
case INTEGER:
case REAL:
case TRUE:
case FALSE:
case NULL:
element = Value();
list.add(element);
label_2: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case LIST_SEPARATOR:
;
break;
default:
jj_la1[3] = jj_gen;
break label_2;
}
jj_consume_token(LIST_SEPARATOR);
element = Value();
list.add(element);
}
break;
default:
jj_la1[4] = jj_gen;
;
}
jj_consume_token(ARRAY_END);
{
if (true)
return list;
}
throw new Error(""Missing return statement in function"");
}",0
860,"public void ReInit(SimpleCharStream stream, int lexState) {
ReInit(stream);
SwitchTo(lexState);
}",0
861,public java.io.PrintStream debugStream = System.out;,0
862,"public void SwitchTo(int lexState) {
if (lexState >= 1 || lexState < 0)
throw new TokenMgrError(""Error: Ignoring invalid lexical state : "" + lexState + "". State unchanged."", TokenMgrError.INVALID_LEXICAL_STATE);
else
curLexState = lexState;
}",0
863,"public char[] GetSuffix(int len) {
char[] ret = new char[len];
if ((bufpos + 1) >= len)
System.arraycopy(buffer, bufpos - len + 1, ret, 0, len);
else {
System.arraycopy(buffer, bufsize - (len - bufpos - 1), ret, 0, len - bufpos - 1);
System.arraycopy(buffer, 0, ret, len - bufpos - 1, bufpos + 1);
}
return ret;
}",0
864,"public void ReInit(java.io.InputStream dstream, String encoding, int startline, int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException {
ReInit(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
}",0
865,"public char BeginToken() throws java.io.IOException {
tokenBegin = -1;
char c = readChar();
tokenBegin = bufpos;
return c;
}",0
866,"public void ReInit(java.io.InputStream dstream, String encoding, int startline, int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException {
ReInit(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
}",0
867,"protected void UpdateLineColumn(char c) {
column++;
if (prevCharIsLF) {
prevCharIsLF = false;
line += (column = 1);
} else if (prevCharIsCR) {
prevCharIsCR = false;
if (c == '\n') {
prevCharIsLF = true;
} else
line += (column = 1);
}
switch(c) {
case '\r':
prevCharIsCR = true;
break;
case '\n':
prevCharIsLF = true;
break;
case '\t':
column--;
column += (tabSize - (column % tabSize));
break;
default:
break;
}
bufline[bufpos] = line;
bufcolumn[bufpos] = column;
}",0
868,"public void ReInit(java.io.Reader dstream, int startline, int startcolumn, int buffersize) {
inputStream = dstream;
line = startline;
column = startcolumn - 1;
if (buffer == null || buffersize != buffer.length) {
available = bufsize = buffersize;
buffer = new char[buffersize];
bufline = new int[buffersize];
bufcolumn = new int[buffersize];
}
prevCharIsLF = prevCharIsCR = false;
tokenBegin = inBuf = maxNextCharInd = 0;
bufpos = -1;
}",0
869,"public void ReInit(java.io.Reader dstream, int startline, int startcolumn) {
ReInit(dstream, startline, startcolumn, 4096);
}",0
870,"public void ReInit(java.io.InputStream dstream, String encoding, int startline, int startcolumn) throws java.io.UnsupportedEncodingException {
ReInit(dstream, encoding, startline, startcolumn, 4096);
}",0
871,"public void ReInit(java.io.InputStream dstream, String encoding) throws java.io.UnsupportedEncodingException {
ReInit(dstream, encoding, 1, 1, 4096);
}",0
872,"public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
}",0
873,"protected void ExpandBuff(boolean wrapAround) {
char[] newbuffer = new char[bufsize + 2048];
int[] newbufline = new int[bufsize + 2048];
int[] newbufcolumn = new int[bufsize + 2048];
try {
if (wrapAround) {
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
System.arraycopy(buffer, 0, newbuffer, bufsize - tokenBegin, bufpos);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos += (bufsize - tokenBegin));
} else {
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos -= tokenBegin);
}
} catch (Throwable t) {
throw new Error(t.getMessage());
}
bufsize += 2048;
available = bufsize;
tokenBegin = 0;
}",0
874,"public SimpleCharStream(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
this(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
}",0
875,"public SimpleCharStream(java.io.InputStream dstream, String encoding, int startline, int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException {
this(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
}",0
876,"public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
}",0
877,"protected void FillBuff() throws java.io.IOException {
if (maxNextCharInd == available) {
if (available == bufsize) {
if (tokenBegin > 2048) {
bufpos = maxNextCharInd = 0;
available = tokenBegin;
} else if (tokenBegin < 0)
bufpos = maxNextCharInd = 0;
else
ExpandBuff(false);
} else if (available > tokenBegin)
available = bufsize;
else if ((tokenBegin - available) < 2048)
ExpandBuff(true);
else
available = tokenBegin;
}
int i;
try {
if ((i = inputStream.read(buffer, maxNextCharInd, available - maxNextCharInd)) == -1) {
inputStream.close();
throw new java.io.IOException();
} else
maxNextCharInd += i;
return;
} catch (java.io.IOException e) {
--bufpos;
backup(0);
if (tokenBegin == -1)
tokenBegin = bufpos;
throw e;
}
}",0
878,public int endColumn;,0
879,"public static synchronized byte[] decodeBase64(String base64String) {
instance.put(null, base64String);
return instance.getByteArray(null, null);
}",0
880,"final public PropertyListConfiguration Dictionary() throws ParseException {
PropertyListConfiguration configuration = new PropertyListConfiguration();
List children = new ArrayList();
ConfigurationNode child = null;
jj_consume_token(DICT_BEGIN);
label_1: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case STRING:
case QUOTED_STRING:
;
break;
default:
jj_la1[0] = jj_gen;
break label_1;
}
child = Property();
if (child.getValue() instanceof AbstractHierarchicalConfiguration) {
AbstractHierarchicalConfiguration conf = (AbstractHierarchicalConfiguration) child.getValue();
ConfigurationNode root = (ConfigurationNode) conf.getRootNode();
root.setName(child.getName());
children.add(root);
} else {
children.add(child);
}
}
jj_consume_token(DICT_END);
for (int i = 0; i < children.size(); i++) {
child = (ConfigurationNode) children.get(i);
configuration.getRootNode().addChild(child);
}
{
if (true)
return configuration;
}
throw new Error(""Missing return statement in function"");
}",0
881,"private void jj_rescan_token() {
jj_rescan = true;
for (int i = 0; i < 1; i++) {
try {
JJCalls p = jj_2_rtns[i];
do {
if (p.gen > jj_gen) {
jj_la = p.arg;
jj_lastpos = jj_scanpos = p.first;
switch(i) {
case 0:
jj_3_1();
break;
}
}
p = p.next;
} while (p != null);
} catch (LookaheadSuccess ls) {
}
}
jj_rescan = false;
}",0
882,"final public ConfigurationNode Property() throws ParseException {
String key = null;
Object value = null;
ConfigurationNode node = new DefaultConfigurationNode();
key = String();
node.setName(key);
jj_consume_token(EQUAL);
value = Element();
node.setValue(value);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DICT_SEPARATOR:
jj_consume_token(DICT_SEPARATOR);
break;
default:
jj_la1[1] = jj_gen;
;
}
{
if (true)
return node;
}
throw new Error(""Missing return statement in function"");
}",0
883,"public void SwitchTo(int lexState) {
if (lexState >= 1 || lexState < 0) {
throw new TokenMgrError(""Error: Ignoring invalid lexical state : "" + lexState + "". State unchanged."", TokenMgrError.INVALID_LEXICAL_STATE);
} else {
curLexState = lexState;
}
}",0
884,public java.io.PrintStream debugStream = System.out;,0
885,"public void ReInit(SimpleCharStream stream) {
jjmatchedPos = jjnewStateCnt = 0;
curLexState = defaultLexState;
input_stream = stream;
ReInitRounds();
}",0
886,"public void ReInit(java.io.Reader dstream, int startline, int startcolumn) {
ReInit(dstream, startline, startcolumn, 4096);
}",0
887,"protected void UpdateLineColumn(char c) {
column++;
if (prevCharIsLF) {
prevCharIsLF = false;
line += (column = 1);
} else if (prevCharIsCR) {
prevCharIsCR = false;
if (c == '\n') {
prevCharIsLF = true;
} else
line += (column = 1);
}
switch(c) {
case '\r':
prevCharIsCR = true;
break;
case '\n':
prevCharIsLF = true;
break;
case '\t':
column--;
column += (tabSize - (column % tabSize));
break;
default:
break;
}
bufline[bufpos] = line;
bufcolumn[bufpos] = column;
}",0
888,"protected void FillBuff() throws java.io.IOException {
if (maxNextCharInd == available) {
if (available == bufsize) {
if (tokenBegin > 2048) {
bufpos = maxNextCharInd = 0;
available = tokenBegin;
} else if (tokenBegin < 0)
bufpos = maxNextCharInd = 0;
else
ExpandBuff(false);
} else if (available > tokenBegin)
available = bufsize;
else if ((tokenBegin - available) < 2048)
ExpandBuff(true);
else
available = tokenBegin;
}
int i;
try {
if ((i = inputStream.read(buffer, maxNextCharInd, available - maxNextCharInd)) == -1) {
inputStream.close();
throw new java.io.IOException();
} else
maxNextCharInd += i;
return;
} catch (java.io.IOException e) {
--bufpos;
backup(0);
if (tokenBegin == -1)
tokenBegin = bufpos;
throw e;
}
}",0
889,"public void ReInit(java.io.InputStream dstream, String encoding, int startline, int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException {
ReInit(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
}",0
890,"public char BeginToken() throws java.io.IOException {
tokenBegin = -1;
char c = readChar();
tokenBegin = bufpos;
return c;
}",0
891,"public SimpleCharStream(java.io.InputStream dstream, String encoding, int startline, int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException {
this(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
}",0
892,"public SimpleCharStream(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
this(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
}",0
893,"public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
}",0
894,"public void ReInit(java.io.Reader dstream) {
ReInit(dstream, 1, 1, 4096);
}",0
895,public int endColumn;,0
896,public int endLine;,0
897,"private String getName(File file) {
String name = configuration.getURL().toString();
if (name == null) {
if (file != null) {
name = file.getAbsolutePath();
} else {
name = ""base: "" + configuration.getBasePath() + ""file: "" + configuration.getFileName();
}
}
return name;
}",0
898,"public void init() {
if (configuration.getURL() == null && configuration.getFileName() == null) {
return;
}
if (this.configuration == null) {
throw new IllegalStateException(""No configuration has been set for this strategy"");
}
updateLastModified();
}",0
899,"public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog catalog = staticCatalog;
if (catalog == null || !getUseStaticCatalog()) {
try {
catalog = new Catalog();
catalog.setCatalogManager(this);
catalog.setupReaders();
catalog.loadSystemCatalogs();
} catch (Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = catalog;
}
}
return catalog;
}",0
900,"protected String normalizeURI(String uriref) {
StrSubstitutor substitutor = ((CatalogManager) catalogManager).getStrSubstitutor();
String resolved = substitutor != null ? substitutor.replace(uriref) : uriref;
return super.normalizeURI(resolved);
}",0
901,"public short getShort(String key, short defaultValue) {
return getShort(key, new Short(defaultValue)).shortValue();
}",0
902,"public void load(InputStream in, String encoding) throws ConfigurationException {
Reader reader = null;
if (encoding != null) {
try {
reader = new InputStreamReader(in, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (reader == null) {
reader = new InputStreamReader(in);
}
load(reader);
}",0
903,"public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writer = null;
if (encoding != null) {
try {
writer = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writer == null) {
writer = new OutputStreamWriter(out);
}
save(writer);
}",0
904,"private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}",0
905,private List<ConfigData> configurations;,0
906,private List<ConfigData> configurations;,0
907,"@Override
protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertyListConfiguration();
} else {
return new PropertyListConfiguration();
}
}",0
908,"static File constructFile(String basePath, String fileName) {
File file;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
StringBuilder fName = new StringBuilder();
fName.append(basePath);
if (!basePath.endsWith(File.separator)) {
fName.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
fName.append(fileName.substring(2));
} else {
fName.append(fileName);
}
file = new File(fName.toString());
}
return file;
}",0
909,protected Configuration configuration;,0
910,"public Object getProperty(String key) {
Object result = null;
StringBuilder query = new StringBuilder(""SELECT * FROM "");
query.append(table).append("" WHERE "");
query.append(keyColumn).append(""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
List<Object> results = new ArrayList<Object>();
while (rs.next()) {
Object value = rs.getObject(valueColumn);
if (isDelimiterParsingDisabled()) {
results.add(value);
} else {
Iterator<?> it = PropertyConverter.toIterator(value, getListDelimiter());
while (it.hasNext()) {
results.add(it.next());
}
}
}
if (!results.isEmpty()) {
result = (results.size() > 1) ? results : results.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return result;
}",0
911,"public boolean containsKey(String key) {
boolean found = false;
StringBuilder query = new StringBuilder(""SELECT * FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
found = rs.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return found;
}",0
912,"public Iterator<String> getKeys() {
Collection<String> keys = new ArrayList<String>();
StringBuilder query = new StringBuilder(""SELECT DISTINCT "" + keyColumn + "" FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return keys.iterator();
}",0
913,"@Override
public void clear() {
fireEvent(EVENT_CLEAR, null, null, true);
StringBuilder query = new StringBuilder(""DELETE FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_CLEAR, null, null, e);
} finally {
close(conn, pstmt);
}
fireEvent(EVENT_CLEAR, null, null, false);
}",0
914,"private Map<String, ConfigurationProvider> providers;",0
915,"@Override
protected Object createBeanInstance(Class<?> beanClass, BeanDeclaration data) throws Exception {
String fileName = ((ConfigurationDeclaration) data).getConfiguration().getString(ATTR_FILENAME);
if (fileName != null && fileName.toLowerCase().trim().endsWith(fileExtension)) {
return super.createBeanInstance(fetchMatchingClass(), data);
} else {
return super.createBeanInstance(fetchDefaultClass(), data);
}
}",0
916,"public String getPath(File file, URL url, String basePath, String fileName) {
String path = null;
if (file != null) {
path = file.getAbsolutePath();
}
if (path == null) {
if (url != null) {
path = url.getPath();
} else {
try {
path = getURL(basePath, fileName).getPath();
} catch (Exception e) {
;
}
}
}
return path;
}",0
917,private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());,0
918,"@Override
public void setRootNode(ConfigurationNode rootNode) {
if (configs != null) {
this.getCurrentConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}",0
919,private ConfigurationNode rootNode;,0
920,private final Object reloadLock;,0
921,"public Lock(String name) {
this.name = name;
synchronized (counterLock) {
instanceId = ++counter;
}
}",0
922,"public static Short toShort(Object value) throws ConversionException {
Number n = toNumber(value, Short.class);
if (n instanceof Short) {
return (Short) n;
} else {
return new Short(n.shortValue());
}
}",0
923,"public static Long toLong(Object value) throws ConversionException {
Number n = toNumber(value, Long.class);
if (n instanceof Long) {
return (Long) n;
} else {
return new Long(n.longValue());
}
}",0
924,"private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}",0
925,private final String protocol;,0
926,"private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}",0
927,"private FileSystemOptions getOptions(String scheme) {
FileSystemOptions opts = new FileSystemOptions();
FileSystemConfigBuilder builder;
try {
builder = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}",0
928,"private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}",0
929,private EntityResolver entityResolver = new DefaultEntityResolver();,0
930,private EntityResolver entityResolver = new DefaultEntityResolver();,0
931,private EntityResolver entityResolver = new DefaultEntityResolver();,0
932,"private XMLNode convertToXMLNode(ConfigurationNode node) {
if (node instanceof XMLNode) {
return (XMLNode) node;
}
XMLNode nd = (XMLNode) createNode(node.getName());
nd.setValue(node.getValue());
nd.setAttribute(node.isAttribute());
for (ConfigurationNode child : node.getChildren()) {
nd.addChild(convertToXMLNode(child));
}
for (ConfigurationNode attr : node.getAttributes()) {
nd.addAttribute(convertToXMLNode(attr));
}
return nd;
}",0
933,"@Override
public void save(Writer out) throws ConfigurationException {
PrintWriter writer = new PrintWriter(out);
String encoding = getEncoding() != null ? getEncoding() : DEFAULT_ENCODING;
writer.println(""<?xml version=\""1.0\"" encoding=\"""" + encoding + ""\""?>"");
writer.println(""<!DOCTYPE properties SYSTEM \""http://java.sun.com/dtd/properties.dtd\"">"");
writer.println(""<properties>"");
if (getHeader() != null) {
writer.println(""  <comment>"" + StringEscapeUtils.escapeXml(getHeader()) + ""</comment>"");
}
Iterator<String> keys = getKeys();
while (keys.hasNext()) {
String key = keys.next();
Object value = getProperty(key);
if (value instanceof List) {
writeProperty(writer, key, (List<?>) value);
} else {
writeProperty(writer, key, value);
}
}
writer.println(""</properties>"");
writer.flush();
}",0
934,"@Override
public void save(Writer out) throws ConfigurationException {
PrintWriter writer = new PrintWriter(out);
String encoding = getEncoding() != null ? getEncoding() : DEFAULT_ENCODING;
writer.println(""<?xml version=\""1.0\"" encoding=\"""" + encoding + ""\""?>"");
writer.println(""<!DOCTYPE properties SYSTEM \""http://java.sun.com/dtd/properties.dtd\"">"");
writer.println(""<properties>"");
if (getHeader() != null) {
writer.println(""  <comment>"" + StringEscapeUtils.escapeXml(getHeader()) + ""</comment>"");
}
Iterator<String> keys = getKeys();
while (keys.hasNext()) {
String key = keys.next();
Object value = getProperty(key);
if (value instanceof List) {
writeProperty(writer, key, (List<?>) value);
} else {
writeProperty(writer, key, value);
}
}
writer.println(""</properties>"");
writer.flush();
}",0
935,"@Override
public void load(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}",0
936,"private static Class<?> getDefaultClass(Object bean, String propName) {
try {
PropertyDescriptor desc = PropertyUtils.getPropertyDescriptor(bean, propName);
if (desc == null) {
return null;
}
return desc.getPropertyType();
} catch (Exception ex) {
return null;
}
}",0
937,"protected BeanDeclaration createBeanDeclaration(ConfigurationNode node) {
List<HierarchicalConfiguration> list = getConfiguration().configurationsAt(node.getName());
if (list.size() == 1) {
return new XMLBeanDeclaration((SubnodeConfiguration) list.get(0), node);
} else {
Iterator<HierarchicalConfiguration> iter = list.iterator();
while (iter.hasNext()) {
SubnodeConfiguration config = (SubnodeConfiguration) iter.next();
if (config.getRootNode().equals(node)) {
return new XMLBeanDeclaration(config, node);
}
}
throw new ConfigurationRuntimeException(""Unable to match node for "" + node.getName());
}
}",0
938,"public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}",0
939,"public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}",0
940,"private String getName(File file) {
String name = configuration.getURL().toString();
if (name == null) {
if (file != null) {
name = file.getAbsolutePath();
} else {
name = ""base: "" + configuration.getBasePath() + ""file: "" + configuration.getFileName();
}
}
return name;
}",0
941,"@Override
protected String normalizeURI(String uriref) {
StrSubstitutor substitutor = ((CatalogManager) catalogManager).getStrSubstitutor();
String resolved = substitutor != null ? substitutor.replace(uriref) : uriref;
return super.normalizeURI(resolved);
}",0
942,"@Override
public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog catalog = staticCatalog;
if (catalog == null || !getUseStaticCatalog()) {
try {
catalog = new Catalog();
catalog.setCatalogManager(this);
catalog.setupReaders();
catalog.loadSystemCatalogs();
} catch (Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = catalog;
}
}
return catalog;
}",0
943,"public boolean removeNode(ConfigurationNode node) {
if (nodes != null && node != null && nodes.contains(node)) {
detachNode(node);
nodes.remove(node);
List<ConfigurationNode> lst = namedNodes.get(node.getName());
if (lst != null) {
lst.remove(node);
if (lst.isEmpty()) {
namedNodes.remove(node.getName());
}
}
return true;
} else {
return false;
}
}",0
944,"public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer(subNodes.get(positionToIndex(getPosition())));
}",0
945,"public void reload() {
synchronized (reloadLock) {
if (noReload == 0) {
try {
enterNoReload();
if (strategy.reloadingRequired()) {
if (getLogger().isInfoEnabled()) {
getLogger().info(""Reloading configuration. URL is "" + getURL());
}
fireEvent(EVENT_RELOAD, null, getURL(), true);
setDetailEvents(false);
boolean autoSaveBak = this.isAutoSave();
this.setAutoSave(false);
try {
clear();
load();
} finally {
this.setAutoSave(autoSaveBak);
setDetailEvents(true);
}
fireEvent(EVENT_RELOAD, null, getURL(), false);
strategy.reloadingPerformed();
}
} catch (Exception e) {
fireError(EVENT_RELOAD, null, null, e);
} finally {
exitNoReload();
}
}
}
}",0
946,"public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writer = null;
if (encoding != null) {
try {
writer = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writer == null) {
writer = new OutputStreamWriter(out);
}
save(writer);
}",0
947,"private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File parent = file.getParentFile();
if (parent != null && !parent.exists()) {
parent.mkdirs();
}
}
}
}",0
948,private NodeCombiner nodeCombiner;,0
949,"protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertyListConfiguration();
} else {
return new PropertyListConfiguration();
}
}",0
950,"public static URL locate(String base, String name) {
if (log.isDebugEnabled()) {
StringBuffer buf = new StringBuffer();
buf.append(""ConfigurationUtils.locate(): base is "").append(base);
buf.append("", name is "").append(name);
log.debug(buf.toString());
}
if (name == null) {
return null;
}
URL url = null;
try {
if (base == null) {
url = new URL(name);
} else {
URL baseURL = new URL(base);
url = new URL(baseURL, name);
InputStream in = null;
try {
in = url.openStream();
} finally {
if (in != null) {
in.close();
}
}
}
log.debug(""Loading configuration from the URL "" + url);
} catch (IOException e) {
url = null;
}
if (url == null) {
File file = new File(name);
if (file.isAbsolute() && file.exists()) {
try {
url = toURL(file);
log.debug(""Loading configuration from the absolute path "" + name);
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
}
if (url == null) {
try {
File file = constructFile(base, name);
if (file != null && file.exists()) {
url = toURL(file);
}
if (url != null) {
log.debug(""Loading configuration from the path "" + file);
}
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
try {
File file = constructFile(System.getProperty(""user.home""), name);
if (file != null && file.exists()) {
url = toURL(file);
}
if (url != null) {
log.debug(""Loading configuration from the home path "" + file);
}
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
url = locateFromClasspath(name);
}
return url;
}",0
951,"public boolean containsKey(String key) {
boolean found = false;
StringBuffer query = new StringBuffer(""SELECT * FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
found = rs.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return found;
}",0
952,"public Object getProperty(String key) {
Object result = null;
StringBuffer query = new StringBuffer(""SELECT * FROM "");
query.append(table).append("" WHERE "");
query.append(keyColumn).append(""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
List results = new ArrayList();
while (rs.next()) {
Object value = rs.getObject(valueColumn);
if (isDelimiterParsingDisabled()) {
results.add(value);
} else {
CollectionUtils.addAll(results, PropertyConverter.toIterator(value, getListDelimiter()));
}
}
if (!results.isEmpty()) {
result = (results.size() > 1) ? results : results.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return result;
}",0
953,"protected void addPropertyDirect(String key, Object obj) {
StringBuffer query = new StringBuffer(""INSERT INTO "" + table);
if (nameColumn != null) {
query.append("" ("" + nameColumn + "", "" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?, ?)"");
} else {
query.append("" ("" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?)"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
int index = 1;
if (nameColumn != null) {
pstmt.setString(index++, name);
}
pstmt.setString(index++, key);
pstmt.setString(index++, String.valueOf(obj));
pstmt.executeUpdate();
} catch (SQLException e) {
fireError(EVENT_ADD_PROPERTY, key, obj, e);
} finally {
close(conn, pstmt);
}
}",0
954,"public boolean isEmpty() {
boolean empty = true;
StringBuffer query = new StringBuffer(""SELECT count(*) FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
if (rs.next()) {
empty = rs.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return empty;
}",0
955,"public Iterator getKeys() {
Collection keys = new ArrayList();
StringBuffer query = new StringBuffer(""SELECT DISTINCT "" + keyColumn + "" FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return keys.iterator();
}",0
956,"public boolean isEmpty() {
boolean empty = true;
StringBuffer query = new StringBuffer(""SELECT count(*) FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
if (rs.next()) {
empty = rs.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return empty;
}",0
957,"protected Object createBeanInstance(Class beanClass, BeanDeclaration data) throws Exception {
String fileName = ((ConfigurationDeclaration) data).getConfiguration().getString(ATTR_FILENAME);
if (fileName != null && fileName.toLowerCase().trim().endsWith(fileExtension)) {
return super.createBeanInstance(fetchMatchingClass(), data);
} else {
return super.createBeanInstance(fetchDefaultClass(), data);
}
}",0
958,private NodeCombiner nodeCombiner;,0
959,"public void setRootNode(ConfigurationNode rootNode) {
if (init) {
this.getConfiguration().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}",0
960,"public void setRootNode(ConfigurationNode rootNode) {
if (init) {
getConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}",0
961,"static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(new Class[] { String.class });
return ctor.newInstance(new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}",0
962,"public ConfigurationNode getRootNode() {
if (getSubnodeKey() != null) {
try {
List nodes = getParent().fetchNodeList(getSubnodeKey());
if (nodes.size() != 1) {
setSubnodeKey(null);
} else {
ConfigurationNode currentRoot = (ConfigurationNode) nodes.get(0);
if (currentRoot != super.getRootNode()) {
fireEvent(EVENT_SUBNODE_CHANGED, null, null, true);
setRootNode(currentRoot);
fireEvent(EVENT_SUBNODE_CHANGED, null, null, false);
}
return currentRoot;
}
} catch (Exception ex) {
setSubnodeKey(null);
}
}
return super.getRootNode();
}",0
963,"private XMLNode convertToXMLNode(ConfigurationNode node) {
if (node instanceof XMLNode) {
return (XMLNode) node;
}
XMLNode nd = (XMLNode) createNode(node.getName());
nd.setValue(node.getValue());
nd.setAttribute(node.isAttribute());
for (Iterator it = node.getChildren().iterator(); it.hasNext(); ) {
nd.addChild(convertToXMLNode((ConfigurationNode) it.next()));
}
for (Iterator it = node.getAttributes().iterator(); it.hasNext(); ) {
nd.addAttribute(convertToXMLNode((ConfigurationNode) it.next()));
}
return nd;
}",0
964,private DocumentBuilder documentBuilder;,0
965,"public void save(Writer out) throws ConfigurationException {
PrintWriter writer = new PrintWriter(out);
String encoding = getEncoding() != null ? getEncoding() : DEFAULT_ENCODING;
writer.println(""<?xml version=\""1.0\"" encoding=\"""" + encoding + ""\""?>"");
writer.println(""<!DOCTYPE properties SYSTEM \""http://java.sun.com/dtd/properties.dtd\"">"");
writer.println(""<properties>"");
if (getHeader() != null) {
writer.println(""  <comment>"" + StringEscapeUtils.escapeXml(getHeader()) + ""</comment>"");
}
Iterator keys = getKeys();
while (keys.hasNext()) {
String key = (String) keys.next();
Object value = getProperty(key);
if (value instanceof List) {
writeProperty(writer, key, (List) value);
} else {
writeProperty(writer, key, value);
}
}
writer.println(""</properties>"");
writer.flush();
}",0
966,public Token currentToken;,0
967,"public void ReInit(java.io.InputStream stream) {
jj_input_stream.ReInit(stream, 1, 1);
token_source.ReInit(jj_input_stream);
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 6; i++) jj_la1[i] = -1;
for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
}",0
968,"final public Object Element() throws ParseException {
Object value = null;
if (jj_2_1(2)) {
value = Array();
{
if (true)
return value;
}
} else {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DICT_BEGIN:
value = Dictionary();
{
if (true)
return value;
}
break;
case STRING:
case QUOTED_STRING:
value = String();
{
if (true)
return value;
}
break;
case DATA:
value = Data();
{
if (true)
return value;
}
break;
case DATE:
value = Date();
{
if (true)
return value;
}
break;
default:
jj_la1[2] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}
throw new Error(""Missing return statement in function"");
}",0
969,"public void ReInit(PropertyListParserTokenManager tm) {
token_source = tm;
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 6; i++) jj_la1[i] = -1;
for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
}",0
970,private boolean jj_semLA;,0
971,"private final int jjMoveNfa_0(int startState, int curPos) {
int[] nextStates;
int startsAt = 0;
jjnewStateCnt = 14;
int i = 1;
jjstateSet[0] = startState;
int j, kind = 0x7fffffff;
for (; ; ) {
if (++jjround == 0x7fffffff) {
ReInitRounds();
}
if (curChar < 64) {
long l = 1L << curChar;
MatchLoop: do {
switch(jjstateSet[--i]) {
case 15:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if ((0x7ff280100000000L & l) != 0L) {
jjCheckNAddTwoStates(4, 5);
} else if (curChar == 62) {
if (kind > 20) {
kind = 20;
}
}
break;
case 6:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if ((0x3ff000100002600L & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
} else if (curChar == 42) {
jjstateSet[jjnewStateCnt++] = 3;
} else if (curChar == 62) {
if (kind > 19) {
kind = 19;
}
}
break;
case 14:
if ((0xfffffffbffffffffL & l) != 0L) {
jjCheckNAddStates(0, 2);
} else if (curChar == 34) {
if (kind > 22) {
kind = 22;
}
}
break;
case 3:
case 8:
if ((0xd7ffecfaffffd9ffL & l) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 0:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
} else if (curChar == 34) {
jjCheckNAddStates(0, 2);
}
if (curChar == 60) {
jjstateSet[jjnewStateCnt++] = 6;
}
if (curChar == 60) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 1:
if ((0x3ff000100002600L & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 2:
if (curChar == 62 && kind > 19) {
kind = 19;
}
break;
case 4:
if ((0x7ff280100000000L & l) != 0L) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 5:
if (curChar == 62 && kind > 20) {
kind = 20;
}
break;
case 7:
if (curChar == 60) {
jjstateSet[jjnewStateCnt++] = 6;
}
break;
case 9:
case 11:
if (curChar == 34) {
jjCheckNAddStates(0, 2);
}
break;
case 10:
if ((0xfffffffbffffffffL & l) != 0L) {
jjCheckNAddStates(0, 2);
}
break;
case 13:
if (curChar == 34 && kind > 22) {
kind = 22;
}
break;
default:
break;
}
} while (i != startsAt);
} else if (curChar < 128) {
long l = 1L << (curChar & 077);
MatchLoop: do {
switch(jjstateSet[--i]) {
case 15:
if ((0xd7ffffffffffffffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if (curChar == 90) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 6:
if ((0xd7ffffffffffffffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if ((0x7e0000007eL & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 14:
jjCheckNAddStates(0, 2);
if (curChar == 92) {
jjstateSet[jjnewStateCnt++] = 11;
}
break;
case 3:
if ((0xd7ffffffffffffffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if (curChar == 68) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 0:
case 8:
if ((0xd7ffffffffffffffL & l) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 1:
if ((0x7e0000007eL & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 4:
if (curChar == 90) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 10:
jjCheckNAddStates(0, 2);
break;
case 12:
if (curChar == 92) {
jjstateSet[jjnewStateCnt++] = 11;
}
break;
default:
break;
}
} while (i != startsAt);
} else {
int i2 = (curChar & 0xff) >> 6;
long l2 = 1L << (curChar & 077);
MatchLoop: do {
switch(jjstateSet[--i]) {
case 15:
case 8:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 6:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 14:
case 10:
if ((jjbitVec0[i2] & l2) != 0L) {
jjCheckNAddStates(0, 2);
}
break;
case 3:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 0:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
default:
break;
}
} while (i != startsAt);
}
if (kind != 0x7fffffff) {
jjmatchedKind = kind;
jjmatchedPos = curPos;
kind = 0x7fffffff;
}
++curPos;
if ((i = jjnewStateCnt) == (startsAt = 14 - (jjnewStateCnt = startsAt))) {
return curPos;
}
try {
curChar = input_stream.readChar();
} catch (java.io.IOException e) {
return curPos;
}
}
}",0
972,"private final void jjAddStates(int start, int end) {
do {
jjstateSet[jjnewStateCnt++] = jjnextStates[start];
} while (start++ != end);
}",0
973,"public void ReInit(SimpleCharStream stream, int lexState) {
ReInit(stream);
SwitchTo(lexState);
}",0
974,"private final void ReInitRounds() {
int i;
jjround = 0x80000001;
for (i = 14; i-- > 0; ) {
jjrounds[i] = 0x80000000;
}
}",0
975,"private final void jjCheckNAddStates(int start) {
jjCheckNAdd(jjnextStates[start]);
jjCheckNAdd(jjnextStates[start + 1]);
}",0
976,"public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
}",0
977,"public char[] GetSuffix(int len) {
char[] ret = new char[len];
if ((bufpos + 1) >= len)
System.arraycopy(buffer, bufpos - len + 1, ret, 0, len);
else {
System.arraycopy(buffer, bufsize - (len - bufpos - 1), ret, 0, len - bufpos - 1);
System.arraycopy(buffer, 0, ret, len - bufpos - 1, bufpos + 1);
}
return ret;
}",0
978,"public void ReInit(java.io.InputStream dstream) {
ReInit(dstream, 1, 1, 4096);
}",0
979,"protected void ExpandBuff(boolean wrapAround) {
char[] newbuffer = new char[bufsize + 2048];
int[] newbufline = new int[bufsize + 2048];
int[] newbufcolumn = new int[bufsize + 2048];
try {
if (wrapAround) {
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
System.arraycopy(buffer, 0, newbuffer, bufsize - tokenBegin, bufpos);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos += (bufsize - tokenBegin));
} else {
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos -= tokenBegin);
}
} catch (Throwable t) {
throw new Error(t.getMessage());
}
bufsize += 2048;
available = bufsize;
tokenBegin = 0;
}",0
980,"protected void FillBuff() throws java.io.IOException {
if (maxNextCharInd == available) {
if (available == bufsize) {
if (tokenBegin > 2048) {
bufpos = maxNextCharInd = 0;
available = tokenBegin;
} else if (tokenBegin < 0)
bufpos = maxNextCharInd = 0;
else
ExpandBuff(false);
} else if (available > tokenBegin)
available = bufsize;
else if ((tokenBegin - available) < 2048)
ExpandBuff(true);
else
available = tokenBegin;
}
int i;
try {
if ((i = inputStream.read(buffer, maxNextCharInd, available - maxNextCharInd)) == -1) {
inputStream.close();
throw new java.io.IOException();
} else
maxNextCharInd += i;
return;
} catch (java.io.IOException e) {
--bufpos;
backup(0);
if (tokenBegin == -1)
tokenBegin = bufpos;
throw e;
}
}",0
981,"public int beginLine, beginColumn, endLine, endColumn;",0
982,"protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {
return (""Lexical error at line "" + errorLine + "", column "" + errorColumn + "".  Encountered: "" + (EOFSeen ? ""<EOF> "" : (""\"""" + addEscapes(String.valueOf(curChar)) + ""\"""") + "" ("" + (int) curChar + ""), "") + ""after : \"""" + addEscapes(errorAfter) + ""\"""");
}",0
983,"public void load(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler(getRoot());
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
984,"public List getSubNodes(String name) {
if (name == null) {
return getSubNodes();
}
List result;
if (nodes == null) {
result = null;
} else {
result = (List) namedNodes.get(name);
}
return (result == null) ? Collections.EMPTY_LIST : Collections.unmodifiableList(result);
}",0
985,"public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer((ConfigurationNode) subNodes.get(positionToIndex(getPosition())));
}",0
986,"protected int getMaxPosition() {
return reverse ? getStartOffset() + 1 : subNodes.size() - getStartOffset();
}",0
987,private ConfigurationNode node;,0
988,"@Override
public void visitBeforeChildren(final ImmutableNode node, final NodeHandler<ImmutableNode> handler) {
final ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
updateNode(node, refHandler);
insertNewChildNodes(node, refHandler);
}",0
989,"@Override
public void visitBeforeChildren(final ImmutableNode node, final NodeHandler<ImmutableNode> handler) {
final ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
updateNode(node, refHandler);
insertNewChildNodes(node, refHandler);
}",0
990,"private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
}
final Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
final ByteArrayOutputStream os = new ByteArrayOutputStream();
final PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}",0
991,"public static void dump(final ImmutableConfiguration configuration, final PrintStream out) {
dump(configuration, new PrintWriter(out));
}",0
992,"protected PreparedStatement createStatement(final String sql, final boolean nameCol) throws SQLException {
final String statement;
if (nameCol && configurationNameColumn != null) {
final StringBuilder buf = new StringBuilder(sql);
buf.append("" AND "").append(configurationNameColumn).append(""=?"");
statement = buf.toString();
} else {
statement = sql;
}
pstmt = getConnection().prepareStatement(statement);
return pstmt;
}",0
993,"@Override
public void read(final Reader in) throws ConfigurationException {
final SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
final SAXParser parser = factory.newSAXParser();
final XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver((publicId, systemId) -> new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd"")));
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (final Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}",0
994,"// [ERROR] Medium: Class org.apache.commons.configuration2.builder.ConfigurationBuilderResultCreatedEvent defines
private final ImmutableConfiguration configuration;",0
995,private ConfigurationSourceData sourceData;,0
996,"private ConfigurationBuilderEvent createEventWithChangedSource(final ConfigurationBuilderEvent event) {
if (ConfigurationBuilderResultCreatedEvent.RESULT_CREATED.equals(event.getEventType())) {
return new ConfigurationBuilderResultCreatedEvent(this, ConfigurationBuilderResultCreatedEvent.RESULT_CREATED, ((ConfigurationBuilderResultCreatedEvent) event).getConfiguration());
}
@SuppressWarnings(""unchecked"")
final EventType<? extends ConfigurationBuilderEvent> type = (EventType<? extends ConfigurationBuilderEvent>) event.getEventType();
return new ConfigurationBuilderEvent(this, type);
}",0
997,"@Override
public CombinedConfiguration getConfiguration() throws ConfigurationException {
final CombinedConfiguration result = super.getConfiguration();
reloadingController.resetReloadingState();
return result;
}",0
998,"public void setValue(final Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
final String val = (String) value;
final String name = StringUtils.removeStartIgnoreCase(val, CLASS);
final Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (final Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}",0
999,"private void setProperty(final FileSystemConfigBuilder builder, final FileSystemOptions options, final String key, final Object value) {
final String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
final Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
final Method method = builder.getClass().getMethod(methodName, paramTypes);
final Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (final Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}",0
1000,"private void setProperty(final FileSystemConfigBuilder builder, final FileSystemOptions options, final String key, final Object value) {
final String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
final Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
final Method method = builder.getClass().getMethod(methodName, paramTypes);
final Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (final Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}",0
1001,private final String protocol;,0
1002,"@Override
public void read(final Reader in) throws ConfigurationException {
final EntityResolver resolver = (publicId, systemId) -> new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
final XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
final SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
final SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (final Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
1003,"private static <T> T[] defensiveCopy(final T[] src) {
return src != null ? src.clone() : null;
}",0
1004,"protected Object resolveContainerStore(String key) {
Object value = getProperty(key);
if (value != null) {
if (value instanceof List) {
List list = (List) value;
value = list.isEmpty() ? null : list.get(0);
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
value = array.length == 0 ? null : array[0];
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
value = array.length == 0 ? null : array[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
value = array.length == 0 ? null : new Byte(array[0]);
} else if (value instanceof short[]) {
short[] array = (short[]) value;
value = array.length == 0 ? null : new Short(array[0]);
} else if (value instanceof int[]) {
int[] array = (int[]) value;
value = array.length == 0 ? null : new Integer(array[0]);
} else if (value instanceof long[]) {
long[] array = (long[]) value;
value = array.length == 0 ? null : new Long(array[0]);
} else if (value instanceof float[]) {
float[] array = (float[]) value;
value = array.length == 0 ? null : new Float(array[0]);
} else if (value instanceof double[]) {
double[] array = (double[]) value;
value = array.length == 0 ? null : new Double(array[0]);
}
}
return value;
}",0
1005,"public long getLong(String key, long defaultValue) {
return getLong(key, new Long(defaultValue)).longValue();
}",0
1006,"protected Object resolveContainerStore(String key) {
Object value = getProperty(key);
if (value != null) {
if (value instanceof List) {
List list = (List) value;
value = list.isEmpty() ? null : list.get(0);
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
value = array.length == 0 ? null : array[0];
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
value = array.length == 0 ? null : array[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
value = array.length == 0 ? null : new Byte(array[0]);
} else if (value instanceof short[]) {
short[] array = (short[]) value;
value = array.length == 0 ? null : new Short(array[0]);
} else if (value instanceof int[]) {
int[] array = (int[]) value;
value = array.length == 0 ? null : new Integer(array[0]);
} else if (value instanceof long[]) {
long[] array = (long[]) value;
value = array.length == 0 ? null : new Long(array[0]);
} else if (value instanceof float[]) {
float[] array = (float[]) value;
value = array.length == 0 ? null : new Float(array[0]);
} else if (value instanceof double[]) {
double[] array = (double[]) value;
value = array.length == 0 ? null : new Double(array[0]);
}
}
return value;
}",0
1007,"protected Object resolveContainerStore(String key) {
Object value = getProperty(key);
if (value != null) {
if (value instanceof List) {
List list = (List) value;
value = list.isEmpty() ? null : list.get(0);
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
value = array.length == 0 ? null : array[0];
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
value = array.length == 0 ? null : array[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
value = array.length == 0 ? null : new Byte(array[0]);
} else if (value instanceof short[]) {
short[] array = (short[]) value;
value = array.length == 0 ? null : new Short(array[0]);
} else if (value instanceof int[]) {
int[] array = (int[]) value;
value = array.length == 0 ? null : new Integer(array[0]);
} else if (value instanceof long[]) {
long[] array = (long[]) value;
value = array.length == 0 ? null : new Long(array[0]);
} else if (value instanceof float[]) {
float[] array = (float[]) value;
value = array.length == 0 ? null : new Float(array[0]);
} else if (value instanceof double[]) {
double[] array = (double[]) value;
value = array.length == 0 ? null : new Double(array[0]);
}
}
return value;
}",0
1008,"public byte getByte(String key, byte defaultValue) {
return getByte(key, new Byte(defaultValue)).byteValue();
}",0
1009,"protected Object resolveContainerStore(String key) {
Object value = getProperty(key);
if (value != null) {
if (value instanceof List) {
List list = (List) value;
value = list.isEmpty() ? null : list.get(0);
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
value = array.length == 0 ? null : array[0];
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
value = array.length == 0 ? null : array[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
value = array.length == 0 ? null : new Byte(array[0]);
} else if (value instanceof short[]) {
short[] array = (short[]) value;
value = array.length == 0 ? null : new Short(array[0]);
} else if (value instanceof int[]) {
int[] array = (int[]) value;
value = array.length == 0 ? null : new Integer(array[0]);
} else if (value instanceof long[]) {
long[] array = (long[]) value;
value = array.length == 0 ? null : new Long(array[0]);
} else if (value instanceof float[]) {
float[] array = (float[]) value;
value = array.length == 0 ? null : new Float(array[0]);
} else if (value instanceof double[]) {
double[] array = (double[]) value;
value = array.length == 0 ? null : new Double(array[0]);
}
}
return value;
}",0
1010,"protected Object resolveContainerStore(String key) {
Object value = getProperty(key);
if (value != null) {
if (value instanceof List) {
List list = (List) value;
value = list.isEmpty() ? null : list.get(0);
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
value = array.length == 0 ? null : array[0];
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
value = array.length == 0 ? null : array[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
value = array.length == 0 ? null : new Byte(array[0]);
} else if (value instanceof short[]) {
short[] array = (short[]) value;
value = array.length == 0 ? null : new Short(array[0]);
} else if (value instanceof int[]) {
int[] array = (int[]) value;
value = array.length == 0 ? null : new Integer(array[0]);
} else if (value instanceof long[]) {
long[] array = (long[]) value;
value = array.length == 0 ? null : new Long(array[0]);
} else if (value instanceof float[]) {
float[] array = (float[]) value;
value = array.length == 0 ? null : new Float(array[0]);
} else if (value instanceof double[]) {
double[] array = (double[]) value;
value = array.length == 0 ? null : new Double(array[0]);
}
}
return value;
}",0
1011,"public short getShort(String key, short defaultValue) {
return getShort(key, new Short(defaultValue)).shortValue();
}",0
1012,"private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File parent = file.getParentFile();
if (parent != null && !parent.exists()) {
parent.mkdirs();
}
}
}
}",0
1013,"public void load(InputStream in, String encoding) throws ConfigurationException {
Reader reader = null;
if (encoding != null) {
try {
reader = new InputStreamReader(in, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (reader == null) {
reader = new InputStreamReader(in);
}
load(reader);
}",0
1014,"public void reload() {
synchronized (reloadLock) {
if (noReload == 0) {
try {
enterNoReload();
if (strategy.reloadingRequired()) {
if (getLogger().isInfoEnabled()) {
getLogger().info(""Reloading configuration. URL is "" + getURL());
}
fireEvent(EVENT_RELOAD, null, getURL(), true);
setDetailEvents(false);
try {
clear();
load();
} finally {
setDetailEvents(true);
}
fireEvent(EVENT_RELOAD, null, getURL(), false);
strategy.reloadingPerformed();
}
} catch (Exception e) {
fireError(EVENT_RELOAD, null, null, e);
} finally {
exitNoReload();
}
}
}
}",0
1015,protected Configuration configuration;,0
1016,"public Iterator getKeys() {
Collection keys = new ArrayList();
StringBuffer query = new StringBuffer(""SELECT DISTINCT "" + keyColumn + "" FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
closeQuietly(conn, pstmt);
}
return keys.iterator();
}",0
1017,"public void clear() {
StringBuffer query = new StringBuffer(""DELETE FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
pstmt.executeUpdate();
} catch (SQLException e) {
fireError(EVENT_CLEAR, null, null, e);
} finally {
closeQuietly(conn, pstmt);
}
}",0
1018,"protected void addPropertyDirect(String key, Object obj) {
StringBuffer query = new StringBuffer(""INSERT INTO "" + table);
if (nameColumn != null) {
query.append("" ("" + nameColumn + "", "" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?, ?)"");
} else {
query.append("" ("" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?)"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
int index = 1;
if (nameColumn != null) {
pstmt.setString(index++, name);
}
pstmt.setString(index++, key);
pstmt.setString(index++, String.valueOf(obj));
pstmt.executeUpdate();
} catch (SQLException e) {
fireError(EVENT_ADD_PROPERTY, key, obj, e);
} finally {
closeQuietly(conn, pstmt);
}
}",0
1019,"public Object getProperty(String key) {
Object result = null;
StringBuffer query = new StringBuffer(""SELECT * FROM "");
query.append(table).append("" WHERE "");
query.append(keyColumn).append(""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
List results = new ArrayList();
while (rs.next()) {
Object val = rs.getObject(valueColumn);
if (isDelimiterParsingDisabled()) {
results.add(val);
} else {
CollectionUtils.addAll(results, PropertyConverter.toIterator(val, getListDelimiter()));
}
}
if (!results.isEmpty()) {
result = (results.size() > 1) ? results : results.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
closeQuietly(conn, pstmt);
}
return result;
}",0
1020,"public boolean containsKey(String key) {
boolean found = false;
StringBuffer query = new StringBuffer(""SELECT * FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
found = rs.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
closeQuietly(conn, pstmt);
}
return found;
}",0
1021,"public boolean containsKey(String key) {
boolean found = false;
StringBuffer query = new StringBuffer(""SELECT * FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
found = rs.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
closeQuietly(conn, pstmt);
}
return found;
}",0
1022,"protected Object createBeanInstance(Class beanClass, BeanDeclaration data) throws Exception {
String fileName = ((ConfigurationDeclaration) data).getConfiguration().getString(ATTR_FILENAME);
if (fileName != null && fileName.toLowerCase().trim().endsWith(fileExtension)) {
return super.createBeanInstance(fetchMatchingClass(), data);
} else {
return super.createBeanInstance(fetchDefaultClass(), data);
}
}",0
1023,private ExpressionEngine expressionEngine;,0
1024,private ExpressionEngine expressionEngine;,0
1025,"public void clearProperty(String key) {
fireEvent(EVENT_CLEAR_PROPERTY, key, null, true);
List nodes = fetchNodeList(key);
for (Iterator it = nodes.iterator(); it.hasNext(); ) {
clearNode((ConfigurationNode) it.next());
}
fireEvent(EVENT_CLEAR_PROPERTY, key, null, false);
}",0
1026,"private static String[] parseProperty(String line) {
String[] result = new String[2];
StringBuffer key = new StringBuffer();
StringBuffer value = new StringBuffer();
// state of the automaton:
int state = 0;
for (int pos = 0; pos < line.length(); pos++) {
char c = line.charAt(pos);
switch(state) {
case 0:
if (c == '\\') {
state = 1;
} else if (ArrayUtils.contains(WHITE_SPACE, c)) {
state = 2;
} else if (ArrayUtils.contains(SEPARATORS, c)) {
state = 3;
} else {
key.append(c);
}
break;
case 1:
if (ArrayUtils.contains(SEPARATORS, c) || ArrayUtils.contains(WHITE_SPACE, c)) {
key.append(c);
} else {
key.append('\\');
key.append(c);
}
state = 0;
break;
case 2:
if (ArrayUtils.contains(WHITE_SPACE, c)) {
state = 2;
} else if (ArrayUtils.contains(SEPARATORS, c)) {
state = 3;
} else {
value.append(c);
state = 3;
}
break;
case 3:
value.append(c);
break;
}
}
result[0] = key.toString().trim();
result[1] = value.toString().trim();
return result;
}",0
1027,"public static Integer toInteger(Object value) throws ConversionException {
Number n = toNumber(value, Integer.class);
if (n instanceof Integer) {
return (Integer) n;
} else {
return new Integer(n.intValue());
}
}",0
1028,"public static Byte toByte(Object value) throws ConversionException {
Number n = toNumber(value, Byte.class);
if (n instanceof Byte) {
return (Byte) n;
} else {
return new Byte(n.byteValue());
}
}",0
1029,"public static Long toLong(Object value) throws ConversionException {
Number n = toNumber(value, Long.class);
if (n instanceof Long) {
return (Long) n;
} else {
return new Long(n.longValue());
}
}",0
1030,private DocumentBuilder documentBuilder;,0
1031,"public void load(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}",0
1032,"public void load(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
1033,"public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List list = (List) value;
Iterator iterator = list.iterator();
while (iterator.hasNext()) {
getConfiguration().addProperty(name, iterator.next());
}
} else if (value instanceof int[]) {
int[] array = (int[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Integer(array[i]));
}
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(array[i]));
}
} else if (value instanceof char[]) {
char[] array = (char[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Character(array[i]));
}
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Byte(array[i]));
}
} else if (value instanceof short[]) {
short[] array = (short[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Short(array[i]));
}
} else if (value instanceof long[]) {
long[] array = (long[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Long(array[i]));
}
} else if (value instanceof float[]) {
float[] array = (float[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Float(array[i]));
}
} else if (value instanceof double[]) {
double[] array = (double[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Double(array[i]));
}
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, array[i]);
}
} else {
getConfiguration().setProperty(name, value);
}
}",0
1034,"public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List list = (List) value;
Iterator iterator = list.iterator();
while (iterator.hasNext()) {
getConfiguration().addProperty(name, iterator.next());
}
} else if (value instanceof int[]) {
int[] array = (int[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Integer(array[i]));
}
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(array[i]));
}
} else if (value instanceof char[]) {
char[] array = (char[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Character(array[i]));
}
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Byte(array[i]));
}
} else if (value instanceof short[]) {
short[] array = (short[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Short(array[i]));
}
} else if (value instanceof long[]) {
long[] array = (long[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Long(array[i]));
}
} else if (value instanceof float[]) {
float[] array = (float[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Float(array[i]));
}
} else if (value instanceof double[]) {
double[] array = (double[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Double(array[i]));
}
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, array[i]);
}
} else {
getConfiguration().setProperty(name, value);
}
}",0
1035,public Token currentToken;,0
1036,"final public Node Property() throws ParseException {
Node node = new Node();
String key = String();
node.setName(key);
jj_consume_token(EQUAL);
Object value = Element();
node.setValue(value);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DICT_SEPARATOR:
jj_consume_token(DICT_SEPARATOR);
break;
default:
jj_la1[1] = jj_gen;
;
}
return node;
}",0
1037,"final public Object Element() throws ParseException {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_BEGIN:
return Array();
case DICT_BEGIN:
return Dictionary();
case STRING:
case QUOTED_STRING:
return String();
case DATA:
return Data();
default:
jj_la1[2] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}",0
1038,public PrintStream debugStream = System.out;,0
1039,"protected void UpdateLineColumn(char c) {
column++;
if (prevCharIsLF) {
prevCharIsLF = false;
line += (column = 1);
} else if (prevCharIsCR) {
prevCharIsCR = false;
if (c == '\n') {
prevCharIsLF = true;
} else
line += (column = 1);
}
switch(c) {
case '\r':
prevCharIsCR = true;
break;
case '\n':
prevCharIsLF = true;
break;
case '\t':
column--;
column += (8 - (column & 07));
break;
default:
break;
}
bufline[bufpos] = line;
bufcolumn[bufpos] = column;
}",0
1040,"public SimpleCharStream(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
this(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
}",0
1041,"public char BeginToken() throws java.io.IOException {
tokenBegin = -1;
char c = readChar();
tokenBegin = bufpos;
return c;
}",0
1042,"public String GetImage() {
if (bufpos >= tokenBegin)
return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
else
return new String(buffer, tokenBegin, bufsize - tokenBegin) + new String(buffer, 0, bufpos + 1);
}",0
1043,"public int beginLine, beginColumn, endLine, endColumn;",0
1044,public Token specialToken;,0
1045,"public int beginLine, beginColumn, endLine, endColumn;",0
1046,"protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {
return (""Lexical error at line "" + errorLine + "", column "" + errorColumn + "".  Encountered: "" + (EOFSeen ? ""<EOF> "" : (""\"""" + addEscapes(String.valueOf(curChar)) + ""\"""") + "" ("" + (int) curChar + ""), "") + ""after : \"""" + addEscapes(errorAfter) + ""\"""");
}",0
1047,"public void addDateValue(String value) {
try {
addValue(format.parse(value));
} catch (ParseException e) {
;
}
}",0
1048,"private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof Date) {
out.println(padding + ""<date>"" + PListNode.format.format((Date) value) + ""</date>"");
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(padding + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(padding + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(padding + ""<true/>"");
} else {
out.println(padding + ""<false/>"");
}
} else if (value instanceof List) {
out.println(padding + ""<array>"");
Iterator it = ((List) value).iterator();
while (it.hasNext()) {
printValue(out, indentLevel + 1, it.next());
}
out.println(padding + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRoot());
} else if (value instanceof Configuration) {
out.println(padding + ""<dict>"");
Configuration config = (Configuration) value;
Iterator it = config.getKeys();
while (it.hasNext()) {
String key = (String) it.next();
Node node = new Node(key);
node.setValue(config.getProperty(key));
printNode(out, indentLevel + 1, node);
if (it.hasNext()) {
out.println();
}
}
out.println(padding + ""</dict>"");
} else if (value instanceof Map) {
Map map = (Map) value;
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
String base64 = new String(Base64.encodeBase64((byte[]) value));
out.println(padding + ""<data>"" + StringEscapeUtils.escapeXml(base64) + ""</data>"");
} else {
out.println(padding + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
}
}",0
1049,"public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}",0
1050,"public void addIntegerValue(String value) {
addValue(new Integer(value));
}",0
1051,"public void load(Reader in) throws ConfigurationException {
Digester digester = new Digester();
digester.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
});
digester.setValidating(true);
digester.addRule(""*/key"", new ObjectCreateRule(PListNode.class) {
public void end() throws Exception {
}
});
digester.addCallMethod(""*/key"", ""setName"", 0);
digester.addRule(""*/dict/string"", new SetNextAndPopRule(""addChild""));
digester.addRule(""*/dict/data"", new SetNextAndPopRule(""addChild""));
digester.addRule(""*/dict/integer"", new SetNextAndPopRule(""addChild""));
digester.addRule(""*/dict/real"", new SetNextAndPopRule(""addChild""));
digester.addRule(""*/dict/true"", new SetNextAndPopRule(""addChild""));
digester.addRule(""*/dict/false"", new SetNextAndPopRule(""addChild""));
digester.addRule(""*/dict/date"", new SetNextAndPopRule(""addChild""));
digester.addRule(""*/dict/dict"", new SetNextAndPopRule(""addChild""));
digester.addCallMethod(""*/dict/string"", ""addValue"", 0);
digester.addCallMethod(""*/dict/data"", ""addDataValue"", 0);
digester.addCallMethod(""*/dict/integer"", ""addIntegerValue"", 0);
digester.addCallMethod(""*/dict/real"", ""addRealValue"", 0);
digester.addCallMethod(""*/dict/true"", ""addTrueValue"");
digester.addCallMethod(""*/dict/false"", ""addFalseValue"");
digester.addCallMethod(""*/dict/date"", ""addDateValue"", 0);
digester.addRule(""*/dict/array"", new SetNextAndPopRule(""addChild""));
digester.addRule(""*/dict/array"", new ObjectCreateRule(ArrayNode.class));
digester.addSetNext(""*/dict/array"", ""addList"");
digester.addRule(""*/array/array"", new ObjectCreateRule(ArrayNode.class));
digester.addSetNext(""*/array/array"", ""addList"");
digester.addCallMethod(""*/array/string"", ""addValue"", 0);
digester.addCallMethod(""*/array/data"", ""addDataValue"", 0);
digester.addCallMethod(""*/array/integer"", ""addIntegerValue"", 0);
digester.addCallMethod(""*/array/real"", ""addRealValue"", 0);
digester.addCallMethod(""*/array/true"", ""addTrueValue"");
digester.addCallMethod(""*/array/false"", ""addFalseValue"");
digester.addCallMethod(""*/array/date"", ""addDateValue"", 0);
digester.addFactoryCreate(""*/array/dict"", new AbstractObjectCreationFactory() {
public Object createObject(Attributes attributes) throws Exception {
XMLPropertyListConfiguration config = new XMLPropertyListConfiguration();
ArrayNode node = (ArrayNode) getDigester().peek();
node.addValue(config);
return config.getRoot();
}
});
digester.push(getRoot());
try {
digester.parse(in);
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
1052,"protected int getMaxPosition() {
return reverse ? getStartOffset() + 1 : subNodes.size() - getStartOffset();
}",0
1053,private ConfigurationNode node;,0
1054,"@Override
public void visitBeforeChildren(ImmutableNode node, NodeHandler<ImmutableNode> handler) {
ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
updateNode(node, refHandler);
insertNewChildNodes(node, refHandler);
}",0
1055,"private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}",0
1056,"private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}",0
1057,"public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}",0
1058,"protected PreparedStatement createStatement(String sql, boolean nameCol) throws SQLException {
String statement;
if (nameCol && configurationNameColumn != null) {
StringBuilder buf = new StringBuilder(sql);
buf.append("" AND "").append(configurationNameColumn).append(""=?"");
statement = buf.toString();
} else {
statement = sql;
}
pstmt = getConnection().prepareStatement(statement);
return pstmt;
}",0
1059,"public void save(Document document, Node parent) {
Element properties = document.createElement(""properties"");
parent.appendChild(properties);
if (getHeader() != null) {
Element comment = document.createElement(""comment"");
properties.appendChild(comment);
comment.setTextContent(StringEscapeUtils.escapeXml(getHeader()));
}
Iterator<String> keys = getKeys();
while (keys.hasNext()) {
String key = keys.next();
Object value = getProperty(key);
if (value instanceof List) {
writeProperty(document, properties, key, (List<?>) value);
} else {
writeProperty(document, properties, key, value);
}
}
}",0
1060,private final Configuration configuration;,0
1061,private AutoSaveListener autoSaveListener;,0
1062,private ConfigurationSourceData sourceData;,0
1063,"private ConfigurationBuilderEvent createEventWithChangedSource(ConfigurationBuilderEvent event) {
if (ConfigurationBuilderResultCreatedEvent.RESULT_CREATED.equals(event.getEventType())) {
return new ConfigurationBuilderResultCreatedEvent(this, ConfigurationBuilderResultCreatedEvent.RESULT_CREATED, ((ConfigurationBuilderResultCreatedEvent) event).getConfiguration());
}
@SuppressWarnings(""unchecked"")
EventType<? extends ConfigurationBuilderEvent> type = (EventType<? extends ConfigurationBuilderEvent>) event.getEventType();
return new ConfigurationBuilderEvent(this, type);
}",0
1064,"public static Float toFloat(Object value) throws ConversionException {
Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
} else {
return new Float(n.floatValue());
}
}",0
1065,"public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}",0
1066,"public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}",0
1067,"private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}",0
1068,private final String protocol;,0
1069,"@Override
public void read(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
1070,"@Override
public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog catalog = staticCatalog;
if (catalog == null || !getUseStaticCatalog()) {
try {
catalog = new Catalog();
catalog.setCatalogManager(this);
catalog.setupReaders();
catalog.loadSystemCatalogs();
} catch (Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = catalog;
}
}
return catalog;
}",0
1071,"@Override
protected String normalizeURI(String uriref) {
ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
String resolved = (ci != null) ? String.valueOf(ci.interpolate(uriref)) : uriref;
return super.normalizeURI(resolved);
}",0
1072,"@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}",0
1073,"@Override
@SuppressWarnings(""unchecked"")
public NodePointer createNodePointer(NodePointer parent, QName name, Object bean) {
if (bean instanceof NodeWrapper) {
NodeWrapper<?> wrapper = (NodeWrapper<?>) bean;
return new ConfigurationNodePointer((ConfigurationNodePointer) parent, wrapper.getNode(), wrapper.getNodeHandler());
}
return null;
}",0
1074,private ExpressionEngine conversionExpressionEngine;,0
1075,"private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}",0
1076,"private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}",0
1077,"public List<String> getConfigurationNameList() {
beginRead(true);
try {
List<String> list = new ArrayList<String>(getNumberOfConfigurationsInternal());
for (ConfigData cd : configurations) {
list.add(cd.getName());
}
return list;
} finally {
endRead();
}
}",0
1078,"public static Synchronizer cloneSynchronizer(Synchronizer sync) {
if (sync == null) {
throw new IllegalArgumentException(""Synchronizer must not be null!"");
}
if (NoOpSynchronizer.INSTANCE == sync) {
return sync;
}
try {
return sync.getClass().newInstance();
} catch (Exception ex) {
LOG.info(""Cannot create new instance of "" + sync.getClass());
}
try {
return (Synchronizer) clone(sync);
} catch (CloneNotSupportedException cnex) {
throw new ConfigurationRuntimeException(""Cannot clone Synchronizer "" + sync);
}
}",0
1079,"public static URL locate(FileSystem fileSystem, String base, String name) {
if (LOG.isDebugEnabled()) {
StringBuilder buf = new StringBuilder();
buf.append(""ConfigurationUtils.locate(): base is "").append(base);
buf.append("", name is "").append(name);
LOG.debug(buf.toString());
}
if (name == null) {
return null;
}
URL url = fileSystem.locateFromURL(base, name);
if (url == null) {
File file = new File(name);
if (file.isAbsolute() && file.exists()) {
try {
url = toURL(file);
LOG.debug(""Loading configuration from the absolute path "" + name);
} catch (MalformedURLException e) {
LOG.warn(""Could not obtain URL from file"", e);
}
}
}
if (url == null) {
try {
File file = constructFile(base, name);
if (file != null && file.exists()) {
url = toURL(file);
}
if (url != null) {
LOG.debug(""Loading configuration from the path "" + file);
}
} catch (MalformedURLException e) {
LOG.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
try {
File file = constructFile(System.getProperty(""user.home""), name);
if (file != null && file.exists()) {
url = toURL(file);
}
if (url != null) {
LOG.debug(""Loading configuration from the home path "" + file);
}
} catch (MalformedURLException e) {
LOG.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
url = locateFromClasspath(name);
}
return url;
}",0
1080,private final ConversionHandler dataConversionHandler;,0
1081,private ResultSet resultSet;,0
1082,"protected PreparedStatement createStatement(String sql, boolean nameCol) throws SQLException {
String statement;
if (nameCol && configurationNameColumn != null) {
StringBuilder buf = new StringBuilder(sql);
buf.append("" AND "").append(configurationNameColumn).append(""=?"");
statement = buf.toString();
} else {
statement = sql;
}
pstmt = getConnection().prepareStatement(statement);
return pstmt;
}",0
1083,private NodeCombiner nodeCombiner;,0
1084,"@Override
protected boolean isEmptyInternal() {
return getConfig().isEmpty();
}",0
1085,"public void configurationChanged(ConfigurationEvent event) {
if (!event.isBeforeUpdate()) {
switch(event.getType()) {
case AbstractConfiguration.EVENT_ADD_PROPERTY:
boolean contained = layoutData.containsKey(event.getPropertyName());
PropertyLayoutData data = fetchLayoutData(event.getPropertyName());
data.setSingleLine(!contained);
break;
case AbstractConfiguration.EVENT_CLEAR_PROPERTY:
layoutData.remove(event.getPropertyName());
break;
case AbstractConfiguration.EVENT_CLEAR:
clear();
break;
case AbstractConfiguration.EVENT_SET_PROPERTY:
fetchLayoutData(event.getPropertyName());
break;
}
}
}",0
1086,"void validateRootNode() {
if (subnodeKey != null) {
try {
List<ConfigurationNode> nodes = getParent().fetchNodeList(subnodeKey);
if (nodes.size() != 1) {
subnodeKey = null;
} else {
ConfigurationNode currentRoot = nodes.get(0);
if (currentRoot != super.getRootNode()) {
fireEvent(EVENT_SUBNODE_CHANGED, null, null, true);
setRootNode(currentRoot);
fireEvent(EVENT_SUBNODE_CHANGED, null, null, false);
}
}
} catch (Exception ex) {
subnodeKey = null;
}
}
}",0
1087,"private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}",0
1088,private final String protocol;,0
1089,private EntityResolver entityResolver = new DefaultEntityResolver();,0
1090,private EntityResolver entityResolver = new DefaultEntityResolver();,0
1091,"public void read(InputStream in) throws ConfigurationException, IOException {
load(new InputSource(in));
}",0
1092,"private void writeProperty(PrintWriter out, String key, List<?> values) {
for (Object value : values) {
writeProperty(out, key, value);
}
}",0
1093,"private static Class<?> getDefaultClass(Object bean, String propName) {
try {
PropertyDescriptor desc = PropertyUtils.getPropertyDescriptor(bean, propName);
if (desc == null) {
return null;
}
return desc.getPropertyType();
} catch (Exception ex) {
return null;
}
}",0
1094,private ReloadingController reloadingController;,0
1095,"static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(new Class[] { String.class });
return ctor.newInstance(new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}",0
1096,"public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}",0
1097,"public void read(Reader in) throws ConfigurationException {
if (!(getRootNode() instanceof PListNode)) {
initRoot();
}
EntityResolver resolver = new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler(getRootNode());
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
1098,"public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}",0
1099,"public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}",0
1100,"private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof Date) {
synchronized (PListNode.FORMAT) {
out.println(padding + ""<date>"" + PListNode.FORMAT.format((Date) value) + ""</date>"");
}
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(padding + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(padding + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(padding + ""<true/>"");
} else {
out.println(padding + ""<false/>"");
}
} else if (value instanceof List) {
out.println(padding + ""<array>"");
Iterator<?> it = ((List<?>) value).iterator();
while (it.hasNext()) {
printValue(out, indentLevel + 1, it.next());
}
out.println(padding + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRootNode());
} else if (value instanceof Configuration) {
out.println(padding + ""<dict>"");
Configuration config = (Configuration) value;
Iterator<String> it = config.getKeys();
while (it.hasNext()) {
String key = it.next();
ConfigurationNode node = new DefaultConfigurationNode(key);
node.setValue(config.getProperty(key));
printNode(out, indentLevel + 1, node);
if (it.hasNext()) {
out.println();
}
}
out.println(padding + ""</dict>"");
} else if (value instanceof Map) {
Map<String, Object> map = transformMap((Map<?, ?>) value);
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
String base64 = new String(Base64.encodeBase64((byte[]) value));
out.println(padding + ""<data>"" + StringEscapeUtils.escapeXml(base64) + ""</data>"");
} else if (value != null) {
out.println(padding + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
} else {
out.println(padding + ""<string/>"");
}
}",0
1101,"@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = ConfigurationUtils.locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}",0
1102,"@Override
protected String normalizeURI(String uriref) {
ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
String resolved = (ci != null) ? String.valueOf(ci.interpolate(uriref)) : uriref;
return super.normalizeURI(resolved);
}",0
1103,"public List<ConfigurationNode> getSubNodes(String name) {
if (name == null) {
return getSubNodes();
}
List<ConfigurationNode> result;
if (nodes == null) {
result = null;
} else {
result = namedNodes.get(name);
}
if (result == null) {
return Collections.emptyList();
} else {
return Collections.unmodifiableList(result);
}
}",0
1104,"public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer(subNodes.get(positionToIndex(getPosition())));
}",0
1105,"protected int getMaxPosition() {
return reverse ? getStartOffset() + 1 : subNodes.size() - getStartOffset();
}",0
1106,private ConfigurationNode node;,0
1107,"@Override
public void visitBeforeChildren(ImmutableNode node, NodeHandler<ImmutableNode> handler) {
ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
updateNode(node, refHandler);
insertNewChildNodes(node, refHandler);
}",0
1108,"@Override
public void visitBeforeChildren(ImmutableNode node, NodeHandler<ImmutableNode> handler) {
ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
updateNode(node, refHandler);
insertNewChildNodes(node, refHandler);
}",0
1109,"private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}",0
1110,"private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}",0
1111,"private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}",0
1112,"public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}",0
1113,"public static Synchronizer cloneSynchronizer(Synchronizer sync) {
if (sync == null) {
throw new IllegalArgumentException(""Synchronizer must not be null!"");
}
if (NoOpSynchronizer.INSTANCE == sync) {
return sync;
}
try {
return sync.getClass().newInstance();
} catch (Exception ex) {
LOG.info(""Cannot create new instance of "" + sync.getClass());
}
try {
return (Synchronizer) clone(sync);
} catch (CloneNotSupportedException cnex) {
throw new ConfigurationRuntimeException(""Cannot clone Synchronizer "" + sync);
}
}",0
1114,"@Override
public void read(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}",0
1115,private final ImmutableConfiguration configuration;,0
1116,private AutoSaveListener autoSaveListener;,0
1117,private ConfigurationSourceData sourceData;,0
1118,"private ConfigurationBuilderEvent createEventWithChangedSource(ConfigurationBuilderEvent event) {
if (ConfigurationBuilderResultCreatedEvent.RESULT_CREATED.equals(event.getEventType())) {
return new ConfigurationBuilderResultCreatedEvent(this, ConfigurationBuilderResultCreatedEvent.RESULT_CREATED, ((ConfigurationBuilderResultCreatedEvent) event).getConfiguration());
}
@SuppressWarnings(""unchecked"")
EventType<? extends ConfigurationBuilderEvent> type = (EventType<? extends ConfigurationBuilderEvent>) event.getEventType();
return new ConfigurationBuilderEvent(this, type);
}",0
1119,"private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}",0
1120,"@Override
public void read(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
1121,"@Override
public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog catalog = staticCatalog;
if (catalog == null || !getUseStaticCatalog()) {
try {
catalog = new Catalog();
catalog.setCatalogManager(this);
catalog.setupReaders();
catalog.loadSystemCatalogs();
} catch (Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = catalog;
}
}
return catalog;
}",0
1122,"@Override
protected String normalizeURI(String uriref) {
ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
String resolved = (ci != null) ? String.valueOf(ci.interpolate(uriref)) : uriref;
return super.normalizeURI(resolved);
}",0
1123,private final QueryResult<T> attributeResult;,0
1124,"@Override
@SuppressWarnings(""unchecked"")
public NodePointer createNodePointer(NodePointer parent, QName name, Object bean) {
if (bean instanceof NodeWrapper) {
NodeWrapper<?> wrapper = (NodeWrapper<?>) bean;
return new ConfigurationNodePointer((ConfigurationNodePointer) parent, wrapper.getNode(), wrapper.getNodeHandler());
}
return null;
}",0
1125,"private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}",0
1126,"public static Synchronizer cloneSynchronizer(Synchronizer sync) {
if (sync == null) {
throw new IllegalArgumentException(""Synchronizer must not be null!"");
}
if (NoOpSynchronizer.INSTANCE == sync) {
return sync;
}
try {
return sync.getClass().newInstance();
} catch (Exception ex) {
LOG.info(""Cannot create new instance of "" + sync.getClass());
}
try {
return (Synchronizer) clone(sync);
} catch (CloneNotSupportedException cnex) {
throw new ConfigurationRuntimeException(""Cannot clone Synchronizer "" + sync);
}
}",0
1127,"public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}",0
1128,"@Override
protected Boolean performOperation() throws SQLException {
PreparedStatement pstmt = initStatement(String.format(SQL_GET_PROPERTY, table, keyColumn), true, key);
ResultSet rs = pstmt.executeQuery();
return rs.next();
}",0
1129,"@Override
public void read(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}",0
1130,private AutoSaveListener autoSaveListener;,0
1131,private ConfigurationSourceData sourceData;,0
1132,private ReloadingController reloadingController;,0
1133,"public static Double toDouble(Object value) throws ConversionException {
Number n = toNumber(value, Double.class);
if (n instanceof Double) {
return (Double) n;
} else {
return new Double(n.doubleValue());
}
}",0
1134,"static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(new Class[] { String.class });
return ctor.newInstance(new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}",0
1135,"public static Byte toByte(Object value) throws ConversionException {
Number n = toNumber(value, Byte.class);
if (n instanceof Byte) {
return (Byte) n;
} else {
return new Byte(n.byteValue());
}
}",0
1136,"public static Float toFloat(Object value) throws ConversionException {
Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
} else {
return new Float(n.floatValue());
}
}",0
1137,private final EventType<? extends Event> eventType;,0
1138,"private FileSystemOptions getOptions(String scheme) {
FileSystemOptions opts = new FileSystemOptions();
FileSystemConfigBuilder builder;
try {
builder = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}",0
1139,"public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}",0
1140,"@Override
public void read(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
1141,"private PListNodeBuilder peek() {
if (!stack.isEmpty()) {
return stack.get(stack.size() - 1);
} else {
return null;
}
}",0
1142,"@Override
protected String normalizeURI(String uriref) {
ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
String resolved = (ci != null) ? String.valueOf(ci.interpolate(uriref)) : uriref;
return super.normalizeURI(resolved);
}",0
1143,"@Override
public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog catalog = staticCatalog;
if (catalog == null || !getUseStaticCatalog()) {
try {
catalog = new Catalog();
catalog.setCatalogManager(this);
catalog.setupReaders();
catalog.loadSystemCatalogs();
} catch (Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = catalog;
}
}
return catalog;
}",0
1144,"@Override
@SuppressWarnings(""unchecked"")
public NodePointer createNodePointer(NodePointer parent, QName name, Object bean) {
if (bean instanceof NodeWrapper) {
NodeWrapper<?> wrapper = (NodeWrapper<?>) bean;
return new ConfigurationNodePointer((ConfigurationNodePointer) parent, wrapper.getNode(), wrapper.getNodeHandler());
}
return null;
}",0
1145,"private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
}
final Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
final ByteArrayOutputStream os = new ByteArrayOutputStream();
final PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}",0
1146,"public static Synchronizer cloneSynchronizer(final Synchronizer sync) {
if (sync == null) {
throw new IllegalArgumentException(""Synchronizer must not be null!"");
}
if (NoOpSynchronizer.INSTANCE == sync) {
return sync;
}
try {
return sync.getClass().newInstance();
} catch (final Exception ex) {
LOG.info(""Cannot create new instance of "" + sync.getClass());
}
try {
return (Synchronizer) clone(sync);
} catch (final CloneNotSupportedException cnex) {
throw new ConfigurationRuntimeException(""Cannot clone Synchronizer "" + sync);
}
}",0
1147,"public static void dump(final ImmutableConfiguration configuration, final PrintStream out) {
dump(configuration, new PrintWriter(out));
}",0
1148,"protected PreparedStatement createStatement(final String sql, final boolean nameCol) throws SQLException {
final String statement;
if (nameCol && configurationNameColumn != null) {
final StringBuilder buf = new StringBuilder(sql);
buf.append("" AND "").append(configurationNameColumn).append(""=?"");
statement = buf.toString();
} else {
statement = sql;
}
pstmt = getConnection().prepareStatement(statement);
return pstmt;
}",0
1149,"@Override
public void read(final Reader in) throws ConfigurationException {
final SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
final SAXParser parser = factory.newSAXParser();
final XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver((publicId, systemId) -> new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd"")));
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (final Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}",0
1150,"private static Class<?> getDefaultClass(final Object bean, final String propName) {
try {
final PropertyDescriptor desc = BEAN_UTILS_BEAN.getPropertyUtils().getPropertyDescriptor(bean, propName);
if (desc == null) {
return null;
}
return desc.getPropertyType();
} catch (final Exception ex) {
return null;
}
}",0
1151,private final ImmutableConfiguration configuration;,0
1152,private AutoSaveListener autoSaveListener;,0
1153,private ConfigurationSourceData sourceData;,0
1154,"@Override
public CombinedConfiguration getConfiguration() throws ConfigurationException {
final CombinedConfiguration result = super.getConfiguration();
reloadingController.resetReloadingState();
return result;
}",0
1155,"static Object toInternetAddress(final Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
}
if (!(value instanceof String)) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
try {
final Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(String.class);
return ctor.newInstance(value);
} catch (final Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
}",0
1156,"private String sourceURLAsString() {
return sourceURL != null ? sourceURL.toExternalForm() : StringUtils.EMPTY;
}",0
1157,"private FileSystemOptions getOptions(final String scheme) {
if (scheme == null) {
return null;
}
final FileSystemOptions opts = new FileSystemOptions();
final FileSystemConfigBuilder builder;
try {
builder = getManager().getFileSystemConfigBuilder(scheme);
} catch (final Exception ex) {
return null;
}
final FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
final Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (final Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (final Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}",0
1158,"private void setProperty(final FileSystemConfigBuilder builder, final FileSystemOptions options, final String key, final Object value) {
final String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
final Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
final Method method = builder.getClass().getMethod(methodName, paramTypes);
final Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (final Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}",0
1159,"private void setProperty(final FileSystemConfigBuilder builder, final FileSystemOptions options, final String key, final Object value) {
final String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
final Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
final Method method = builder.getClass().getMethod(methodName, paramTypes);
final Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (final Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}",0
1160,private final String protocol;,0
1161,"@Override
public void read(final Reader in) throws ConfigurationException {
final EntityResolver resolver = (publicId, systemId) -> new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
final XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
final SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
final SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (final Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
1162,"@Override
protected String normalizeURI(final String uriref) {
final ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
final String resolved = ci != null ? String.valueOf(ci.interpolate(uriref)) : uriref;
return super.normalizeURI(resolved);
}",0
1163,"@Override
@SuppressWarnings(""unchecked"")
public NodePointer createNodePointer(final NodePointer parent, final QName name, final Object bean) {
if (bean instanceof NodeWrapper) {
final NodeWrapper<?> wrapper = (NodeWrapper<?>) bean;
return new ConfigurationNodePointer((ConfigurationNodePointer) parent, wrapper.getNode(), wrapper.getNodeHandler());
}
return null;
}",0
1164,private ConfigurationListener changeListener;,0
1165,private NodeCombiner nodeCombiner;,0
1166,"public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}",0
1167,"public static Synchronizer cloneSynchronizer(Synchronizer sync) {
if (sync == null) {
throw new IllegalArgumentException(""Synchronizer must not be null!"");
}
if (NoOpSynchronizer.INSTANCE == sync) {
return sync;
}
try {
return sync.getClass().newInstance();
} catch (Exception ex) {
LOG.info(""Cannot create new instance of "" + sync.getClass());
}
try {
return (Synchronizer) clone(sync);
} catch (CloneNotSupportedException cnex) {
throw new ConfigurationRuntimeException(""Cannot clone Synchronizer "" + sync);
}
}",0
1168,private final ConversionHandler dataConversionHandler;,0
1169,"@Override
protected Boolean performOperation() throws SQLException {
PreparedStatement pstmt = initStatement(String.format(SQL_GET_PROPERTY, table, keyColumn), true, key);
ResultSet rs = pstmt.executeQuery();
return rs.next();
}",0
1170,private final ConfigurationInterpolator localSubst;,0
1171,"void validateRootNode() {
if (subnodeKey != null) {
try {
List<ConfigurationNode> nodes = getParent().fetchNodeList(subnodeKey);
if (nodes.size() != 1) {
subnodeKey = null;
} else {
ConfigurationNode currentRoot = nodes.get(0);
if (currentRoot != super.getRootNode()) {
fireEvent(EVENT_SUBNODE_CHANGED, null, null, true);
setRootNode(currentRoot);
fireEvent(EVENT_SUBNODE_CHANGED, null, null, false);
}
}
} catch (Exception ex) {
subnodeKey = null;
}
}
}",0
1172,private Document document;,0
1173,private EntityResolver entityResolver = new DefaultEntityResolver();,0
1174,"@Override
public BeanInfo[] getAdditionalBeanInfo() {
return additionalBeanInfo;
}",0
1175,private ReloadingController reloadingController;,0
1176,"public static Integer toInteger(Object value) throws ConversionException {
Number n = toNumber(value, Integer.class);
if (n instanceof Integer) {
return (Integer) n;
} else {
return new Integer(n.intValue());
}
}",0
1177,"public static Double toDouble(Object value) throws ConversionException {
Number n = toNumber(value, Double.class);
if (n instanceof Double) {
return (Double) n;
} else {
return new Double(n.doubleValue());
}
}",0
1178,"static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(new Class[] { String.class });
return ctor.newInstance(new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}",0
1179,"public static Float toFloat(Object value) throws ConversionException {
Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
} else {
return new Float(n.floatValue());
}
}",0
1180,"private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File parent = file.getParentFile();
if (parent != null && !parent.exists()) {
parent.mkdirs();
}
}
}
}",0
1181,"private FileSystemOptions getOptions(String scheme) {
FileSystemOptions opts = new FileSystemOptions();
FileSystemConfigBuilder builder;
try {
builder = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}",0
1182,"private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}",0
1183,"public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}",0
1184,"private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof Date) {
synchronized (PListNode.FORMAT) {
out.println(padding + ""<date>"" + PListNode.FORMAT.format((Date) value) + ""</date>"");
}
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(padding + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(padding + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(padding + ""<true/>"");
} else {
out.println(padding + ""<false/>"");
}
} else if (value instanceof List) {
out.println(padding + ""<array>"");
Iterator<?> it = ((List<?>) value).iterator();
while (it.hasNext()) {
printValue(out, indentLevel + 1, it.next());
}
out.println(padding + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRootNode());
} else if (value instanceof Configuration) {
out.println(padding + ""<dict>"");
Configuration config = (Configuration) value;
Iterator<String> it = config.getKeys();
while (it.hasNext()) {
String key = it.next();
ConfigurationNode node = new DefaultConfigurationNode(key);
node.setValue(config.getProperty(key));
printNode(out, indentLevel + 1, node);
if (it.hasNext()) {
out.println();
}
}
out.println(padding + ""</dict>"");
} else if (value instanceof Map) {
Map<String, Object> map = transformMap((Map<?, ?>) value);
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
String base64 = new String(Base64.encodeBase64((byte[]) value));
out.println(padding + ""<data>"" + StringEscapeUtils.escapeXml(base64) + ""</data>"");
} else if (value != null) {
out.println(padding + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
} else {
out.println(padding + ""<string/>"");
}
}",0
1185,"@Override
protected String normalizeURI(String uriref) {
ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
String resolved = (ci != null) ? String.valueOf(ci.interpolate(uriref)) : uriref;
return super.normalizeURI(resolved);
}",0
1186,"@Override
public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog catalog = staticCatalog;
if (catalog == null || !getUseStaticCatalog()) {
try {
catalog = new Catalog();
catalog.setCatalogManager(this);
catalog.setupReaders();
catalog.loadSystemCatalogs();
} catch (Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = catalog;
}
}
return catalog;
}",0
1187,"public boolean removeNodes(String name) {
if (nodes != null && name != null) {
List<ConfigurationNode> lst = namedNodes.remove(name);
if (lst != null) {
detachNodes(lst);
nodes.removeAll(lst);
return true;
}
}
return false;
}",0
1188,"public boolean removeNode(ConfigurationNode node) {
if (nodes != null && node != null && nodes.contains(node)) {
detachNode(node);
nodes.remove(node);
List<ConfigurationNode> lst = namedNodes.get(node.getName());
if (lst != null) {
lst.remove(node);
if (lst.isEmpty()) {
namedNodes.remove(node.getName());
}
}
return true;
} else {
return false;
}
}",0
1189,"protected int getMaxPosition() {
return reverse ? getStartOffset() + 1 : subNodes.size() - getStartOffset();
}",0
1190,"public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writer = null;
if (encoding != null) {
try {
writer = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writer == null) {
writer = new OutputStreamWriter(out);
}
save(writer);
}",0
1191,private volatile ConfigurationNode combinedRoot;,0
1192,"protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertiesConfiguration();
} else {
return new PropertiesConfiguration();
}
}",0
1193,"public static URL locate(String base, String name) {
if (log.isDebugEnabled()) {
StringBuffer buf = new StringBuffer();
buf.append(""ConfigurationUtils.locate(): base is "").append(base);
buf.append("", name is "").append(name);
log.debug(buf.toString());
}
if (name == null) {
return null;
}
URL url = null;
try {
if (base == null) {
url = new URL(name);
} else {
URL baseURL = new URL(base);
url = new URL(baseURL, name);
InputStream in = null;
try {
in = url.openStream();
} finally {
if (in != null) {
in.close();
}
}
}
log.debug(""Loading configuration from the URL "" + url);
} catch (IOException e) {
url = null;
}
if (url == null) {
File file = new File(name);
if (file.isAbsolute() && file.exists()) {
try {
url = toURL(file);
log.debug(""Loading configuration from the absolute path "" + name);
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
}
if (url == null) {
try {
File file = constructFile(base, name);
if (file != null && file.exists()) {
url = toURL(file);
}
if (url != null) {
log.debug(""Loading configuration from the path "" + file);
}
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
try {
File file = constructFile(System.getProperty(""user.home""), name);
if (file != null && file.exists()) {
url = toURL(file);
}
if (url != null) {
log.debug(""Loading configuration from the home path "" + file);
}
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
url = locateFromClasspath(name);
}
return url;
}",0
1194,"public boolean isEmpty() {
boolean empty = true;
StringBuffer query = new StringBuffer(""SELECT count(*) FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
if (rs.next()) {
empty = rs.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return empty;
}",0
1195,"public boolean containsKey(String key) {
boolean found = false;
StringBuffer query = new StringBuffer(""SELECT * FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
found = rs.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return found;
}",0
1196,"public Iterator getKeys() {
Collection keys = new ArrayList();
StringBuffer query = new StringBuffer(""SELECT DISTINCT "" + keyColumn + "" FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return keys.iterator();
}",0
1197,"private static String[] parseProperty(String line) {
String[] result = new String[2];
StringBuffer key = new StringBuffer();
StringBuffer value = new StringBuffer();
// state of the automaton:
int state = 0;
for (int pos = 0; pos < line.length(); pos++) {
char c = line.charAt(pos);
switch(state) {
case 0:
if (c == '\\') {
state = 1;
} else if (ArrayUtils.contains(WHITE_SPACE, c)) {
state = 2;
} else if (ArrayUtils.contains(SEPARATORS, c)) {
state = 3;
} else {
key.append(c);
}
break;
case 1:
if (ArrayUtils.contains(SEPARATORS, c) || ArrayUtils.contains(WHITE_SPACE, c)) {
key.append(c);
} else {
key.append('\\');
key.append(c);
}
state = 0;
break;
case 2:
if (ArrayUtils.contains(WHITE_SPACE, c)) {
state = 2;
} else if (ArrayUtils.contains(SEPARATORS, c)) {
state = 3;
} else {
value.append(c);
state = 3;
}
break;
case 3:
value.append(c);
break;
}
}
result[0] = key.toString().trim();
result[1] = value.toString().trim();
return result;
}",0
1198,"static Object toEnum(Object value, Class cls) throws ConversionException {
if (value.getClass().equals(cls)) {
return value;
} else if (value instanceof String) {
try {
Method valueOfMethod = cls.getMethod(""valueOf"", new Class[] { String.class });
return valueOfMethod.invoke(null, new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
}
} else if (value instanceof Number) {
try {
Method valuesMethod = cls.getMethod(""values"", new Class[] {});
Object valuesArray = valuesMethod.invoke(null, new Object[] {});
return Array.get(valuesArray, ((Number) value).intValue());
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
}
}",0
1199,"static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(new Class[] { String.class });
return ctor.newInstance(new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}",0
1200,"static boolean isEnum(Class cls) {
if (!SystemUtils.isJavaVersionAtLeast(JAVA_VERSION_1_5)) {
return false;
}
try {
Method isEnumMethod = Class.class.getMethod(""isEnum"", new Class[] {});
return ((Boolean) isEnumMethod.invoke(cls, new Object[] {})).booleanValue();
} catch (Exception e) {
throw new RuntimeException(e.getMessage());
}
}",0
1201,private DocumentBuilder documentBuilder;,0
1202,"public void load(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}",0
1203,"final public String String() throws ParseException {
Token token = null;
String value = null;
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case QUOTED_STRING:
token = jj_consume_token(QUOTED_STRING);
{
if (true)
return unescapeQuotes(removeQuotes(token.image));
}
break;
case STRING:
token = jj_consume_token(STRING);
{
if (true)
return token.image;
}
break;
default:
jj_la1[5] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
throw new Error(""Missing return statement in function"");
}",0
1204,"public void ReInit(java.io.Reader stream) {
jj_input_stream.ReInit(stream, 1, 1);
token_source.ReInit(jj_input_stream);
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 6; i++) jj_la1[i] = -1;
for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
}",0
1205,"final public PropertyListConfiguration Dictionary() throws ParseException {
PropertyListConfiguration configuration = new PropertyListConfiguration();
List children = new ArrayList();
Node child = null;
jj_consume_token(DICT_BEGIN);
label_1: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case STRING:
case QUOTED_STRING:
;
break;
default:
jj_la1[0] = jj_gen;
break label_1;
}
child = Property();
if (child.getValue() instanceof HierarchicalConfiguration) {
HierarchicalConfiguration conf = (HierarchicalConfiguration) child.getValue();
Node root = conf.getRoot();
root.setName(child.getName());
children.add(root);
} else {
children.add(child);
}
}
jj_consume_token(DICT_END);
for (int i = 0; i < children.size(); i++) {
child = (Node) children.get(i);
configuration.getRoot().addChild(child);
}
{
if (true)
return configuration;
}
throw new Error(""Missing return statement in function"");
}",0
1206,"protected byte[] filterData(String s) throws ParseException {
if (s == null) {
return null;
}
if (s.startsWith(""<"") && s.endsWith("">"") && s.length() >= 2) {
s = s.substring(1, s.length() - 1);
}
s = StringUtils.replaceChars(s, "" \t\n\r"", """");
if (s.length() % 2 != 0) {
s = ""0"" + s;
}
try {
return Hex.decodeHex(s.toCharArray());
} catch (Exception e) {
throw (ParseException) new ParseException(""Unable to parse the byte[] : "" + e.getMessage());
}
}",0
1207,"final public Date Date() throws ParseException {
Token token;
token = jj_consume_token(DATE);
{
if (true)
return parseDate(token.image);
}
throw new Error(""Missing return statement in function"");
}",0
1208,"final public Object Element() throws ParseException {
Object value = null;
if (jj_2_1(2)) {
value = Array();
{
if (true)
return value;
}
} else {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DICT_BEGIN:
value = Dictionary();
{
if (true)
return value;
}
break;
case STRING:
case QUOTED_STRING:
value = String();
{
if (true)
return value;
}
break;
case DATA:
value = Data();
{
if (true)
return value;
}
break;
case DATE:
value = Date();
{
if (true)
return value;
}
break;
default:
jj_la1[2] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}
throw new Error(""Missing return statement in function"");
}",0
1209,"final public byte[] Data() throws ParseException {
Token token;
token = jj_consume_token(DATA);
{
if (true)
return filterData(token.image);
}
throw new Error(""Missing return statement in function"");
}",0
1210,"public void ReInit(PropertyListParserTokenManager tm) {
token_source = tm;
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 6; i++) jj_la1[i] = -1;
for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
}",0
1211,"private final void ReInitRounds() {
int i;
jjround = 0x80000001;
for (i = 14; i-- > 0; ) {
jjrounds[i] = 0x80000000;
}
}",0
1212,"public void ReInit(SimpleCharStream stream) {
jjmatchedPos = jjnewStateCnt = 0;
curLexState = defaultLexState;
input_stream = stream;
ReInitRounds();
}",0
1213,public java.io.PrintStream debugStream = System.out;,0
1214,"private final int jjMoveNfa_0(int startState, int curPos) {
int[] nextStates;
int startsAt = 0;
jjnewStateCnt = 14;
int i = 1;
jjstateSet[0] = startState;
int j, kind = 0x7fffffff;
for (; ; ) {
if (++jjround == 0x7fffffff) {
ReInitRounds();
}
if (curChar < 64) {
long l = 1L << curChar;
MatchLoop: do {
switch(jjstateSet[--i]) {
case 15:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if ((0x7ff280100000000L & l) != 0L) {
jjCheckNAddTwoStates(4, 5);
} else if (curChar == 62) {
if (kind > 20) {
kind = 20;
}
}
break;
case 6:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if ((0x3ff000100002600L & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
} else if (curChar == 42) {
jjstateSet[jjnewStateCnt++] = 3;
} else if (curChar == 62) {
if (kind > 19) {
kind = 19;
}
}
break;
case 14:
if ((0xfffffffbffffffffL & l) != 0L) {
jjCheckNAddStates(0, 2);
} else if (curChar == 34) {
if (kind > 22) {
kind = 22;
}
}
break;
case 3:
case 8:
if ((0xd7ffecfaffffd9ffL & l) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 0:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
} else if (curChar == 34) {
jjCheckNAddStates(0, 2);
}
if (curChar == 60) {
jjstateSet[jjnewStateCnt++] = 6;
}
if (curChar == 60) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 1:
if ((0x3ff000100002600L & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 2:
if (curChar == 62 && kind > 19) {
kind = 19;
}
break;
case 4:
if ((0x7ff280100000000L & l) != 0L) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 5:
if (curChar == 62 && kind > 20) {
kind = 20;
}
break;
case 7:
if (curChar == 60) {
jjstateSet[jjnewStateCnt++] = 6;
}
break;
case 9:
case 11:
if (curChar == 34) {
jjCheckNAddStates(0, 2);
}
break;
case 10:
if ((0xfffffffbffffffffL & l) != 0L) {
jjCheckNAddStates(0, 2);
}
break;
case 13:
if (curChar == 34 && kind > 22) {
kind = 22;
}
break;
default:
break;
}
} while (i != startsAt);
} else if (curChar < 128) {
long l = 1L << (curChar & 077);
MatchLoop: do {
switch(jjstateSet[--i]) {
case 15:
if ((0xd7ffffffffffffffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if (curChar == 90) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 6:
if ((0xd7ffffffffffffffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if ((0x7e0000007eL & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 14:
jjCheckNAddStates(0, 2);
if (curChar == 92) {
jjstateSet[jjnewStateCnt++] = 11;
}
break;
case 3:
if ((0xd7ffffffffffffffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if (curChar == 68) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 0:
case 8:
if ((0xd7ffffffffffffffL & l) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 1:
if ((0x7e0000007eL & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 4:
if (curChar == 90) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 10:
jjCheckNAddStates(0, 2);
break;
case 12:
if (curChar == 92) {
jjstateSet[jjnewStateCnt++] = 11;
}
break;
default:
break;
}
} while (i != startsAt);
} else {
int i2 = (curChar & 0xff) >> 6;
long l2 = 1L << (curChar & 077);
MatchLoop: do {
switch(jjstateSet[--i]) {
case 15:
case 8:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 6:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 14:
case 10:
if ((jjbitVec0[i2] & l2) != 0L) {
jjCheckNAddStates(0, 2);
}
break;
case 3:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 0:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
default:
break;
}
} while (i != startsAt);
}
if (kind != 0x7fffffff) {
jjmatchedKind = kind;
jjmatchedPos = curPos;
kind = 0x7fffffff;
}
++curPos;
if ((i = jjnewStateCnt) == (startsAt = 14 - (jjnewStateCnt = startsAt))) {
return curPos;
}
try {
curChar = input_stream.readChar();
} catch (java.io.IOException e) {
return curPos;
}
}
}",0
1215,"private final void jjAddStates(int start, int end) {
do {
jjstateSet[jjnewStateCnt++] = jjnextStates[start];
} while (start++ != end);
}",0
1216,"public void ReInit(SimpleCharStream stream, int lexState) {
ReInit(stream);
SwitchTo(lexState);
}",0
1217,"protected void FillBuff() throws java.io.IOException {
if (maxNextCharInd == available) {
if (available == bufsize) {
if (tokenBegin > 2048) {
bufpos = maxNextCharInd = 0;
available = tokenBegin;
} else if (tokenBegin < 0)
bufpos = maxNextCharInd = 0;
else
ExpandBuff(false);
} else if (available > tokenBegin)
available = bufsize;
else if ((tokenBegin - available) < 2048)
ExpandBuff(true);
else
available = tokenBegin;
}
int i;
try {
if ((i = inputStream.read(buffer, maxNextCharInd, available - maxNextCharInd)) == -1) {
inputStream.close();
throw new java.io.IOException();
} else
maxNextCharInd += i;
return;
} catch (java.io.IOException e) {
--bufpos;
backup(0);
if (tokenBegin == -1)
tokenBegin = bufpos;
throw e;
}
}",0
1218,"public void Done() {
buffer = null;
bufline = null;
bufcolumn = null;
}",0
1219,"public char[] GetSuffix(int len) {
char[] ret = new char[len];
if ((bufpos + 1) >= len)
System.arraycopy(buffer, bufpos - len + 1, ret, 0, len);
else {
System.arraycopy(buffer, bufsize - (len - bufpos - 1), ret, 0, len - bufpos - 1);
System.arraycopy(buffer, 0, ret, len - bufpos - 1, bufpos + 1);
}
return ret;
}",0
1220,"public void ReInit(java.io.Reader dstream, int startline, int startcolumn, int buffersize) {
inputStream = dstream;
line = startline;
column = startcolumn - 1;
if (buffer == null || buffersize != buffer.length) {
available = bufsize = buffersize;
buffer = new char[buffersize];
bufline = new int[buffersize];
bufcolumn = new int[buffersize];
}
prevCharIsLF = prevCharIsCR = false;
tokenBegin = inBuf = maxNextCharInd = 0;
bufpos = -1;
}",0
1221,"public void ReInit(java.io.InputStream dstream, int startline, int startcolumn) {
ReInit(dstream, startline, startcolumn, 4096);
}",0
1222,"public char BeginToken() throws java.io.IOException {
tokenBegin = -1;
char c = readChar();
tokenBegin = bufpos;
return c;
}",0
1223,"public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
}",0
1224,"public String GetImage() {
if (bufpos >= tokenBegin)
return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
else
return new String(buffer, tokenBegin, bufsize - tokenBegin) + new String(buffer, 0, bufpos + 1);
}",0
1225,"public void ReInit(java.io.Reader dstream) {
ReInit(dstream, 1, 1, 4096);
}",0
1226,"public int beginLine, beginColumn, endLine, endColumn;",0
1227,"protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {
return (""Lexical error at line "" + errorLine + "", column "" + errorColumn + "".  Encountered: "" + (EOFSeen ? ""<EOF> "" : (""\"""" + addEscapes(String.valueOf(curChar)) + ""\"""") + "" ("" + (int) curChar + ""), "") + ""after : \"""" + addEscapes(errorAfter) + ""\"""");
}",0
1228,"public void load(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler(getRoot());
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
1229,"public void load(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler(getRoot());
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
1230,"public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}",0
1231,"public boolean removeNode(ConfigurationNode node) {
if (nodes != null && node != null && nodes.contains(node)) {
detachNode(node);
nodes.remove(node);
List lst = (List) namedNodes.get(node.getName());
if (lst != null) {
lst.remove(node);
if (lst.isEmpty()) {
namedNodes.remove(node.getName());
}
}
return true;
} else {
return false;
}
}",0
1232,"public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer((ConfigurationNode) subNodes.get(positionToIndex(getPosition())));
}",0
1233,private ConfigurationNode node;,0
1234,"protected Object resolveContainerStore(String key) {
Object value = getProperty(key);
if (value != null) {
if (value instanceof List) {
List list = (List) value;
value = list.isEmpty() ? null : list.get(0);
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
value = array.length == 0 ? null : array[0];
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
value = array.length == 0 ? null : array[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
value = array.length == 0 ? null : new Byte(array[0]);
} else if (value instanceof short[]) {
short[] array = (short[]) value;
value = array.length == 0 ? null : new Short(array[0]);
} else if (value instanceof int[]) {
int[] array = (int[]) value;
value = array.length == 0 ? null : new Integer(array[0]);
} else if (value instanceof long[]) {
long[] array = (long[]) value;
value = array.length == 0 ? null : new Long(array[0]);
} else if (value instanceof float[]) {
float[] array = (float[]) value;
value = array.length == 0 ? null : new Float(array[0]);
} else if (value instanceof double[]) {
double[] array = (double[]) value;
value = array.length == 0 ? null : new Double(array[0]);
}
}
return value;
}",0
1235,"public double getDouble(String key, double defaultValue) {
return getDouble(key, new Double(defaultValue)).doubleValue();
}",0
1236,"public byte getByte(String key, byte defaultValue) {
return getByte(key, new Byte(defaultValue)).byteValue();
}",0
1237,"public long getLong(String key, long defaultValue) {
return getLong(key, new Long(defaultValue)).longValue();
}",0
1238,"protected Object resolveContainerStore(String key) {
Object value = getProperty(key);
if (value != null) {
if (value instanceof List) {
List list = (List) value;
value = list.isEmpty() ? null : list.get(0);
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
value = array.length == 0 ? null : array[0];
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
value = array.length == 0 ? null : array[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
value = array.length == 0 ? null : new Byte(array[0]);
} else if (value instanceof short[]) {
short[] array = (short[]) value;
value = array.length == 0 ? null : new Short(array[0]);
} else if (value instanceof int[]) {
int[] array = (int[]) value;
value = array.length == 0 ? null : new Integer(array[0]);
} else if (value instanceof long[]) {
long[] array = (long[]) value;
value = array.length == 0 ? null : new Long(array[0]);
} else if (value instanceof float[]) {
float[] array = (float[]) value;
value = array.length == 0 ? null : new Float(array[0]);
} else if (value instanceof double[]) {
double[] array = (double[]) value;
value = array.length == 0 ? null : new Double(array[0]);
}
}
return value;
}",0
1239,"protected Object resolveContainerStore(String key) {
Object value = getProperty(key);
if (value != null) {
if (value instanceof List) {
List list = (List) value;
value = list.isEmpty() ? null : list.get(0);
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
value = array.length == 0 ? null : array[0];
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
value = array.length == 0 ? null : array[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
value = array.length == 0 ? null : new Byte(array[0]);
} else if (value instanceof short[]) {
short[] array = (short[]) value;
value = array.length == 0 ? null : new Short(array[0]);
} else if (value instanceof int[]) {
int[] array = (int[]) value;
value = array.length == 0 ? null : new Integer(array[0]);
} else if (value instanceof long[]) {
long[] array = (long[]) value;
value = array.length == 0 ? null : new Long(array[0]);
} else if (value instanceof float[]) {
float[] array = (float[]) value;
value = array.length == 0 ? null : new Float(array[0]);
} else if (value instanceof double[]) {
double[] array = (double[]) value;
value = array.length == 0 ? null : new Double(array[0]);
}
}
return value;
}",0
1240,"protected Object resolveContainerStore(String key) {
Object value = getProperty(key);
if (value != null) {
if (value instanceof List) {
List list = (List) value;
value = list.isEmpty() ? null : list.get(0);
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
value = array.length == 0 ? null : array[0];
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
value = array.length == 0 ? null : array[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
value = array.length == 0 ? null : new Byte(array[0]);
} else if (value instanceof short[]) {
short[] array = (short[]) value;
value = array.length == 0 ? null : new Short(array[0]);
} else if (value instanceof int[]) {
int[] array = (int[]) value;
value = array.length == 0 ? null : new Integer(array[0]);
} else if (value instanceof long[]) {
long[] array = (long[]) value;
value = array.length == 0 ? null : new Long(array[0]);
} else if (value instanceof float[]) {
float[] array = (float[]) value;
value = array.length == 0 ? null : new Float(array[0]);
} else if (value instanceof double[]) {
double[] array = (double[]) value;
value = array.length == 0 ? null : new Double(array[0]);
}
}
return value;
}",0
1241,"protected Object resolveContainerStore(String key) {
Object value = getProperty(key);
if (value != null) {
if (value instanceof List) {
List list = (List) value;
value = list.isEmpty() ? null : list.get(0);
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
value = array.length == 0 ? null : array[0];
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
value = array.length == 0 ? null : array[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
value = array.length == 0 ? null : new Byte(array[0]);
} else if (value instanceof short[]) {
short[] array = (short[]) value;
value = array.length == 0 ? null : new Short(array[0]);
} else if (value instanceof int[]) {
int[] array = (int[]) value;
value = array.length == 0 ? null : new Integer(array[0]);
} else if (value instanceof long[]) {
long[] array = (long[]) value;
value = array.length == 0 ? null : new Long(array[0]);
} else if (value instanceof float[]) {
float[] array = (float[]) value;
value = array.length == 0 ? null : new Float(array[0]);
} else if (value instanceof double[]) {
double[] array = (double[]) value;
value = array.length == 0 ? null : new Double(array[0]);
}
}
return value;
}",0
1242,"protected Object resolveContainerStore(String key) {
Object value = getProperty(key);
if (value != null) {
if (value instanceof List) {
List list = (List) value;
value = list.isEmpty() ? null : list.get(0);
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
value = array.length == 0 ? null : array[0];
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
value = array.length == 0 ? null : array[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
value = array.length == 0 ? null : new Byte(array[0]);
} else if (value instanceof short[]) {
short[] array = (short[]) value;
value = array.length == 0 ? null : new Short(array[0]);
} else if (value instanceof int[]) {
int[] array = (int[]) value;
value = array.length == 0 ? null : new Integer(array[0]);
} else if (value instanceof long[]) {
long[] array = (long[]) value;
value = array.length == 0 ? null : new Long(array[0]);
} else if (value instanceof float[]) {
float[] array = (float[]) value;
value = array.length == 0 ? null : new Float(array[0]);
} else if (value instanceof double[]) {
double[] array = (double[]) value;
value = array.length == 0 ? null : new Double(array[0]);
}
}
return value;
}",0
1243,"public void load(InputStream in, String encoding) throws ConfigurationException {
Reader reader = null;
if (encoding != null) {
try {
reader = new InputStreamReader(in, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (reader == null) {
reader = new InputStreamReader(in);
}
load(reader);
}",0
1244,"private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File parent = file.getParentFile();
if (parent != null && !parent.exists()) {
parent.mkdirs();
}
}
}
}",0
1245,"public Object getProperty(String key) {
if (isForceReloadCheck()) {
for (Iterator it = configurations.iterator(); it.hasNext(); ) {
try {
((ConfigData) it.next()).getConfiguration().getProperty(PROP_RELOAD_CHECK);
} catch (Exception ex) {
;
}
}
}
return super.getProperty(key);
}",0
1246,"protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertyListConfiguration();
} else {
return new PropertyListConfiguration();
}
}",0
1247,"private boolean hasDelimiter() {
int count = 0;
for (int idx = keyBuffer.length() - 1; idx >= 0 && keyBuffer.charAt(idx) == PROPERTY_DELIMITER; idx--) {
count++;
}
return count % 2 == 1;
}",0
1248,"public static URL locate(String base, String name) {
if (log.isDebugEnabled()) {
StringBuffer buf = new StringBuffer();
buf.append(""ConfigurationUtils.locate(): base is "").append(base);
buf.append("", name is "").append(name);
log.debug(buf.toString());
}
if (name == null) {
return null;
}
URL url = null;
try {
if (base == null) {
url = new URL(name);
} else {
URL baseURL = new URL(base);
url = new URL(baseURL, name);
InputStream in = null;
try {
in = url.openStream();
} finally {
if (in != null) {
in.close();
}
}
}
log.debug(""Loading configuration from the URL "" + url);
} catch (IOException e) {
url = null;
}
if (url == null) {
File file = new File(name);
if (file.isAbsolute() && file.exists()) {
try {
url = file.toURL();
log.debug(""Loading configuration from the absolute path "" + name);
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
}
if (url == null) {
try {
File file = constructFile(base, name);
if (file != null && file.exists()) {
url = file.toURL();
}
if (url != null) {
log.debug(""Loading configuration from the path "" + file);
}
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
try {
File file = constructFile(System.getProperty(""user.home""), name);
if (file != null && file.exists()) {
url = file.toURL();
}
if (url != null) {
log.debug(""Loading configuration from the home path "" + file);
}
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
url = locateFromClasspath(name);
}
return url;
}",0
1249,"public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}",0
1250,protected Configuration configuration;,0
1251,"public boolean isEmpty() {
boolean empty = true;
StringBuffer query = new StringBuffer(""SELECT count(*) FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
if (rs.next()) {
empty = rs.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
closeQuietly(conn, pstmt);
}
return empty;
}",0
1252,"public boolean isEmpty() {
boolean empty = true;
StringBuffer query = new StringBuffer(""SELECT count(*) FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
if (rs.next()) {
empty = rs.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
closeQuietly(conn, pstmt);
}
return empty;
}",0
1253,"public Iterator getKeys() {
Collection keys = new ArrayList();
StringBuffer query = new StringBuffer(""SELECT DISTINCT "" + keyColumn + "" FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
closeQuietly(conn, pstmt);
}
return keys.iterator();
}",0
1254,"public Iterator getKeys() {
Collection keys = new ArrayList();
StringBuffer query = new StringBuffer(""SELECT DISTINCT "" + keyColumn + "" FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
closeQuietly(conn, pstmt);
}
return keys.iterator();
}",0
1255,"protected void addPropertyDirect(String key, Object obj) {
StringBuffer query = new StringBuffer(""INSERT INTO "" + table);
if (nameColumn != null) {
query.append("" ("" + nameColumn + "", "" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?, ?)"");
} else {
query.append("" ("" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?)"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
int index = 1;
if (nameColumn != null) {
pstmt.setString(index++, name);
}
pstmt.setString(index++, key);
pstmt.setString(index++, String.valueOf(obj));
pstmt.executeUpdate();
} catch (SQLException e) {
fireError(EVENT_ADD_PROPERTY, key, obj, e);
} finally {
closeQuietly(conn, pstmt);
}
}",0
1256,private ExpressionEngine expressionEngine;,0
1257,"public void clearProperty(String key) {
fireEvent(EVENT_CLEAR_PROPERTY, key, null, true);
List nodes = fetchNodeList(key);
for (Iterator it = nodes.iterator(); it.hasNext(); ) {
clearNode((ConfigurationNode) it.next());
}
fireEvent(EVENT_CLEAR_PROPERTY, key, null, false);
}",0
1258,"public static Long toLong(Object value) throws ConversionException {
Number n = toNumber(value, Long.class);
if (n instanceof Long) {
return (Long) n;
} else {
return new Long(n.longValue());
}
}",0
1259,"public static Byte toByte(Object value) throws ConversionException {
Number n = toNumber(value, Byte.class);
if (n instanceof Byte) {
return (Byte) n;
} else {
return new Byte(n.byteValue());
}
}",0
1260,"public static Integer toInteger(Object value) throws ConversionException {
Number n = toNumber(value, Integer.class);
if (n instanceof Integer) {
return (Integer) n;
} else {
return new Integer(n.intValue());
}
}",0
1261,"public static Float toFloat(Object value) throws ConversionException {
Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
} else {
return new Float(n.floatValue());
}
}",0
1262,private Document document;,0
1263,"public void load(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}",0
1264,"public static void initBean(Object bean, BeanDeclaration data) throws ConfigurationRuntimeException {
Map properties = data.getBeanProperties();
if (properties != null) {
for (Iterator it = properties.keySet().iterator(); it.hasNext(); ) {
String propName = (String) it.next();
initProperty(bean, propName, properties.get(propName));
}
}
Map nestedBeans = data.getNestedBeanDeclarations();
if (nestedBeans != null) {
for (Iterator it = nestedBeans.keySet().iterator(); it.hasNext(); ) {
String propName = (String) it.next();
initProperty(bean, propName, createBean((BeanDeclaration) nestedBeans.get(propName), null));
}
}
}",0
1265,"public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List list = (List) value;
Iterator iterator = list.iterator();
while (iterator.hasNext()) {
getConfiguration().addProperty(name, iterator.next());
}
} else if (value instanceof int[]) {
int[] array = (int[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Integer(array[i]));
}
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(array[i]));
}
} else if (value instanceof char[]) {
char[] array = (char[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Character(array[i]));
}
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Byte(array[i]));
}
} else if (value instanceof short[]) {
short[] array = (short[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Short(array[i]));
}
} else if (value instanceof long[]) {
long[] array = (long[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Long(array[i]));
}
} else if (value instanceof float[]) {
float[] array = (float[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Float(array[i]));
}
} else if (value instanceof double[]) {
double[] array = (double[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Double(array[i]));
}
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, array[i]);
}
} else {
getConfiguration().setProperty(name, value);
}
}",0
1266,"public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List list = (List) value;
Iterator iterator = list.iterator();
while (iterator.hasNext()) {
getConfiguration().addProperty(name, iterator.next());
}
} else if (value instanceof int[]) {
int[] array = (int[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Integer(array[i]));
}
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(array[i]));
}
} else if (value instanceof char[]) {
char[] array = (char[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Character(array[i]));
}
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Byte(array[i]));
}
} else if (value instanceof short[]) {
short[] array = (short[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Short(array[i]));
}
} else if (value instanceof long[]) {
long[] array = (long[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Long(array[i]));
}
} else if (value instanceof float[]) {
float[] array = (float[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Float(array[i]));
}
} else if (value instanceof double[]) {
double[] array = (double[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Double(array[i]));
}
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, array[i]);
}
} else {
getConfiguration().setProperty(name, value);
}
}",0
1267,"public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List list = (List) value;
Iterator iterator = list.iterator();
while (iterator.hasNext()) {
getConfiguration().addProperty(name, iterator.next());
}
} else if (value instanceof int[]) {
int[] array = (int[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Integer(array[i]));
}
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(array[i]));
}
} else if (value instanceof char[]) {
char[] array = (char[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Character(array[i]));
}
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Byte(array[i]));
}
} else if (value instanceof short[]) {
short[] array = (short[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Short(array[i]));
}
} else if (value instanceof long[]) {
long[] array = (long[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Long(array[i]));
}
} else if (value instanceof float[]) {
float[] array = (float[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Float(array[i]));
}
} else if (value instanceof double[]) {
double[] array = (double[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Double(array[i]));
}
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, array[i]);
}
} else {
getConfiguration().setProperty(name, value);
}
}",0
1268,"final public List Array() throws ParseException {
List list = new ArrayList();
Object element = null;
jj_consume_token(ARRAY_BEGIN);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_BEGIN:
case DICT_BEGIN:
case DATA:
case STRING:
case QUOTED_STRING:
element = Element();
list.add(element);
label_2: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_SEPARATOR:
;
break;
default:
jj_la1[3] = jj_gen;
break label_2;
}
jj_consume_token(ARRAY_SEPARATOR);
element = Element();
list.add(element);
}
break;
default:
jj_la1[4] = jj_gen;
;
}
jj_consume_token(ARRAY_END);
return list;
}",0
1269,"final public PropertyListConfiguration Dictionary() throws ParseException {
PropertyListConfiguration configuration = new PropertyListConfiguration();
List children = new ArrayList();
Node child = null;
jj_consume_token(DICT_BEGIN);
label_1: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case STRING:
case QUOTED_STRING:
;
break;
default:
jj_la1[0] = jj_gen;
break label_1;
}
child = Property();
if (child.getValue() instanceof HierarchicalConfiguration) {
HierarchicalConfiguration conf = (HierarchicalConfiguration) child.getValue();
Node root = conf.getRoot();
root.setName(child.getName());
children.add(root);
} else {
children.add(child);
}
}
jj_consume_token(DICT_END);
for (int i = 0; i < children.size(); i++) {
child = (Node) children.get(i);
configuration.getRoot().addChild(child);
}
return configuration;
}",0
1270,"final public String String() throws ParseException {
Token token = null;
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case QUOTED_STRING:
token = jj_consume_token(QUOTED_STRING);
return unescapeQuotes(removeQuotes(token.image));
case STRING:
token = jj_consume_token(STRING);
return token.image;
default:
jj_la1[5] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}",0
1271,"public void ReInit(SimpleCharStream stream) {
jjmatchedPos = jjnewStateCnt = 0;
curLexState = defaultLexState;
input_stream = stream;
ReInitRounds();
}",0
1272,"private final void ReInitRounds() {
int i;
jjround = 0x80000001;
for (i = 9; i-- > 0; ) jjrounds[i] = 0x80000000;
}",0
1273,"protected void ExpandBuff(boolean wrapAround) {
char[] newbuffer = new char[bufsize + 2048];
int[] newbufline = new int[bufsize + 2048];
int[] newbufcolumn = new int[bufsize + 2048];
try {
if (wrapAround) {
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
System.arraycopy(buffer, 0, newbuffer, bufsize - tokenBegin, bufpos);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos += (bufsize - tokenBegin));
} else {
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos -= tokenBegin);
}
} catch (Throwable t) {
throw new Error(t.getMessage());
}
bufsize += 2048;
available = bufsize;
tokenBegin = 0;
}",0
1274,"public char BeginToken() throws java.io.IOException {
tokenBegin = -1;
char c = readChar();
tokenBegin = bufpos;
return c;
}",0
1275,"public void Done() {
buffer = null;
bufline = null;
bufcolumn = null;
}",0
1276,"public void ReInit(java.io.Reader dstream, int startline, int startcolumn, int buffersize) {
inputStream = dstream;
line = startline;
column = startcolumn - 1;
if (buffer == null || buffersize != buffer.length) {
available = bufsize = buffersize;
buffer = new char[buffersize];
bufline = new int[buffersize];
bufcolumn = new int[buffersize];
}
prevCharIsLF = prevCharIsCR = false;
tokenBegin = inBuf = maxNextCharInd = 0;
bufpos = -1;
}",0
1277,"protected void FillBuff() throws java.io.IOException {
if (maxNextCharInd == available) {
if (available == bufsize) {
if (tokenBegin > 2048) {
bufpos = maxNextCharInd = 0;
available = tokenBegin;
} else if (tokenBegin < 0)
bufpos = maxNextCharInd = 0;
else
ExpandBuff(false);
} else if (available > tokenBegin)
available = bufsize;
else if ((tokenBegin - available) < 2048)
ExpandBuff(true);
else
available = tokenBegin;
}
int i;
try {
if ((i = inputStream.read(buffer, maxNextCharInd, available - maxNextCharInd)) == -1) {
inputStream.close();
throw new java.io.IOException();
} else
maxNextCharInd += i;
return;
} catch (java.io.IOException e) {
--bufpos;
backup(0);
if (tokenBegin == -1)
tokenBegin = bufpos;
throw e;
}
}",0
1278,"public SimpleCharStream(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
this(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
}",0
1279,"public String GetImage() {
if (bufpos >= tokenBegin)
return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
else
return new String(buffer, tokenBegin, bufsize - tokenBegin) + new String(buffer, 0, bufpos + 1);
}",0
1280,public Token specialToken;,0
1281,"public int beginLine, beginColumn, endLine, endColumn;",0
1282,"protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {
return (""Lexical error at line "" + errorLine + "", column "" + errorColumn + "".  Encountered: "" + (EOFSeen ? ""<EOF> "" : (""\"""" + addEscapes(String.valueOf(curChar)) + ""\"""") + "" ("" + (int) curChar + ""), "") + ""after : \"""" + addEscapes(errorAfter) + ""\"""");
}",0
1283,"public void addIntegerValue(String value) {
addValue(new Integer(value));
}",0
1284,"private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof Date) {
out.println(padding + ""<date>"" + PListNode.format.format((Date) value) + ""</date>"");
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(padding + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(padding + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(padding + ""<true/>"");
} else {
out.println(padding + ""<false/>"");
}
} else if (value instanceof List) {
out.println(padding + ""<array>"");
Iterator it = ((List) value).iterator();
while (it.hasNext()) {
printValue(out, indentLevel + 1, it.next());
}
out.println(padding + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRoot());
} else if (value instanceof Configuration) {
out.println(padding + ""<dict>"");
Configuration config = (Configuration) value;
Iterator it = config.getKeys();
while (it.hasNext()) {
String key = (String) it.next();
Node node = new Node(key);
node.setValue(config.getProperty(key));
printNode(out, indentLevel + 1, node);
if (it.hasNext()) {
out.println();
}
}
out.println(padding + ""</dict>"");
} else if (value instanceof Map) {
Map map = (Map) value;
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
String base64 = new String(Base64.encodeBase64((byte[]) value));
out.println(padding + ""<data>"" + StringEscapeUtils.escapeXml(base64) + ""</data>"");
} else {
out.println(padding + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
}
}",0
1285,"public void addDateValue(String value) {
try {
addValue(format.parse(value));
} catch (ParseException e) {
;
}
}",0
1286,"public void addDateValue(String value) {
try {
addValue(format.parse(value));
} catch (ParseException e) {
;
}
}",0
1287,"public boolean removeNode(ConfigurationNode node) {
if (nodes != null && node != null && nodes.contains(node)) {
detachNode(node);
nodes.remove(node);
List lst = (List) namedNodes.get(node.getName());
if (lst != null) {
lst.remove(node);
if (lst.isEmpty()) {
namedNodes.remove(node.getName());
}
}
return true;
} else {
return false;
}
}",0
1288,"public List getSubNodes(String name) {
if (name == null) {
return getSubNodes();
}
List result;
if (nodes == null) {
result = null;
} else {
result = (List) namedNodes.get(name);
}
return (result == null) ? Collections.EMPTY_LIST : Collections.unmodifiableList(result);
}",0
1289,"public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer((ConfigurationNode) subNodes.get(positionToIndex(getPosition())));
}",0
1290,"protected int getMaxPosition() {
return reverse ? getStartOffset() + 1 : subNodes.size() - getStartOffset();
}",0
1291,"private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}",0
1292,"private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}",0
1293,"protected PreparedStatement createStatement(String sql, boolean nameCol) throws SQLException {
String statement;
if (nameCol && configurationNameColumn != null) {
StringBuilder buf = new StringBuilder(sql);
buf.append("" AND "").append(configurationNameColumn).append(""=?"");
statement = buf.toString();
} else {
statement = sql;
}
pstmt = getConnection().prepareStatement(statement);
return pstmt;
}",0
1294,"@Override
public void read(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}",0
1295,private ConfigurationSourceData sourceData;,0
1296,"private ConfigurationBuilderEvent createEventWithChangedSource(ConfigurationBuilderEvent event) {
if (ConfigurationBuilderResultCreatedEvent.RESULT_CREATED.equals(event.getEventType())) {
return new ConfigurationBuilderResultCreatedEvent(this, ConfigurationBuilderResultCreatedEvent.RESULT_CREATED, ((ConfigurationBuilderResultCreatedEvent) event).getConfiguration());
}
@SuppressWarnings(""unchecked"")
EventType<? extends ConfigurationBuilderEvent> type = (EventType<? extends ConfigurationBuilderEvent>) event.getEventType();
return new ConfigurationBuilderEvent(this, type);
}",0
1297,private ReloadingController reloadingController;,0
1298,"public static Float toFloat(Object value) throws ConversionException {
Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
} else {
return new Float(n.floatValue());
}
}",0
1299,"static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(String.class);
return ctor.newInstance(value);
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}",0
1300,private final String protocol;,0
1301,"private FileSystemOptions getOptions(String scheme) {
FileSystemOptions opts = new FileSystemOptions();
FileSystemConfigBuilder builder;
try {
builder = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}",0
1302,"@Override
public void read(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
1303,"@Override
public void read(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
1304,private final QueryResult<T> attributeResult;,0
1305,"@Override
@SuppressWarnings(""unchecked"")
public NodePointer createNodePointer(NodePointer parent, QName name, Object bean) {
if (bean instanceof NodeWrapper) {
NodeWrapper<?> wrapper = (NodeWrapper<?>) bean;
return new ConfigurationNodePointer((ConfigurationNodePointer) parent, wrapper.getNode(), wrapper.getNodeHandler());
}
return null;
}",0
1306,"public long getLong(String key, long defaultValue) {
return getLong(key, new Long(defaultValue)).longValue();
}",0
1307,"public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writer = null;
if (encoding != null) {
try {
writer = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writer == null) {
writer = new OutputStreamWriter(out);
}
save(writer);
}",0
1308,"public void load(InputStream in, String encoding) throws ConfigurationException {
Reader reader = null;
if (encoding != null) {
try {
reader = new InputStreamReader(in, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (reader == null) {
reader = new InputStreamReader(in);
}
load(reader);
}",0
1309,"private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}",0
1310,"@Override
protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertyListConfiguration();
} else {
return new PropertyListConfiguration();
}
}",0
1311,"public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}",0
1312,protected Configuration configuration;,0
1313,"public boolean isEmpty() {
boolean empty = true;
StringBuilder query = new StringBuilder(""SELECT count(*) FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
ResultSet rs = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
rs = pstmt.executeQuery();
if (rs.next()) {
empty = rs.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt, rs);
}
return empty;
}",0
1314,"@Override
public void clear() {
fireEvent(EVENT_CLEAR, null, null, true);
StringBuilder query = new StringBuilder(""DELETE FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_CLEAR, null, null, e);
} finally {
close(conn, pstmt, null);
}
fireEvent(EVENT_CLEAR, null, null, false);
}",0
1315,"@Override
protected void addPropertyDirect(String key, Object obj) {
StringBuilder query = new StringBuilder(""INSERT INTO "" + table);
if (nameColumn != null) {
query.append("" ("" + nameColumn + "", "" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?, ?)"");
} else {
query.append("" ("" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?)"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
int index = 1;
if (nameColumn != null) {
pstmt.setString(index++, name);
}
pstmt.setString(index++, key);
pstmt.setString(index++, String.valueOf(obj));
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_ADD_PROPERTY, key, obj, e);
} finally {
close(conn, pstmt, null);
}
}",0
1316,"public Object createBean(Class<?> beanClass, BeanDeclaration data, Object param) throws Exception {
ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
String tagName = decl.getNode().getName();
ConfigurationProvider provider = decl.getConfigurationBuilder().providerForTag(tagName);
if (provider == null) {
throw new ConfigurationRuntimeException(""No ConfigurationProvider registered for tag "" + tagName);
}
try {
AbstractConfiguration config = provider.getConfiguration(decl);
installInterpolator(decl, config);
return config;
} catch (Exception ex) {
if (!decl.isOptional()) {
throw ex;
} else {
if (logger.isDebugEnabled()) {
logger.debug(""Load failed for optional configuration "" + tagName + "": "" + ex.getMessage());
}
decl.getConfigurationBuilder().fireError(EVENT_ERR_LOAD_OPTIONAL, decl.getConfiguration().getString(ATTR_NAME), null, ex);
if (decl.isForceCreate()) {
try {
return provider.getEmptyConfiguration(decl);
} catch (Exception ex2) {
logger.warn(""Could not create instance of optional configuration "" + tagName, ex2);
}
}
return null;
}
}
}",0
1317,"private final StrLookup combinedConfigLookup = new StrLookup() {
@Override
public String lookup(String key) {
if (constructedConfiguration != null) {
Object value = constructedConfiguration.resolveContainerStore(key);
return (value != null) ? value.toString() : null;
}
return null;
}
};",0
1318,"private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File parent = file.getParentFile();
if (parent != null && !parent.exists()) {
parent.mkdirs();
}
}
}
}",0
1319,"private CombinedConfiguration getCurrentConfig() {
String key = localSubst.replace(keyPattern);
CombinedConfiguration config = configs.get(key);
if (config == null) {
synchronized (configs) {
config = configs.get(key);
if (config == null) {
config = new CombinedConfiguration(getNodeCombiner());
if (loggerName != null) {
Log log = LogFactory.getLog(loggerName);
if (log != null) {
config.setLogger(log);
}
}
config.setIgnoreReloadExceptions(isIgnoreReloadExceptions());
config.setExpressionEngine(this.getExpressionEngine());
config.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
config.setConversionExpressionEngine(getConversionExpressionEngine());
config.setListDelimiter(getListDelimiter());
for (ConfigurationErrorListener listener : getErrorListeners()) {
config.addErrorListener(listener);
}
for (ConfigurationListener listener : getConfigurationListeners()) {
config.addConfigurationListener(listener);
}
config.setForceReloadCheck(isForceReloadCheck());
for (ConfigData data : configurations) {
config.addConfiguration(data.getConfiguration(), data.getName(), data.getAt());
}
configs.put(key, config);
}
}
}
if (getLogger().isDebugEnabled()) {
getLogger().debug(""Returning config for "" + key + "": "" + config);
}
return config;
}",0
1320,private NodeCombiner nodeCombiner;,0
1321,private final Object reloadLock;,0
1322,"public Lock(String name) {
this.name = name;
synchronized (counterLock) {
instanceId = ++counter;
}
}",0
1323,"private ReloadingStrategy createReloadingStrategy() {
if (fileStrategy == null) {
return null;
}
try {
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(fileStrategy);
strategy.setConfiguration(null);
return strategy;
} catch (Exception ex) {
return null;
}
}",0
1324,"private AbstractHierarchicalFileConfiguration getConfiguration() {
if (pattern == null) {
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String path = localSubst.replace(pattern);
if (configurationsMap.containsKey(path)) {
return configurationsMap.get(path);
}
if (path.equals(pattern)) {
XMLConfiguration configuration = new XMLConfiguration() {
@Override
public void load() throws ConfigurationException {
}
@Override
public void save() throws ConfigurationException {
}
};
configurationsMap.putIfAbsent(pattern, configuration);
return configuration;
}
XMLConfiguration configuration = new XMLConfiguration();
if (loggerName != null) {
Log log = LogFactory.getLog(loggerName);
if (log != null) {
configuration.setLogger(log);
}
}
configuration.setBasePath(getBasePath());
configuration.setFileName(path);
configuration.setFileSystem(getFileSystem());
configuration.setExpressionEngine(getExpressionEngine());
ReloadingStrategy strategy = createReloadingStrategy();
if (strategy != null) {
configuration.setReloadingStrategy(strategy);
}
configuration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
configuration.setAttributeSplittingDisabled(isAttributeSplittingDisabled());
configuration.setValidating(validating);
configuration.setSchemaValidation(schemaValidation);
configuration.setEntityResolver(entityResolver);
configuration.setListDelimiter(getListDelimiter());
configuration.addConfigurationListener(this);
configuration.addErrorListener(this);
try {
configuration.load();
} catch (ConfigurationException ce) {
if (isThrowable(ce)) {
throw new ConfigurationRuntimeException(ce);
}
}
configurationsMap.putIfAbsent(path, configuration);
return configurationsMap.get(path);
}",0
1325,"@Override
public long getLong(String key, long defaultValue) {
return config.getLong(makePath(key), defaultValue);
}",0
1326,"public static Short toShort(Object value) throws ConversionException {
Number n = toNumber(value, Short.class);
if (n instanceof Short) {
return (Short) n;
} else {
return new Short(n.shortValue());
}
}",0
1327,"public static Long toLong(Object value) throws ConversionException {
Number n = toNumber(value, Long.class);
if (n instanceof Long) {
return (Long) n;
} else {
return new Long(n.longValue());
}
}",0
1328,"public static Byte toByte(Object value) throws ConversionException {
Number n = toNumber(value, Byte.class);
if (n instanceof Byte) {
return (Byte) n;
} else {
return new Byte(n.byteValue());
}
}",0
1329,"@Override
public ConfigurationNode getRootNode() {
if (getSubnodeKey() != null) {
try {
List<ConfigurationNode> nodes = getParent().fetchNodeList(getSubnodeKey());
if (nodes.size() != 1) {
setSubnodeKey(null);
} else {
ConfigurationNode currentRoot = nodes.get(0);
if (currentRoot != super.getRootNode()) {
fireEvent(EVENT_SUBNODE_CHANGED, null, null, true);
setRootNode(currentRoot);
fireEvent(EVENT_SUBNODE_CHANGED, null, null, false);
}
return currentRoot;
}
} catch (Exception ex) {
setSubnodeKey(null);
}
}
return super.getRootNode();
}",0
1330,private final String protocol;,0
1331,"private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}",0
1332,"private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}",0
1333,private DocumentBuilder documentBuilder;,0
1334,private DocumentBuilder documentBuilder;,0
1335,"@Override
public void save(Writer out) throws ConfigurationException {
PrintWriter writer = new PrintWriter(out);
String encoding = getEncoding() != null ? getEncoding() : DEFAULT_ENCODING;
writer.println(""<?xml version=\""1.0\"" encoding=\"""" + encoding + ""\""?>"");
writer.println(""<!DOCTYPE properties SYSTEM \""http://java.sun.com/dtd/properties.dtd\"">"");
writer.println(""<properties>"");
if (getHeader() != null) {
writer.println(""  <comment>"" + StringEscapeUtils.escapeXml(getHeader()) + ""</comment>"");
}
Iterator<String> keys = getKeys();
while (keys.hasNext()) {
String key = keys.next();
Object value = getProperty(key);
if (value instanceof List) {
writeProperty(writer, key, (List<?>) value);
} else {
writeProperty(writer, key, value);
}
}
writer.println(""</properties>"");
writer.flush();
}",0
1336,"@Override
public void load(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}",0
1337,"protected BeanDeclaration createBeanDeclaration(ConfigurationNode node) {
List<HierarchicalConfiguration> list = getConfiguration().configurationsAt(node.getName());
if (list.size() == 1) {
return new XMLBeanDeclaration((SubnodeConfiguration) list.get(0), node);
} else {
Iterator<HierarchicalConfiguration> iter = list.iterator();
while (iter.hasNext()) {
SubnodeConfiguration config = (SubnodeConfiguration) iter.next();
if (config.getRootNode().equals(node)) {
return new XMLBeanDeclaration(config, node);
}
}
throw new ConfigurationRuntimeException(""Unable to match node for "" + node.getName());
}
}",0
1338,"@Override
protected String normalizeURI(String uriref) {
StrSubstitutor substitutor = ((CatalogManager) catalogManager).getStrSubstitutor();
String resolved = substitutor != null ? substitutor.replace(uriref) : uriref;
return super.normalizeURI(resolved);
}",0
1339,"@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = ConfigurationUtils.locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}",0
1340,"public List<ConfigurationNode> getSubNodes(String name) {
if (name == null) {
return getSubNodes();
}
List<ConfigurationNode> result;
if (nodes == null) {
result = null;
} else {
result = namedNodes.get(name);
}
if (result == null) {
return Collections.emptyList();
} else {
return Collections.unmodifiableList(result);
}
}",0
1341,"public boolean removeNodes(String name) {
if (nodes != null && name != null) {
List<ConfigurationNode> lst = namedNodes.remove(name);
if (lst != null) {
detachNodes(lst);
nodes.removeAll(lst);
return true;
}
}
return false;
}",0
1342,"public boolean removeNode(ConfigurationNode node) {
if (nodes != null && node != null && nodes.contains(node)) {
detachNode(node);
nodes.remove(node);
List<ConfigurationNode> lst = namedNodes.get(node.getName());
if (lst != null) {
lst.remove(node);
if (lst.isEmpty()) {
namedNodes.remove(node.getName());
}
}
return true;
} else {
return false;
}
}",0
1343,"@Override
public void visitBeforeChildren(final ImmutableNode node, final NodeHandler<ImmutableNode> handler) {
final ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
updateNode(node, refHandler);
insertNewChildNodes(node, refHandler);
}",0
1344,"@Override
public void visitBeforeChildren(final ImmutableNode node, final NodeHandler<ImmutableNode> handler) {
final ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
updateNode(node, refHandler);
insertNewChildNodes(node, refHandler);
}",0
1345,"private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
}
final Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
final ByteArrayOutputStream os = new ByteArrayOutputStream();
final PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}",0
1346,"public static void dump(final ImmutableConfiguration configuration, final PrintStream out) {
dump(configuration, new PrintWriter(out));
}",0
1347,"public DataSource getDataSource() {
return dataSource;
}",0
1348,"@Override
public void read(final Reader in) throws ConfigurationException {
final SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
final SAXParser parser = factory.newSAXParser();
final XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver((publicId, systemId) -> new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd"")));
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (final Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}",0
1349,private AutoSaveListener autoSaveListener;,0
1350,private ConfigurationSourceData sourceData;,0
1351,"static Object toInternetAddress(final Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
final Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(String.class);
return ctor.newInstance(value);
} catch (final Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}",0
1352,"public static Float toFloat(final Object value) throws ConversionException {
final Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
}
return new Float(n.floatValue());
}",0
1353,"private FileSystemOptions getOptions(final String scheme) {
final FileSystemOptions opts = new FileSystemOptions();
FileSystemConfigBuilder builder;
try {
builder = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (final Exception ex) {
return null;
}
final FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
final Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (final Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (final Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}",0
1354,"@Override
public void read(final Reader in) throws ConfigurationException {
final EntityResolver resolver = (publicId, systemId) -> new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
final XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
final SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
final SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (final Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
1355,"@Override
public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog catalog = staticCatalog;
if (catalog == null || !getUseStaticCatalog()) {
try {
catalog = new Catalog();
catalog.setCatalogManager(this);
catalog.setupReaders();
catalog.loadSystemCatalogs();
} catch (final Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = catalog;
}
}
return catalog;
}",0
1356,"@Override
protected String normalizeURI(final String uriref) {
final ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
final String resolved = ci != null ? String.valueOf(ci.interpolate(uriref)) : uriref;
return super.normalizeURI(resolved);
}",0
1357,"@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
final String base = ((CatalogManager) catalogManager).getBaseDir();
final Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
final String fileName = catalogs.elementAt(count);
URL url = null;
InputStream inputStream = null;
try {
url = locate(fs, base, fileName);
if (url != null) {
inputStream = fs.getInputStream(url);
}
} catch (final ConfigurationException ce) {
final String name = url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (inputStream != null) {
final String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, inputStream);
continue;
}
} catch (final Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
inputStream.close();
}
}
parseCatalog(base, fileName);
}
}
}",0
1358,private final QueryResult<T> attributeResult;,0
1359,"public short getShort(String key, short defaultValue) {
return getShort(key, new Short(defaultValue));
}",0
1360,"public byte getByte(String key, byte defaultValue) {
return getByte(key, new Byte(defaultValue));
}",0
1361,"public void load(InputStream in, String encoding) throws ConfigurationException {
Reader reader = null;
if (encoding != null) {
try {
reader = new InputStreamReader(in, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (reader == null) {
reader = new InputStreamReader(in);
}
load(reader);
}",0
1362,"public static URL locate(FileSystem fileSystem, String base, String name) {
if (log.isDebugEnabled()) {
StringBuilder buf = new StringBuilder();
buf.append(""ConfigurationUtils.locate(): base is "").append(base);
buf.append("", name is "").append(name);
log.debug(buf.toString());
}
if (name == null) {
return null;
}
URL url = fileSystem.locateFromURL(base, name);
if (url == null) {
File file = new File(name);
if (file.isAbsolute() && file.exists()) {
try {
url = file.toURI().toURL();
log.debug(""Loading configuration from the absolute path "" + name);
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
}
if (url == null) {
try {
File file = DefaultFileSystem.constructFile(base, name);
if (file != null && file.exists()) {
url = file.toURI().toURL();
}
if (url != null) {
log.debug(""Loading configuration from the path "" + file);
}
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
try {
File file = DefaultFileSystem.constructFile(System.getProperty(""user.home""), name);
if (file != null && file.exists()) {
url = file.toURI().toURL();
}
if (url != null) {
log.debug(""Loading configuration from the home path "" + file);
}
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
url = locateFromClasspath(name);
}
return url;
}",0
1363,protected Configuration configuration;,0
1364,"@Override
protected Object performOperation() throws SQLException {
PreparedStatement pstmt = initStatement(String.format(SQL_GET_PROPERTY, table, keyColumn), true, key);
ResultSet rs = pstmt.executeQuery();
return rs.next();
}",0
1365,"@Override
protected Object performOperation() throws SQLException {
PreparedStatement pstmt = initStatement(String.format(SQL_GET_PROPERTY, table, keyColumn), true, key);
ResultSet rs = pstmt.executeQuery();
List<Object> results = new ArrayList<Object>();
while (rs.next()) {
Object value = rs.getObject(valueColumn);
if (isDelimiterParsingDisabled()) {
results.add(value);
} else {
results.addAll(PropertyConverter.flatten(value, getListDelimiter()));
}
}
if (!results.isEmpty()) {
return (results.size() > 1) ? results : results.get(0);
} else {
return null;
}
}",0
1366,"@Override
protected Object performOperation() throws SQLException {
PreparedStatement ps = initStatement(String.format(SQL_IS_EMPTY, table), true);
ResultSet rs = ps.executeQuery();
return rs.next() ? rs.getInt(1) : null;
}",0
1367,"private ReloadingStrategy createReloadingStrategy() {
if (getReloadingStrategy() == null) {
return null;
}
try {
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(getReloadingStrategy());
strategy.setConfiguration(null);
return strategy;
} catch (Exception ex) {
return null;
}
}",0
1368,"private ReloadingStrategy createReloadingStrategy() {
if (getReloadingStrategy() == null) {
return null;
}
try {
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(getReloadingStrategy());
strategy.setConfiguration(null);
return strategy;
} catch (Exception ex) {
return null;
}
}",0
1369,"private AbstractHierarchicalFileConfiguration getConfiguration() {
if (pattern == null) {
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String path = localSubst.replace(pattern);
if (configurationsMap.containsKey(path)) {
return configurationsMap.get(path);
}
if (path.equals(pattern)) {
XMLConfiguration configuration = new XMLConfiguration() {
@Override
public void load() throws ConfigurationException {
}
@Override
public void save() throws ConfigurationException {
}
};
configurationsMap.putIfAbsent(pattern, configuration);
return configuration;
}
XMLConfiguration configuration = new XMLConfiguration();
if (loggerName != null) {
Log log = LogFactory.getLog(loggerName);
if (log != null) {
configuration.setLogger(log);
}
}
configuration.setBasePath(getBasePath());
configuration.setFileName(path);
configuration.setFileSystem(getFileSystem());
configuration.setExpressionEngine(getExpressionEngine());
ReloadingStrategy strategy = createReloadingStrategy();
if (strategy != null) {
configuration.setReloadingStrategy(strategy);
}
configuration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
configuration.setAttributeSplittingDisabled(isAttributeSplittingDisabled());
configuration.setValidating(validating);
configuration.setSchemaValidation(schemaValidation);
configuration.setEntityResolver(entityResolver);
configuration.setListDelimiter(getListDelimiter());
configuration.addConfigurationListener(this);
configuration.addErrorListener(this);
try {
configuration.load();
} catch (ConfigurationException ce) {
if (isThrowable(ce)) {
throw new ConfigurationRuntimeException(ce);
}
}
configurationsMap.putIfAbsent(path, configuration);
return configurationsMap.get(path);
}",0
1370,"@Override
public T getRootNode() {
if (getSubnodeKey() != null) {
try {
NodeList<T> nodes = getParent().fetchNodeList(getSubnodeKey());
if (nodes.size() != 1 || !nodes.isNode(0)) {
setSubnodeKey(null);
} else {
T currentRoot = nodes.getNode(0);
if (currentRoot != rootNode) {
fireEvent(EVENT_SUBNODE_CHANGED, null, null, true);
rootNode = currentRoot;
fireEvent(EVENT_SUBNODE_CHANGED, null, null, false);
}
return currentRoot;
}
} catch (Exception ex) {
setSubnodeKey(null);
}
}
return rootNode;
}",0
1371,"public void load(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}",0
1372,"public void load(InputStream in, String encoding) throws ConfigurationException {
Reader reader = null;
if (encoding != null) {
try {
reader = new InputStreamReader(in, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (reader == null) {
reader = new InputStreamReader(in);
}
load(reader);
}",0
1373,"public T getRootNode() {
if (getSubnodeKey() != null) {
try {
NodeList<T> nodes = getParent().fetchNodeList(getSubnodeKey());
if (nodes.size() != 1 || !nodes.isNode(0)) {
setSubnodeKey(null);
} else {
T currentRoot = nodes.getNode(0);
if (currentRoot != rootNode) {
fireEvent(EVENT_SUBNODE_CHANGED, null, null, true);
rootNode = currentRoot;
fireEvent(EVENT_SUBNODE_CHANGED, null, null, false);
}
return currentRoot;
}
} catch (Exception ex) {
setSubnodeKey(null);
}
}
return rootNode;
}",0
1374,"public String getPublicID() {
return publicID;
}",0
1375,"private CombinedNode constructCombinedNode() {
initSubHandlers();
if (getNumberOfConfigurations() < 1) {
return new CombinedNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
CombinedNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, getNodeHandler(), it.next().getTransformedRoot(), getNodeHandler());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node, getNodeHandler());
getLogger().debug(os.toString());
}
return node;
}
}",0
1376,"private CombinedNode constructCombinedNode() {
initSubHandlers();
if (getNumberOfConfigurations() < 1) {
return new CombinedNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
CombinedNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, getNodeHandler(), it.next().getTransformedRoot(), getNodeHandler());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node, getNodeHandler());
getLogger().debug(os.toString());
}
return node;
}
}",0
1377,"private CombinedNode constructCombinedNode() {
initSubHandlers();
if (getNumberOfConfigurations() < 1) {
return new CombinedNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
CombinedNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, getNodeHandler(), it.next().getTransformedRoot(), getNodeHandler());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node, getNodeHandler());
getLogger().debug(os.toString());
}
return node;
}
}",0
1378,"protected void performReloadCheck() {
for (ConfigData cd : configurations) {
try {
cd.getConfiguration().getProperty(PROP_RELOAD_CHECK);
} catch (Exception ex) {
;
}
}
}",0
1379,"public static File constructFile(String basePath, String fileName) {
File file;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
StringBuilder fName = new StringBuilder();
fName.append(basePath);
if (!basePath.endsWith(File.separator)) {
fName.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
fName.append(fileName.substring(2));
} else {
fName.append(fileName);
}
file = new File(fName.toString());
}
return file;
}",0
1380,"private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File parent = file.getParentFile();
if (parent != null && !parent.exists()) {
parent.mkdirs();
}
}
}
}",0
1381,"private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class[] paramTypes = new Class[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}",0
1382,"private FileSystemOptions getOptions(String scheme) {
FileSystemOptions opts = new FileSystemOptions();
FileSystemConfigBuilder builder;
try {
builder = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}",0
1383,"public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}",0
1384,"final public Object Value() throws ParseException {
Object value = null;
Token token;
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_BEGIN:
value = Array();
{
if (true)
return value;
}
break;
case OBJECT_BEGIN:
value = Object();
{
if (true)
return value;
}
break;
case STRING:
value = String();
{
if (true)
return value;
}
break;
case INTEGER:
token = jj_consume_token(INTEGER);
{
if (true)
return new BigInteger(token.image);
}
break;
case REAL:
token = jj_consume_token(REAL);
{
if (true)
return new BigDecimal(token.image);
}
break;
case TRUE:
token = jj_consume_token(TRUE);
{
if (true)
return Boolean.TRUE;
}
break;
case FALSE:
token = jj_consume_token(FALSE);
{
if (true)
return Boolean.FALSE;
}
break;
case NULL:
token = jj_consume_token(NULL);
{
if (true)
return null;
}
break;
default:
jj_la1[2] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
throw new Error(""Missing return statement in function"");
}",0
1385,"final public ConfigurationNode Property() throws ParseException {
String key = null;
Object value = null;
key = String();
jj_consume_token(SEPARATOR);
value = Value();
ConfigurationNode node = null;
if (value instanceof AbstractHierarchicalConfiguration) {
AbstractHierarchicalConfiguration config = (AbstractHierarchicalConfiguration) value;
node = (ConfigurationNode) config.getRootNode();
node.setName(key);
} else if (value != null) {
node = new DefaultConfigurationNode();
node.setValue(value);
node.setName(key);
}
{
if (true)
return node;
}
throw new Error(""Missing return statement in function"");
}",0
1386,"public void SwitchTo(int lexState) {
if (lexState >= 1 || lexState < 0)
throw new TokenMgrError(""Error: Ignoring invalid lexical state : "" + lexState + "". State unchanged."", TokenMgrError.INVALID_LEXICAL_STATE);
else
curLexState = lexState;
}",0
1387,"public String getMessage() {
if (!specialConstructor) {
return super.getMessage();
}
StringBuffer expected = new StringBuffer();
int maxSize = 0;
for (int i = 0; i < expectedTokenSequences.length; i++) {
if (maxSize < expectedTokenSequences[i].length) {
maxSize = expectedTokenSequences[i].length;
}
for (int j = 0; j < expectedTokenSequences[i].length; j++) {
expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');
}
if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {
expected.append(""..."");
}
expected.append(eol).append(""    "");
}
String retval = ""Encountered \"""";
Token tok = currentToken.next;
for (int i = 0; i < maxSize; i++) {
if (i != 0)
retval += "" "";
if (tok.kind == 0) {
retval += tokenImage[0];
break;
}
retval += "" "" + tokenImage[tok.kind];
retval += "" \"""";
retval += add_escapes(tok.image);
retval += "" \"""";
tok = tok.next;
}
retval += ""\"" at line "" + currentToken.next.beginLine + "", column "" + currentToken.next.beginColumn;
retval += ""."" + eol;
if (expectedTokenSequences.length == 1) {
retval += ""Was expecting:"" + eol + ""    "";
} else {
retval += ""Was expecting one of:"" + eol + ""    "";
}
retval += expected.toString();
return retval;
}",0
1388,"public void ReInit(java.io.InputStream dstream, String encoding, int startline, int startcolumn) throws java.io.UnsupportedEncodingException {
ReInit(dstream, encoding, startline, startcolumn, 4096);
}",0
1389,"public SimpleCharStream(java.io.InputStream dstream, String encoding, int startline, int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException {
this(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
}",0
1390,"public void ReInit(java.io.InputStream dstream, String encoding) throws java.io.UnsupportedEncodingException {
ReInit(dstream, encoding, 1, 1, 4096);
}",0
1391,"public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
}",0
1392,"protected void ExpandBuff(boolean wrapAround) {
char[] newbuffer = new char[bufsize + 2048];
int[] newbufline = new int[bufsize + 2048];
int[] newbufcolumn = new int[bufsize + 2048];
try {
if (wrapAround) {
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
System.arraycopy(buffer, 0, newbuffer, bufsize - tokenBegin, bufpos);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos += (bufsize - tokenBegin));
} else {
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos -= tokenBegin);
}
} catch (Throwable t) {
throw new Error(t.getMessage());
}
bufsize += 2048;
available = bufsize;
tokenBegin = 0;
}",0
1393,"public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
}",0
1394,"public void ReInit(java.io.Reader dstream, int startline, int startcolumn, int buffersize) {
inputStream = dstream;
line = startline;
column = startcolumn - 1;
if (buffer == null || buffersize != buffer.length) {
available = bufsize = buffersize;
buffer = new char[buffersize];
bufline = new int[buffersize];
bufcolumn = new int[buffersize];
}
prevCharIsLF = prevCharIsCR = false;
tokenBegin = inBuf = maxNextCharInd = 0;
bufpos = -1;
}",0
1395,"public void ReInit(java.io.InputStream dstream, String encoding, int startline, int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException {
ReInit(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
}",0
1396,"protected void FillBuff() throws java.io.IOException {
if (maxNextCharInd == available) {
if (available == bufsize) {
if (tokenBegin > 2048) {
bufpos = maxNextCharInd = 0;
available = tokenBegin;
} else if (tokenBegin < 0)
bufpos = maxNextCharInd = 0;
else
ExpandBuff(false);
} else if (available > tokenBegin)
available = bufsize;
else if ((tokenBegin - available) < 2048)
ExpandBuff(true);
else
available = tokenBegin;
}
int i;
try {
if ((i = inputStream.read(buffer, maxNextCharInd, available - maxNextCharInd)) == -1) {
inputStream.close();
throw new java.io.IOException();
} else
maxNextCharInd += i;
return;
} catch (java.io.IOException e) {
--bufpos;
backup(0);
if (tokenBegin == -1)
tokenBegin = bufpos;
throw e;
}
}",0
1397,public int endColumn;,0
1398,public Token specialToken;,0
1399,"final public byte[] Data() throws ParseException {
Token token;
token = jj_consume_token(DATA);
{
if (true)
return filterData(token.image);
}
throw new Error(""Missing return statement in function"");
}",0
1400,"final public ConfigurationNode Property() throws ParseException {
String key = null;
Object value = null;
ConfigurationNode node = new DefaultConfigurationNode();
key = String();
node.setName(key);
jj_consume_token(EQUAL);
value = Element();
node.setValue(value);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DICT_SEPARATOR:
jj_consume_token(DICT_SEPARATOR);
break;
default:
jj_la1[1] = jj_gen;
;
}
{
if (true)
return node;
}
throw new Error(""Missing return statement in function"");
}",0
1401,"private void jj_rescan_token() {
jj_rescan = true;
for (int i = 0; i < 1; i++) {
try {
JJCalls p = jj_2_rtns[i];
do {
if (p.gen > jj_gen) {
jj_la = p.arg;
jj_lastpos = jj_scanpos = p.first;
switch(i) {
case 0:
jj_3_1();
break;
}
}
p = p.next;
} while (p != null);
} catch (LookaheadSuccess ls) {
}
}
jj_rescan = false;
}",0
1402,"final public String String() throws ParseException {
Token token = null;
String value = null;
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case QUOTED_STRING:
token = jj_consume_token(QUOTED_STRING);
{
if (true)
return unescapeQuotes(removeQuotes(token.image));
}
break;
case STRING:
token = jj_consume_token(STRING);
{
if (true)
return token.image;
}
break;
default:
jj_la1[5] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
throw new Error(""Missing return statement in function"");
}",0
1403,"public void SwitchTo(int lexState) {
if (lexState >= 1 || lexState < 0) {
throw new TokenMgrError(""Error: Ignoring invalid lexical state : "" + lexState + "". State unchanged."", TokenMgrError.INVALID_LEXICAL_STATE);
} else {
curLexState = lexState;
}
}",0
1404,"public char BeginToken() throws java.io.IOException {
tokenBegin = -1;
char c = readChar();
tokenBegin = bufpos;
return c;
}",0
1405,"public void ReInit(java.io.Reader dstream, int startline, int startcolumn, int buffersize) {
inputStream = dstream;
line = startline;
column = startcolumn - 1;
if (buffer == null || buffersize != buffer.length) {
available = bufsize = buffersize;
buffer = new char[buffersize];
bufline = new int[buffersize];
bufcolumn = new int[buffersize];
}
prevCharIsLF = prevCharIsCR = false;
tokenBegin = inBuf = maxNextCharInd = 0;
bufpos = -1;
}",0
1406,"public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
}",0
1407,"public SimpleCharStream(java.io.InputStream dstream, String encoding, int startline, int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException {
this(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
}",0
1408,"public void ReInit(java.io.InputStream dstream, String encoding, int startline, int startcolumn) throws java.io.UnsupportedEncodingException {
ReInit(dstream, encoding, startline, startcolumn, 4096);
}",0
1409,"protected void UpdateLineColumn(char c) {
column++;
if (prevCharIsLF) {
prevCharIsLF = false;
line += (column = 1);
} else if (prevCharIsCR) {
prevCharIsCR = false;
if (c == '\n') {
prevCharIsLF = true;
} else
line += (column = 1);
}
switch(c) {
case '\r':
prevCharIsCR = true;
break;
case '\n':
prevCharIsLF = true;
break;
case '\t':
column--;
column += (tabSize - (column % tabSize));
break;
default:
break;
}
bufline[bufpos] = line;
bufcolumn[bufpos] = column;
}",0
1410,public int endLine;,0
1411,public int endColumn;,0
1412,"public void load(Reader in) throws ConfigurationException {
if (!(getRootNode() instanceof PListNode)) {
initRoot();
}
EntityResolver resolver = new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler(getRootNode());
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
1413,"protected String normalizeURI(String uriref) {
StrSubstitutor substitutor = ((CatalogManager) catalogManager).getStrSubstitutor();
String resolved = substitutor != null ? substitutor.replace(uriref) : uriref;
return super.normalizeURI(resolved);
}",0
1414,"public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
Vector catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = (String) catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = ConfigurationUtils.locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}",0
1415,"public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog catalog = staticCatalog;
if (catalog == null || !getUseStaticCatalog()) {
try {
catalog = new Catalog();
catalog.setCatalogManager(this);
catalog.setupReaders();
catalog.loadSystemCatalogs();
} catch (Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = catalog;
}
}
return catalog;
}",0
1416,"public boolean removeNodes(String name) {
if (nodes != null && name != null) {
List<ConfigurationNode> nodes = namedNodes.remove(name);
if (nodes != null) {
detachNodes(nodes);
this.nodes.removeAll(nodes);
return true;
}
}
return false;
}",0
1417,"public boolean removeNode(ConfigurationNode node) {
if (nodes != null && node != null && nodes.contains(node)) {
detachNode(node);
this.nodes.remove(node);
List<ConfigurationNode> nodes = namedNodes.get(node.getName());
if (nodes != null) {
nodes.remove(node);
if (nodes.isEmpty()) {
namedNodes.remove(node.getName());
}
}
return true;
} else {
return false;
}
}",0
1418,"@Override
public void visitBeforeChildren(ImmutableNode node, NodeHandler<ImmutableNode> handler) {
ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
updateNode(node, refHandler);
insertNewChildNodes(node, refHandler);
}",0
1419,"private void insertNewChildNodes(ImmutableNode node, ReferenceNodeHandler refHandler) {
Collection<ImmutableNode> subNodes = new LinkedList<>(refHandler.getChildren(node));
Iterator<ImmutableNode> children = subNodes.iterator();
ImmutableNode sibling1;
ImmutableNode nd = null;
while (children.hasNext()) {
do {
sibling1 = nd;
nd = children.next();
} while (refHandler.getReference(nd) != null && children.hasNext());
if (refHandler.getReference(nd) == null) {
List<ImmutableNode> newNodes = new LinkedList<>();
newNodes.add(nd);
while (children.hasNext()) {
nd = children.next();
if (refHandler.getReference(nd) == null) {
newNodes.add(nd);
} else {
break;
}
}
ImmutableNode sibling2 = (refHandler.getReference(nd) == null) ? null : nd;
for (ImmutableNode insertNode : newNodes) {
if (refHandler.getReference(insertNode) == null) {
insert(insertNode, node, sibling1, sibling2, refHandler);
sibling1 = insertNode;
}
}
}
}
}",0
1420,"private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}",0
1421,"private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}",0
1422,"public static void dump(ImmutableConfiguration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}",0
1423,"public static Synchronizer cloneSynchronizer(Synchronizer sync) {
if (sync == null) {
throw new IllegalArgumentException(""Synchronizer must not be null!"");
}
if (NoOpSynchronizer.INSTANCE == sync) {
return sync;
}
try {
return sync.getClass().newInstance();
} catch (Exception ex) {
LOG.info(""Cannot create new instance of "" + sync.getClass());
}
try {
return (Synchronizer) clone(sync);
} catch (CloneNotSupportedException cnex) {
throw new ConfigurationRuntimeException(""Cannot clone Synchronizer "" + sync);
}
}",0
1424,"public DataSource getDataSource() {
return dataSource;
}",0
1425,"protected PreparedStatement createStatement(String sql, boolean nameCol) throws SQLException {
String statement;
if (nameCol && configurationNameColumn != null) {
StringBuilder buf = new StringBuilder(sql);
buf.append("" AND "").append(configurationNameColumn).append(""=?"");
statement = buf.toString();
} else {
statement = sql;
}
pstmt = getConnection().prepareStatement(statement);
return pstmt;
}",0
1426,"@Override
public void read(InputStream in) throws ConfigurationException, IOException {
load(new InputSource(in));
}",0
1427,private final ImmutableConfiguration configuration;,0
1428,private ConfigurationSourceData sourceData;,0
1429,"private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}",0
1430,private final String protocol;,0
1431,"@Override
public void read(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
1432,"@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}",0
1433,"@Override
protected String normalizeURI(String uriref) {
ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
String resolved = (ci != null) ? String.valueOf(ci.interpolate(uriref)) : uriref;
return super.normalizeURI(resolved);
}",0
1434,private final QueryResult<T> attributeResult;,0
1435,"private void insertNewChildNodes(ImmutableNode node, ReferenceNodeHandler refHandler) {
Collection<ImmutableNode> subNodes = new LinkedList<>(refHandler.getChildren(node));
Iterator<ImmutableNode> children = subNodes.iterator();
ImmutableNode sibling1;
ImmutableNode nd = null;
while (children.hasNext()) {
do {
sibling1 = nd;
nd = children.next();
} while (refHandler.getReference(nd) != null && children.hasNext());
if (refHandler.getReference(nd) == null) {
List<ImmutableNode> newNodes = new LinkedList<>();
newNodes.add(nd);
while (children.hasNext()) {
nd = children.next();
if (refHandler.getReference(nd) == null) {
newNodes.add(nd);
} else {
break;
}
}
ImmutableNode sibling2 = (refHandler.getReference(nd) == null) ? null : nd;
for (ImmutableNode insertNode : newNodes) {
if (refHandler.getReference(insertNode) == null) {
insert(insertNode, node, sibling1, sibling2, refHandler);
sibling1 = insertNode;
}
}
}
}
}",0
1436,"public DataSource getDataSource() {
return dataSource;
}",0
1437,"@Override
public void read(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}",0
1438,"public void save(Document document, Node parent) {
Element properties = document.createElement(""properties"");
parent.appendChild(properties);
if (getHeader() != null) {
Element comment = document.createElement(""comment"");
properties.appendChild(comment);
comment.setTextContent(StringEscapeUtils.escapeXml(getHeader()));
}
Iterator<String> keys = getKeys();
while (keys.hasNext()) {
String key = keys.next();
Object value = getProperty(key);
if (value instanceof List) {
writeProperty(document, properties, key, (List<?>) value);
} else {
writeProperty(document, properties, key, value);
}
}
}",0
1439,private final ImmutableConfiguration configuration;,0
1440,private AutoSaveListener autoSaveListener;,0
1441,private ReloadingController reloadingController;,0
1442,"public static Double toDouble(Object value) throws ConversionException {
Number n = toNumber(value, Double.class);
if (n instanceof Double) {
return (Double) n;
} else {
return new Double(n.doubleValue());
}
}",0
1443,"private FileSystemOptions getOptions(String scheme) {
FileSystemOptions opts = new FileSystemOptions();
FileSystemConfigBuilder builder;
try {
builder = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}",0
1444,"private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}",0
1445,private final String protocol;,0
1446,"@Override
public void read(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
1447,"@Override
public void read(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
1448,"@Override
protected String normalizeURI(String uriref) {
ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
String resolved = (ci != null) ? String.valueOf(ci.interpolate(uriref)) : uriref;
return super.normalizeURI(resolved);
}",0
1449,"private static <T> T[] defensiveCopy(T[] src) {
return (src != null) ? src.clone() : null;
}",0
1450,private final QueryResult<T> attributeResult;,0
1451,"@Override
@SuppressWarnings(""unchecked"")
public NodePointer createNodePointer(NodePointer parent, QName name, Object bean) {
if (bean instanceof NodeWrapper) {
NodeWrapper<?> wrapper = (NodeWrapper<?>) bean;
return new ConfigurationNodePointer((ConfigurationNodePointer) parent, wrapper.getNode(), wrapper.getNodeHandler());
}
return null;
}",0
