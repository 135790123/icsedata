,source,target
0,"@Override
public void end(String namespace, String name) throws Exception {
Object[] parameters;
if (paramCount > 0) {
parameters = getDigester().popParams();
if (getDigester().getLogger().isTraceEnabled()) {
for (int i = 0, size = parameters.length; i < size; i++) {
getDigester().getLogger().trace(format(""[CallMethodRule]{%s} parameters[%s]=%s"", getDigester().getMatch(), i, parameters[i]));
}
}
if (paramCount == 1 && parameters[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
parameters = new Object[] { bodyText };
if (paramTypes.length == 0) {
paramTypes = new Class[] { String.class };
}
} else {
parameters = new Object[0];
paramTypes = new Class<?>[0];
}
Object[] paramValues = new Object[paramTypes.length];
for (int i = 0; i < paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(paramTypes[i]))) {
paramValues[i] = convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (targetOffset >= 0) {
target = getDigester().peek(targetOffset);
} else {
target = getDigester().peek(getDigester().getCount() + targetOffset);
}
if (target == null) {
throw new SAXException(format(""[CallMethodRule]{%s} Call target is null (targetOffset=%s, stackdepth=%s)"", getDigester().getMatch(), targetOffset, getDigester().getCount()));
}
if (getDigester().getLogger().isDebugEnabled()) {
Formatter formatter = new Formatter().format(""[CallMethodRule]{%s} Call %s.%s("", getDigester().getMatch(), target.getClass().getName(), methodName);
for (int i = 0; i < paramValues.length; i++) {
formatter.format(""%s%s/%s"", (i > 0 ? "", "" : """"), paramValues[i], paramTypes[i].getName());
}
formatter.format("")"");
getDigester().getLogger().debug(formatter.toString());
}
Object result = null;
if (useExactMatch) {
result = invokeExactMethod(target, methodName, paramValues, paramTypes);
} else {
result = invokeMethod(target, methodName, paramValues, paramTypes);
}
processMethodCallResult(result);
}",0
1,"public Object[] peekParams(int n) {
int index = (params.size() - 1) - n;
if (index < 0) {
log.warn(""Empty stack (returning null)"");
return (null);
}
try {
return (params.get(index));
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}",0
2,"public Object[] peekParams() {
try {
return (params.peek());
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}",0
3,"public Object[] popParams() {
try {
if (log.isTraceEnabled()) {
log.trace(""Popping params"");
}
return (params.pop());
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}",0
4,"protected final void bindRulesFrom(final Class<?> type) {
if (type == null || type.getPackage().getName().startsWith(JAVA_PACKAGE) || rulesBinder.isAlreadyBound(type)) {
return;
}
visitElements(type);
if (!type.isInterface()) {
visitElements(new PrivilegedAction<Constructor<?>[]>() {
public Constructor<?>[] run() {
return type.getDeclaredConstructors();
}
});
visitElements(new PrivilegedAction<Field[]>() {
public Field[] run() {
return type.getDeclaredFields();
}
});
}
visitElements(new PrivilegedAction<Method[]>() {
public Method[] run() {
return type.getDeclaredMethods();
}
});
rulesBinder.markAsBound(type);
bindRulesFrom(type.getSuperclass());
}",0
5,"protected final void bindRulesFrom(final Class<?> type) {
if (type == null || type.getPackage().getName().startsWith(JAVA_PACKAGE) || rulesBinder.isAlreadyBound(type)) {
return;
}
visitElements(type);
if (!type.isInterface()) {
visitElements(new PrivilegedAction<Constructor<?>[]>() {
public Constructor<?>[] run() {
return type.getDeclaredConstructors();
}
});
visitElements(new PrivilegedAction<Field[]>() {
public Field[] run() {
return type.getDeclaredFields();
}
});
}
visitElements(new PrivilegedAction<Method[]>() {
public Method[] run() {
return type.getDeclaredMethods();
}
});
rulesBinder.markAsBound(type);
bindRulesFrom(type.getSuperclass());
}",0
6,"@SuppressWarnings(""unchecked"")
private <A extends Annotation, E extends AnnotatedElement, R extends Rule> void handle(A annotation, E element) {
Class<?> annotationType = annotation.annotationType();
if (annotationType.isAnnotationPresent(DigesterRuleList.class)) {
Annotation[] annotations = getAnnotationsArrayValue(annotation);
if (annotations != null && annotations.length > 0) {
for (Annotation ptr : annotations) {
handle(ptr, element);
}
}
} else if (annotationType.isAnnotationPresent(DigesterRule.class)) {
DigesterRule digesterRule = annotationType.getAnnotation(DigesterRule.class);
Class<? extends AnnotationHandler<Annotation, AnnotatedElement>> handlerType = (Class<? extends AnnotationHandler<Annotation, AnnotatedElement>>) digesterRule.handledBy();
try {
AnnotationHandler<Annotation, AnnotatedElement> handler = annotationHandlerFactory.newInstance(handlerType);
handler.handle(annotation, element, this.rulesBinder);
} catch (Exception e) {
rulesBinder.addError(e);
}
}
}",0
7,"protected final void bindRulesFrom(final Class<?> type) {
if (type == null || type.getPackage().getName().startsWith(JAVA_PACKAGE) || rulesBinder.isAlreadyBound(type)) {
return;
}
visitElements(type);
if (!type.isInterface()) {
visitElements(new PrivilegedAction<Constructor<?>[]>() {
public Constructor<?>[] run() {
return type.getDeclaredConstructors();
}
});
visitElements(new PrivilegedAction<Field[]>() {
public Field[] run() {
return type.getDeclaredFields();
}
});
}
visitElements(new PrivilegedAction<Method[]>() {
public Method[] run() {
return type.getDeclaredMethods();
}
});
rulesBinder.markAsBound(type);
bindRulesFrom(type.getSuperclass());
}",0
8,"public static Annotation[] getAnnotationsArrayValue(Annotation annotation) {
Object value = getAnnotationValue(annotation);
if (value != null && value.getClass().isArray() && Annotation.class.isAssignableFrom(value.getClass().getComponentType())) {
return (Annotation[]) value;
}
return null;
}",0
9,"@Override
protected FactoryCreateRule createRule() {
if (type == null && attributeName == null && creationFactory == null) {
reportError(""factoryCreate()"", ""at least one between 'className', 'attributeName' or 'creationFactory' has to be specified"");
}
if (type != null || attributeName != null) {
return new FactoryCreateRule(type, attributeName, ignoreCreateExceptions);
}
return new FactoryCreateRule(creationFactory, ignoreCreateExceptions);
}",0
10,"@Override
public void begin(String namespace, String name, Attributes attributes) throws Exception {
String fileName = attributes.getValue(""url"");
if (fileName != null && fileName.length() > 0) {
final URL xmlRulesResource;
if (fileName.startsWith(CLASSPATH_URL_PREFIX)) {
String path = fileName.substring(CLASSPATH_URL_PREFIX.length());
if ('/' == path.charAt(0)) {
path = path.substring(1);
}
xmlRulesResource = this.targetRulesBinder.getContextClassLoader().getResource(path);
if (xmlRulesResource == null) {
targetRulesBinder.addError(""Resource '%s' not found, please make sure it is in the classpath"", path);
return;
}
} else {
try {
xmlRulesResource = new URL(fileName);
} catch (MalformedURLException e) {
targetRulesBinder.addError(""An error occurred while inculing file from '%s': %s"", fileName, e.getMessage());
return;
}
}
if (memoryRulesBinder.getIncludedFiles().add(xmlRulesResource.toString())) {
install(new FromXmlRulesModule() {
@Override
protected void loadRules() {
loadXMLRules(xmlRulesResource);
}
});
} else {
targetRulesBinder.addError(""Circular file inclusion detected for XML rules: %s"", xmlRulesResource);
}
}
String className = attributes.getValue(""class"");
if (className != null && className.length() > 0) {
try {
Class<?> cls = Class.forName(className);
if (!RulesModule.class.isAssignableFrom(cls)) {
targetRulesBinder.addError(""Class '%s' if not a '%s' implementation"", className, RulesModule.class.getName());
return;
}
RulesModule rulesSource = (RulesModule) cls.newInstance();
install(rulesSource);
} catch (Exception e) {
targetRulesBinder.addError(""Impossible to include programmatic rules from class '%s': %s"", className, e.getMessage());
}
}
}",0
11,"protected LinkedRuleBuilder forPattern(String pattern) {
return memoryRulesBinder.forPattern(pattern);
}",0
12,private final List<ErrorMessage> errors;,0
13,"@Override
public String toString() {
Formatter formatter = new Formatter().format(""CallMethodRule[methodName=%s, paramCount=%s, paramTypes={"", this.methodName, this.paramTypes.length);
if (this.paramTypes != null) {
for (int i = 0; i < this.paramTypes.length; i++) {
if (i > 0) {
formatter.format("", "");
}
formatter.format(this.paramTypes[i].getName());
}
}
return formatter.format(""}]"").toString();
}",0
14,"@Override
public void end(String namespace, String name) throws Exception {
Object[] parameters = null;
if (this.paramCount > 0) {
parameters = (Object[]) this.getDigester().popParams();
if (this.getDigester().getLog().isTraceEnabled()) {
Formatter formatter = new Formatter(""[CallMethodRule]"");
for (int i = 0, size = parameters.length; i < size; i++) {
if (i > 0) {
formatter.format("", "");
}
formatter.format(""(%s) %s"", i, parameters[i]);
}
this.getDigester().getLog().trace(formatter.toString());
}
if (this.paramCount == 1 && parameters[0] == null) {
return;
}
} else if (this.paramTypes != null && this.paramTypes.length != 0) {
if (this.bodyText == null) {
return;
}
parameters = new Object[] { this.bodyText };
} else {
}
Object[] paramValues = new Object[this.paramTypes.length];
for (int i = 0; i < this.paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(this.paramTypes[i]))) {
paramValues[i] = ConvertUtils.convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (this.targetOffset >= 0) {
target = this.getDigester().peek(this.targetOffset);
} else {
target = this.getDigester().peek(this.getDigester().getCount() + this.targetOffset);
}
if (target == null) {
throw this.getDigester().createSAXException(String.format(""[CallMethodRule]{%s} Call target is null (targetOffset=%s, stackdepth=%s)"", this.getDigester().getMatch(), this.targetOffset, this.getDigester().getCount()));
}
if (this.getDigester().getLog().isDebugEnabled()) {
Formatter formatter = new Formatter().format(""[CallMethodRule]{%s} Call %s.%s("", this.getDigester().getMatch(), target.getClass().getName(), this.methodName);
for (int i = 0; i < paramValues.length; i++) {
if (i > 0) {
formatter.format("", "");
}
formatter.format(""%s/%s"", (paramValues[i] == null ? ""null"" : paramValues[i].toString()), (this.paramTypes[i] == null ? ""null"" : this.paramTypes[i].getName()));
}
formatter.format("")"");
this.getDigester().getLog().debug(formatter.toString());
}
Object result = null;
if (this.useExactMatch) {
result = MethodUtils.invokeExactMethod(target, this.methodName, paramValues, this.paramTypes);
} else {
result = MethodUtils.invokeMethod(target, this.methodName, paramValues, this.paramTypes);
}
processMethodCallResult(result);
}",0
15,private String currChildNamespaceURI = null;,0
16,"@Override
public void end(String namespace, String name) throws Exception {
Object[] parameters = null;
if (paramCount > 0) {
parameters = getDigester().popParams();
if (getDigester().getLogger().isTraceEnabled()) {
for (int i = 0, size = parameters.length; i < size; i++) {
getDigester().getLogger().trace(""[CallMethodRule]("" + i + "")"" + parameters[i]);
}
}
if (paramCount == 1 && parameters[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
parameters = new Object[1];
parameters[0] = bodyText;
if (paramTypes.length == 0) {
paramTypes = new Class[1];
paramTypes[0] = String.class;
}
} else {
}
Object[] paramValues = new Object[paramTypes.length];
for (int i = 0; i < paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(paramTypes[i]))) {
paramValues[i] = ConvertUtils.convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (targetOffset >= 0) {
target = getDigester().peek(targetOffset);
} else {
target = getDigester().peek(getDigester().getCount() + targetOffset);
}
if (target == null) {
StringBuilder sb = new StringBuilder();
sb.append(""[CallMethodRule]{"");
sb.append(getDigester().getMatch());
sb.append(""} Call target is null ("");
sb.append(""targetOffset="");
sb.append(targetOffset);
sb.append("",stackdepth="");
sb.append(getDigester().getCount());
sb.append("")"");
throw new org.xml.sax.SAXException(sb.toString());
}
if (getDigester().getLogger().isDebugEnabled()) {
StringBuilder sb = new StringBuilder(""[CallMethodRule]{"");
sb.append(getDigester().getMatch());
sb.append(""} Call "");
sb.append(target.getClass().getName());
sb.append(""."");
sb.append(methodName);
sb.append(""("");
for (int i = 0; i < paramValues.length; i++) {
if (i > 0) {
sb.append("","");
}
if (paramValues[i] == null) {
sb.append(""null"");
} else {
sb.append(paramValues[i].toString());
}
sb.append(""/"");
if (paramTypes[i] == null) {
sb.append(""null"");
} else {
sb.append(paramTypes[i].getName());
}
}
sb.append("")"");
getDigester().getLogger().debug(sb.toString());
}
Object result = null;
if (useExactMatch) {
result = MethodUtils.invokeExactMethod(target, methodName, paramValues, paramTypes);
} else {
result = MethodUtils.invokeMethod(target, methodName, paramValues, paramTypes);
}
processMethodCallResult(result);
}",0
17,"@Override
public void end(String namespace, String name) throws Exception {
Object[] parameters = null;
if (paramCount > 0) {
parameters = getDigester().popParams();
if (getDigester().getLogger().isTraceEnabled()) {
for (int i = 0, size = parameters.length; i < size; i++) {
getDigester().getLogger().trace(""[CallMethodRule]("" + i + "")"" + parameters[i]);
}
}
if (paramCount == 1 && parameters[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
parameters = new Object[1];
parameters[0] = bodyText;
if (paramTypes.length == 0) {
paramTypes = new Class[1];
paramTypes[0] = String.class;
}
} else {
}
Object[] paramValues = new Object[paramTypes.length];
for (int i = 0; i < paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(paramTypes[i]))) {
paramValues[i] = ConvertUtils.convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (targetOffset >= 0) {
target = getDigester().peek(targetOffset);
} else {
target = getDigester().peek(getDigester().getCount() + targetOffset);
}
if (target == null) {
StringBuilder sb = new StringBuilder();
sb.append(""[CallMethodRule]{"");
sb.append(getDigester().getMatch());
sb.append(""} Call target is null ("");
sb.append(""targetOffset="");
sb.append(targetOffset);
sb.append("",stackdepth="");
sb.append(getDigester().getCount());
sb.append("")"");
throw new org.xml.sax.SAXException(sb.toString());
}
if (getDigester().getLogger().isDebugEnabled()) {
StringBuilder sb = new StringBuilder(""[CallMethodRule]{"");
sb.append(getDigester().getMatch());
sb.append(""} Call "");
sb.append(target.getClass().getName());
sb.append(""."");
sb.append(methodName);
sb.append(""("");
for (int i = 0; i < paramValues.length; i++) {
if (i > 0) {
sb.append("","");
}
if (paramValues[i] == null) {
sb.append(""null"");
} else {
sb.append(paramValues[i].toString());
}
sb.append(""/"");
if (paramTypes[i] == null) {
sb.append(""null"");
} else {
sb.append(paramTypes[i].getName());
}
}
sb.append("")"");
getDigester().getLogger().debug(sb.toString());
}
Object result = null;
if (useExactMatch) {
result = MethodUtils.invokeExactMethod(target, methodName, paramValues, paramTypes);
} else {
result = MethodUtils.invokeMethod(target, methodName, paramValues, paramTypes);
}
processMethodCallResult(result);
}",0
18,"public Object[] peekParams(int n) {
int index = (params.size() - 1) - n;
if (index < 0) {
log.warn(""Empty stack (returning null)"");
return (null);
}
try {
return (params.get(index));
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}",0
19,"public Object[] popParams() {
try {
if (log.isTraceEnabled()) {
log.trace(""Popping params"");
}
return (params.pop());
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}",0
20,"public Object[] peekParams() {
try {
return (params.peek());
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}",0
21,private String currChildNamespaceURI = null;,0
22,"public MethodArgument(int index, Class<?> parameterType, Annotation[] annotations) {
this.index = index;
this.parameterType = parameterType;
this.annotations = annotations;
}",0
23,"public static Annotation[] getAnnotationsArrayValue(Annotation annotation) {
Object value = getAnnotationValue(annotation);
if (value != null && value.getClass().isArray() && Annotation.class.isAssignableFrom(value.getClass().getComponentType())) {
return (Annotation[]) value;
}
return null;
}",0
24,"@Override
protected FactoryCreateRule createRule() {
if (type == null && attributeName == null && creationFactory == null) {
reportError(""factoryCreate()"", ""at least one between 'className' ar 'attributeName' or 'creationFactory' has to be specified"");
}
if (type != null || attributeName != null) {
return new FactoryCreateRule(type, attributeName, ignoreCreateExceptions);
}
return new FactoryCreateRule(creationFactory, ignoreCreateExceptions);
}",0
25,"public final String DFLT_PLUGIN_ID_ATTR = ""plugin-id"";",0
26,"// TODO: Consider making following four constants static in 2.0
public final String DFLT_PLUGIN_CLASS_ATTR_NS = null;",0
27,"public final String DFLT_PLUGIN_CLASS_ATTR = ""plugin-class"";",0
28,"public static String DFLT_METHOD_ATTR = ""method"";",0
29,"public static String DFLT_RULECLASS_ATTR = ""ruleclass"";",0
30,"public static String DFLT_METHOD_NAME = ""addRules"";",0
31,"public static String DFLT_RULECLASS_SUFFIX = ""RuleInfo"";",0
32,"public static String DFLT_METHOD_NAME = ""addRules"";",0
33,"public static String DFLT_METHOD_NAME = ""addRules"";",0
34,"public static String DFLT_RESOURCE_SUFFIX = ""RuleInfo.xml"";",0
35,"public static String DFLT_FILENAME_ATTR = ""file"";",0
36,"public static String DFLT_METHOD_ATTR = ""method"";",0
37,"public static String DFLT_RESOURCE_ATTR = ""resource"";",0
38,"public static String DFLT_PROPS_ATTR = ""setprops"";",0
39,"public static String DFLT_FALSEVAL = ""false"";",0
40,"public void end() throws Exception {
Object[] parameters = null;
if (paramCount > 0) {
parameters = (Object[]) digester.popParams();
if (digester.log.isTraceEnabled()) {
for (int i = 0, size = parameters.length; i < size; i++) {
digester.log.trace(""[CallMethodRule]("" + i + "")"" + parameters[i]);
}
}
if (paramCount == 1 && parameters[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
parameters = new Object[1];
parameters[0] = bodyText;
if (paramTypes.length == 0) {
paramTypes = new Class[1];
paramTypes[0] = String.class;
}
} else {
;
}
Object[] paramValues = new Object[paramTypes.length];
for (int i = 0; i < paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(paramTypes[i]))) {
paramValues[i] = ConvertUtils.convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (targetOffset >= 0) {
target = digester.peek(targetOffset);
} else {
target = digester.peek(digester.getCount() + targetOffset);
}
if (target == null) {
StringBuffer sb = new StringBuffer();
sb.append(""[CallMethodRule]{"");
sb.append(digester.match);
sb.append(""} Call target is null ("");
sb.append(""targetOffset="");
sb.append(targetOffset);
sb.append("",stackdepth="");
sb.append(digester.getCount());
sb.append("")"");
throw new org.xml.sax.SAXException(sb.toString());
}
if (digester.log.isDebugEnabled()) {
StringBuffer sb = new StringBuffer(""[CallMethodRule]{"");
sb.append(digester.match);
sb.append(""} Call "");
sb.append(target.getClass().getName());
sb.append(""."");
sb.append(methodName);
sb.append(""("");
for (int i = 0; i < paramValues.length; i++) {
if (i > 0) {
sb.append("","");
}
if (paramValues[i] == null) {
sb.append(""null"");
} else {
sb.append(paramValues[i].toString());
}
sb.append(""/"");
if (paramTypes[i] == null) {
sb.append(""null"");
} else {
sb.append(paramTypes[i].getName());
}
}
sb.append("")"");
digester.log.debug(sb.toString());
}
Object result = null;
if (useExactMatch) {
result = MethodUtils.invokeExactMethod(target, methodName, paramValues, paramTypes);
} else {
result = MethodUtils.invokeMethod(target, methodName, paramValues, paramTypes);
}
processMethodCallResult(result);
}",0
41,"public void end() throws Exception {
Object[] parameters = null;
if (paramCount > 0) {
parameters = (Object[]) digester.popParams();
if (digester.log.isTraceEnabled()) {
for (int i = 0, size = parameters.length; i < size; i++) {
digester.log.trace(""[CallMethodRule]("" + i + "")"" + parameters[i]);
}
}
if (paramCount == 1 && parameters[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
parameters = new Object[1];
parameters[0] = bodyText;
if (paramTypes.length == 0) {
paramTypes = new Class[1];
paramTypes[0] = String.class;
}
} else {
;
}
Object[] paramValues = new Object[paramTypes.length];
for (int i = 0; i < paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(paramTypes[i]))) {
paramValues[i] = ConvertUtils.convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (targetOffset >= 0) {
target = digester.peek(targetOffset);
} else {
target = digester.peek(digester.getCount() + targetOffset);
}
if (target == null) {
StringBuffer sb = new StringBuffer();
sb.append(""[CallMethodRule]{"");
sb.append(digester.match);
sb.append(""} Call target is null ("");
sb.append(""targetOffset="");
sb.append(targetOffset);
sb.append("",stackdepth="");
sb.append(digester.getCount());
sb.append("")"");
throw new org.xml.sax.SAXException(sb.toString());
}
if (digester.log.isDebugEnabled()) {
StringBuffer sb = new StringBuffer(""[CallMethodRule]{"");
sb.append(digester.match);
sb.append(""} Call "");
sb.append(target.getClass().getName());
sb.append(""."");
sb.append(methodName);
sb.append(""("");
for (int i = 0; i < paramValues.length; i++) {
if (i > 0) {
sb.append("","");
}
if (paramValues[i] == null) {
sb.append(""null"");
} else {
sb.append(paramValues[i].toString());
}
sb.append(""/"");
if (paramTypes[i] == null) {
sb.append(""null"");
} else {
sb.append(paramTypes[i].getName());
}
}
sb.append("")"");
digester.log.debug(sb.toString());
}
Object result = null;
if (useExactMatch) {
result = MethodUtils.invokeExactMethod(target, methodName, paramValues, paramTypes);
} else {
result = MethodUtils.invokeMethod(target, methodName, paramValues, paramTypes);
}
processMethodCallResult(result);
}",0
42,"public SAXParser getParser() {
if (parser != null) {
return (parser);
}
try {
if (validating && (schemaLocation != null)) {
Properties properties = new Properties();
properties.put(""SAXParserFactory"", getFactory());
if (schemaLocation != null) {
properties.put(""schemaLocation"", schemaLocation);
properties.put(""schemaLanguage"", schemaLanguage);
}
parser = ParserFeatureSetterFactory.newSAXParser(properties);
} else {
parser = getFactory().newSAXParser();
}
} catch (Exception e) {
log.error(""Digester.getParser: "", e);
return (null);
}
return (parser);
}",0
43,"protected String JAXP_SCHEMA_LANGUAGE = ""http://java.sun.com/xml/jaxp/properties/schemaLanguage"";",0
44,protected String namespaceURI = null;,0
45,private String currChildNamespaceURI = null;,0
46,"protected static String JAXP_SCHEMA_LANGUAGE = ""http://java.sun.com/xml/jaxp/properties/schemaLanguage"";",0
47,"protected static Log log = LogFactory.getLog(""org.apache.commons.digester.Digester.sax"");",0
48,protected static String versionNumber = null;,0
49,"protected static Log log = LogFactory.getLog(""org.apache.commons.digester.Digester.sax"");",0
50,"private static String getXercesVersion() {
String versionNumber = ""1.0"";
try {
Class versionClass = Class.forName(""org.apache.xerces.impl.Version"");
Method method = versionClass.getMethod(""getVersion"", (Class[]) null);
String version = (String) method.invoke(null, (Object[]) null);
versionNumber = version.substring(""Xerces-J"".length(), version.lastIndexOf("".""));
} catch (Exception ex) {
}
return versionNumber;
}",0
51,"protected static String XERCES_SCHEMA = ""http://apache.org/xml/features/validation/schema"";",0
52,"protected static String JAXP_SCHEMA_LANGUAGE = ""http://java.sun.com/xml/jaxp/properties/schemaLanguage"";",0
53,protected static float version;,0
54,"protected static String XERCES_DYNAMIC = ""http://apache.org/xml/features/validation/dynamic"";",0
55,public final String DFLT_PLUGIN_ID_ATTR_NS = null;,0
56,"public final String DFLT_PLUGIN_CLASS_ATTR = ""plugin-class"";",0
57,"public final String DFLT_PLUGIN_ID_ATTR = ""plugin-id"";",0
58,"public static String DFLT_METHOD_NAME = ""addRules"";",0
59,"public static String DFLT_METHOD_ATTR = ""method"";",0
60,"public static String DFLT_RULECLASS_ATTR = ""ruleclass"";",0
61,"public static String DFLT_RULECLASS_SUFFIX = ""RuleInfo"";",0
62,"public static String DFLT_METHOD_NAME = ""addRules"";",0
63,"public static String DFLT_METHOD_NAME = ""addRules"";",0
64,"public static String DFLT_RESOURCE_SUFFIX = ""RuleInfo.xml"";",0
65,"public static String DFLT_FILENAME_ATTR = ""file"";",0
66,"public static String DFLT_METHOD_ATTR = ""method"";",0
67,"public static String DFLT_RESOURCE_ATTR = ""resource"";",0
68,"public static String DFLT_PROPS_ATTR = ""setprops"";",0
69,"public static String DFLT_FALSEVAL = ""false"";",0
70,private FromXmlRuleSet ruleSet;,0
71,"private void invoke() throws Exception {
Object child = getChild();
Object parent = getParent();
if (getDigester().getLogger().isDebugEnabled()) {
if (parent == null) {
getDigester().getLogger().debug(format(""[%s]{%s} Call [NULL PARENT].%s(%s)"", getClass().getSimpleName(), getDigester().getMatch(), methodName, child));
} else {
getDigester().getLogger().debug(format(""[%s]{%s} Call %s.%s(%s)"", getClass().getSimpleName(), getDigester().getMatch(), parent.getClass().getName(), methodName, child));
}
}
Class<?>[] paramTypes = new Class<?>[1];
if (paramType != null) {
paramTypes[0] = getDigester().getClassLoader().loadClass(paramTypeName);
} else {
paramTypes[0] = child.getClass();
}
if (useExactMatch) {
invokeExactMethod(parent, methodName, new Object[] { child }, paramTypes);
} else {
invokeMethod(parent, methodName, new Object[] { child }, paramTypes);
}
}",0
72,"@Override
public void end(String namespace, String name) throws Exception {
Object[] parameters;
if (paramCount > 0) {
parameters = getDigester().popParams();
if (getDigester().getLogger().isTraceEnabled()) {
for (int i = 0, size = parameters.length; i < size; i++) {
getDigester().getLogger().trace(format(""[CallMethodRule]{%s} parameters[%s]=%s"", getDigester().getMatch(), i, parameters[i]));
}
}
if (paramCount == 1 && parameters[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
parameters = new Object[] { bodyText };
if (paramTypes.length == 0) {
paramTypes = new Class[] { String.class };
}
} else {
parameters = new Object[0];
paramTypes = new Class<?>[0];
}
Object[] paramValues = new Object[paramTypes.length];
for (int i = 0; i < paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(paramTypes[i]))) {
paramValues[i] = convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (targetOffset >= 0) {
target = getDigester().peek(targetOffset);
} else {
target = getDigester().peek(getDigester().getCount() + targetOffset);
}
if (target == null) {
throw new SAXException(format(""[CallMethodRule]{%s} Call target is null (targetOffset=%s, stackdepth=%s)"", getDigester().getMatch(), targetOffset, getDigester().getCount()));
}
if (getDigester().getLogger().isDebugEnabled()) {
Formatter formatter = new Formatter().format(""[CallMethodRule]{%s} Call %s.%s("", getDigester().getMatch(), target.getClass().getName(), methodName);
for (int i = 0; i < paramValues.length; i++) {
formatter.format(""%s%s/%s"", (i > 0 ? "", "" : """"), paramValues[i], paramTypes[i].getName());
}
formatter.format("")"");
getDigester().getLogger().debug(formatter.toString());
}
Object result = null;
if (useExactMatch) {
result = invokeExactMethod(target, methodName, paramValues, paramTypes);
} else {
result = invokeMethod(target, methodName, paramValues, paramTypes);
}
processMethodCallResult(result);
}",0
73,"public Object[] peekParams() {
try {
return (params.peek());
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}",0
74,"public Object[] popParams() {
try {
if (log.isTraceEnabled()) {
log.trace(""Popping params"");
}
return (params.pop());
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}",0
75,"public Object[] peekParams(int n) {
int index = (params.size() - 1) - n;
if (index < 0) {
log.warn(""Empty stack (returning null)"");
return (null);
}
try {
return (params.get(index));
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}",0
76,"protected final void bindRulesFrom(final Class<?> type) {
if (type == null || type.getPackage().getName().startsWith(JAVA_PACKAGE) || rulesBinder.isAlreadyBound(type)) {
return;
}
visitElements(type);
if (!type.isInterface()) {
visitElements(new PrivilegedAction<Constructor<?>[]>() {
public Constructor<?>[] run() {
return type.getDeclaredConstructors();
}
});
visitElements(new PrivilegedAction<Field[]>() {
public Field[] run() {
return type.getDeclaredFields();
}
});
}
visitElements(new PrivilegedAction<Method[]>() {
public Method[] run() {
return type.getDeclaredMethods();
}
});
rulesBinder.markAsBound(type);
bindRulesFrom(type.getSuperclass());
}",0
77,"protected final void bindRulesFrom(final Class<?> type) {
if (type == null || type.getPackage().getName().startsWith(JAVA_PACKAGE) || rulesBinder.isAlreadyBound(type)) {
return;
}
visitElements(type);
if (!type.isInterface()) {
visitElements(new PrivilegedAction<Constructor<?>[]>() {
public Constructor<?>[] run() {
return type.getDeclaredConstructors();
}
});
visitElements(new PrivilegedAction<Field[]>() {
public Field[] run() {
return type.getDeclaredFields();
}
});
}
visitElements(new PrivilegedAction<Method[]>() {
public Method[] run() {
return type.getDeclaredMethods();
}
});
rulesBinder.markAsBound(type);
bindRulesFrom(type.getSuperclass());
}",0
78,"@SuppressWarnings(""unchecked"")
private <A extends Annotation, E extends AnnotatedElement, R extends Rule> void handle(A annotation, E element) {
Class<?> annotationType = annotation.annotationType();
if (annotationType.isAnnotationPresent(DigesterRuleList.class)) {
Annotation[] annotations = getAnnotationsArrayValue(annotation);
if (annotations != null && annotations.length > 0) {
for (Annotation ptr : annotations) {
handle(ptr, element);
}
}
} else if (annotationType.isAnnotationPresent(DigesterRule.class)) {
DigesterRule digesterRule = annotationType.getAnnotation(DigesterRule.class);
Class<? extends AnnotationHandler<Annotation, AnnotatedElement>> handlerType = (Class<? extends AnnotationHandler<Annotation, AnnotatedElement>>) digesterRule.handledBy();
try {
AnnotationHandler<Annotation, AnnotatedElement> handler = annotationHandlerFactory.newInstance(handlerType);
handler.handle(annotation, element, this.rulesBinder);
} catch (Exception e) {
rulesBinder.addError(e);
}
}
}",0
79,"@SuppressWarnings(""unchecked"")
private <A extends Annotation, E extends AnnotatedElement, R extends Rule> void handle(A annotation, E element) {
Class<?> annotationType = annotation.annotationType();
if (annotationType.isAnnotationPresent(DigesterRuleList.class)) {
Annotation[] annotations = getAnnotationsArrayValue(annotation);
if (annotations != null && annotations.length > 0) {
for (Annotation ptr : annotations) {
handle(ptr, element);
}
}
} else if (annotationType.isAnnotationPresent(DigesterRule.class)) {
DigesterRule digesterRule = annotationType.getAnnotation(DigesterRule.class);
Class<? extends AnnotationHandler<Annotation, AnnotatedElement>> handlerType = (Class<? extends AnnotationHandler<Annotation, AnnotatedElement>>) digesterRule.handledBy();
try {
AnnotationHandler<Annotation, AnnotatedElement> handler = annotationHandlerFactory.newInstance(handlerType);
handler.handle(annotation, element, this.rulesBinder);
} catch (Exception e) {
rulesBinder.addError(e);
}
}
}",0
80,"public static Annotation[] getAnnotationsArrayValue(Annotation annotation) {
Object value = getAnnotationValue(annotation);
if (value != null && value.getClass().isArray() && Annotation.class.isAssignableFrom(value.getClass().getComponentType())) {
return (Annotation[]) value;
}
return null;
}",0
81,"@Override
protected FactoryCreateRule createRule() {
if (type == null && attributeName == null && creationFactory == null) {
reportError(""factoryCreate()"", ""at least one between 'className', 'attributeName' or 'creationFactory' has to be specified"");
}
if (type != null || attributeName != null) {
return new FactoryCreateRule(type, attributeName, ignoreCreateExceptions);
}
return new FactoryCreateRule(creationFactory, ignoreCreateExceptions);
}",0
82,"@Override
public void begin(String namespace, String name, Attributes attributes) throws Exception {
String fileName = attributes.getValue(""url"");
if (fileName != null && fileName.length() > 0) {
final URL xmlRulesResource;
if (fileName.startsWith(CLASSPATH_URL_PREFIX)) {
String path = fileName.substring(CLASSPATH_URL_PREFIX.length());
if ('/' == path.charAt(0)) {
path = path.substring(1);
}
xmlRulesResource = this.targetRulesBinder.getContextClassLoader().getResource(path);
if (xmlRulesResource == null) {
targetRulesBinder.addError(""Resource '%s' not found, please make sure it is in the classpath"", path);
return;
}
} else {
try {
xmlRulesResource = new URL(fileName);
} catch (MalformedURLException e) {
targetRulesBinder.addError(""An error occurred while inculing file from '%s': %s"", fileName, e.getMessage());
return;
}
}
if (memoryRulesBinder.getIncludedFiles().add(xmlRulesResource.toString())) {
install(new FromXmlRulesModule() {
@Override
protected void loadRules() {
loadXMLRules(xmlRulesResource);
}
});
} else {
targetRulesBinder.addError(""Circular file inclusion detected for XML rules: %s"", xmlRulesResource);
}
}
String className = attributes.getValue(""class"");
if (className != null && className.length() > 0) {
try {
Class<?> cls = Class.forName(className);
if (!RulesModule.class.isAssignableFrom(cls)) {
targetRulesBinder.addError(""Class '%s' if not a '%s' implementation"", className, RulesModule.class.getName());
return;
}
RulesModule rulesSource = (RulesModule) cls.newInstance();
install(rulesSource);
} catch (Exception e) {
targetRulesBinder.addError(""Impossible to include programmatic rules from class '%s': %s"", className, e.getMessage());
}
}
}",0
83,"protected LinkedRuleBuilder forPattern(String pattern) {
return memoryRulesBinder.forPattern(pattern);
}",0
84,"@Override
public void end() throws Exception {
Object[] parameters = null;
if (paramCount > 0) {
parameters = (Object[]) digester.popParams();
if (digester.log.isTraceEnabled()) {
for (int i = 0, size = parameters.length; i < size; i++) {
digester.log.trace(""[CallMethodRule]("" + i + "")"" + parameters[i]);
}
}
if (paramCount == 1 && parameters[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
parameters = new Object[1];
parameters[0] = bodyText;
if (paramTypes.length == 0) {
paramTypes = new Class[1];
paramTypes[0] = String.class;
}
} else {
}
Object[] paramValues = new Object[paramTypes.length];
for (int i = 0; i < paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(paramTypes[i]))) {
paramValues[i] = ConvertUtils.convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (targetOffset >= 0) {
target = digester.peek(targetOffset);
} else {
target = digester.peek(digester.getCount() + targetOffset);
}
if (target == null) {
StringBuffer sb = new StringBuffer();
sb.append(""[CallMethodRule]{"");
sb.append(digester.match);
sb.append(""} Call target is null ("");
sb.append(""targetOffset="");
sb.append(targetOffset);
sb.append("",stackdepth="");
sb.append(digester.getCount());
sb.append("")"");
throw new org.xml.sax.SAXException(sb.toString());
}
if (digester.log.isDebugEnabled()) {
StringBuffer sb = new StringBuffer(""[CallMethodRule]{"");
sb.append(digester.match);
sb.append(""} Call "");
sb.append(target.getClass().getName());
sb.append(""."");
sb.append(methodName);
sb.append(""("");
for (int i = 0; i < paramValues.length; i++) {
if (i > 0) {
sb.append("","");
}
if (paramValues[i] == null) {
sb.append(""null"");
} else {
sb.append(paramValues[i].toString());
}
sb.append(""/"");
if (paramTypes[i] == null) {
sb.append(""null"");
} else {
sb.append(paramTypes[i].getName());
}
}
sb.append("")"");
digester.log.debug(sb.toString());
}
Object result = null;
if (useExactMatch) {
result = MethodUtils.invokeExactMethod(target, methodName, paramValues, paramTypes);
} else {
result = MethodUtils.invokeMethod(target, methodName, paramValues, paramTypes);
}
processMethodCallResult(result);
}",0
85,"@Override
public void end() throws Exception {
Object[] parameters = null;
if (paramCount > 0) {
parameters = (Object[]) digester.popParams();
if (digester.log.isTraceEnabled()) {
for (int i = 0, size = parameters.length; i < size; i++) {
digester.log.trace(""[CallMethodRule]("" + i + "")"" + parameters[i]);
}
}
if (paramCount == 1 && parameters[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
parameters = new Object[1];
parameters[0] = bodyText;
if (paramTypes.length == 0) {
paramTypes = new Class[1];
paramTypes[0] = String.class;
}
} else {
}
Object[] paramValues = new Object[paramTypes.length];
for (int i = 0; i < paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(paramTypes[i]))) {
paramValues[i] = ConvertUtils.convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (targetOffset >= 0) {
target = digester.peek(targetOffset);
} else {
target = digester.peek(digester.getCount() + targetOffset);
}
if (target == null) {
StringBuffer sb = new StringBuffer();
sb.append(""[CallMethodRule]{"");
sb.append(digester.match);
sb.append(""} Call target is null ("");
sb.append(""targetOffset="");
sb.append(targetOffset);
sb.append("",stackdepth="");
sb.append(digester.getCount());
sb.append("")"");
throw new org.xml.sax.SAXException(sb.toString());
}
if (digester.log.isDebugEnabled()) {
StringBuffer sb = new StringBuffer(""[CallMethodRule]{"");
sb.append(digester.match);
sb.append(""} Call "");
sb.append(target.getClass().getName());
sb.append(""."");
sb.append(methodName);
sb.append(""("");
for (int i = 0; i < paramValues.length; i++) {
if (i > 0) {
sb.append("","");
}
if (paramValues[i] == null) {
sb.append(""null"");
} else {
sb.append(paramValues[i].toString());
}
sb.append(""/"");
if (paramTypes[i] == null) {
sb.append(""null"");
} else {
sb.append(paramTypes[i].getName());
}
}
sb.append("")"");
digester.log.debug(sb.toString());
}
Object result = null;
if (useExactMatch) {
result = MethodUtils.invokeExactMethod(target, methodName, paramValues, paramTypes);
} else {
result = MethodUtils.invokeMethod(target, methodName, paramValues, paramTypes);
}
processMethodCallResult(result);
}",0
86,"public SAXParser getParser() {
if (parser != null) {
return (parser);
}
try {
if (validating && (schemaLocation != null)) {
Properties properties = new Properties();
properties.put(""SAXParserFactory"", getFactory());
if (schemaLocation != null) {
properties.put(""schemaLocation"", schemaLocation);
properties.put(""schemaLanguage"", schemaLanguage);
}
parser = ParserFeatureSetterFactory.newSAXParser(properties);
} else {
parser = getFactory().newSAXParser();
}
} catch (Exception e) {
log.error(""Digester.getParser: "", e);
return (null);
}
return (parser);
}",0
87,protected String namespaceURI = null;,0
88,private String currChildNamespaceURI = null;,0
89,private final int cacheSize = 255;,0
90,private final int cacheSize = 255;,0
91,"private final Map<Class<?>, FromAnnotationsRuleSet> data = new LinkedHashMap<Class<?>, FromAnnotationsRuleSet>(capacity, loadFactor) {
private static final long serialVersionUID = 1L;
@Override
protected boolean removeEldestEntry(Map.Entry<Class<?>, FromAnnotationsRuleSet> eldest) {
return size() > cacheSize;
}
};",0
92,private final float loadFactor = 0.75f;,0
93,private final float loadFactor = 0.75f;,0
94,"public MethodArgument(int index, Class<?> parameterType, Annotation[] annotations) {
this.index = index;
this.parameterType = parameterType;
this.annotations = annotations;
}",0
95,"public static Annotation[] getAnnotationsArrayValue(Annotation annotation) {
Object value = getAnnotationValue(annotation);
if (value != null && value.getClass().isArray() && Annotation.class.isAssignableFrom(value.getClass().getComponentType())) {
return (Annotation[]) value;
}
return null;
}",0
96,"protected static String JAXP_SCHEMA_LANGUAGE = ""http://java.sun.com/xml/jaxp/properties/schemaLanguage"";",0
97,"protected static Log log = LogFactory.getLog(""org.apache.commons.digester.Digester.sax"");",0
98,protected static float version;,0
99,"protected static String JAXP_SCHEMA_LANGUAGE = ""http://java.sun.com/xml/jaxp/properties/schemaLanguage"";",0
100,"protected static Log log = LogFactory.getLog(""org.apache.commons.digester.Digester.sax"");",0
101,"public static SAXParser newSAXParser(Properties properties) throws ParserConfigurationException, SAXException, SAXNotSupportedException {
SAXParserFactory factory = (SAXParserFactory) properties.get(""SAXParserFactory"");
if (versionNumber == null) {
versionNumber = getXercesVersion();
version = new Float(versionNumber).floatValue();
}
// Note: 2.2 is completely broken (with XML Schema).
if (version > 2.1) {
configureXerces(factory);
return factory.newSAXParser();
} else {
SAXParser parser = factory.newSAXParser();
configureOldXerces(parser, properties);
return parser;
}
}",0
102,"protected static String XERCES_DYNAMIC = ""http://apache.org/xml/features/validation/dynamic"";",0
103,"private static String getXercesVersion() {
String versionNumber = ""1.0"";
try {
Class<?> versionClass = Class.forName(""org.apache.xerces.impl.Version"");
Method method = versionClass.getMethod(""getVersion"", (Class[]) null);
String version = (String) method.invoke(null, (Object[]) null);
versionNumber = version.substring(""Xerces-J"".length(), version.lastIndexOf("".""));
} catch (Exception ex) {
}
return versionNumber;
}",0
104,protected static String versionNumber = null;,0
105,"protected static String XERCES_SCHEMA = ""http://apache.org/xml/features/validation/schema"";",0
106,"public final String DFLT_PLUGIN_CLASS_ATTR = ""plugin-class"";",0
107,public final String DFLT_PLUGIN_ID_ATTR_NS = null;,0
108,"public final String DFLT_PLUGIN_ID_ATTR = ""plugin-id"";",0
109,"public static String DFLT_METHOD_ATTR = ""method"";",0
110,"public static String DFLT_RULECLASS_ATTR = ""ruleclass"";",0
111,"public static String DFLT_METHOD_NAME = ""addRules"";",0
112,"public static String DFLT_RULECLASS_SUFFIX = ""RuleInfo"";",0
113,"public static String DFLT_METHOD_NAME = ""addRules"";",0
114,"public static String DFLT_METHOD_NAME = ""addRules"";",0
115,"public static String DFLT_RESOURCE_SUFFIX = ""RuleInfo.xml"";",0
116,"public static String DFLT_FILENAME_ATTR = ""file"";",0
117,"public static String DFLT_METHOD_ATTR = ""method"";",0
118,"public static String DFLT_RESOURCE_ATTR = ""resource"";",0
119,"public static String DFLT_FALSEVAL = ""false"";",0
120,"public static String DFLT_PROPS_ATTR = ""setprops"";",0
121,"@Override
public String toString() {
Formatter formatter = new Formatter().format(""CallMethodRule[methodName=%s, paramCount=%s, paramTypes={"", this.methodName, this.paramTypes.length);
if (this.paramTypes != null) {
for (int i = 0; i < this.paramTypes.length; i++) {
if (i > 0) {
formatter.format("", "");
}
formatter.format(this.paramTypes[i].getName());
}
}
return formatter.format(""}]"").toString();
}",0
122,"@Override
public void end(String namespace, String name) throws Exception {
Object[] parameters = null;
if (this.paramTypes.length > 0) {
parameters = (Object[]) this.getDigester().popParams();
if (this.getDigester().getLog().isTraceEnabled()) {
Formatter formatter = new Formatter(""[CallMethodRule]"");
for (int i = 0, size = parameters.length; i < size; i++) {
if (i > 0) {
formatter.format("", "");
}
formatter.format(""(%s) %s"", i, parameters[i]);
}
this.getDigester().getLog().trace(formatter.toString());
}
if (this.paramTypes.length == 1 && parameters[0] == null) {
return;
}
} else if (this.paramTypes != null && this.paramTypes.length != 0) {
if (this.bodyText == null) {
return;
}
parameters = new Object[] { this.bodyText };
} else {
}
Object[] paramValues = new Object[this.paramTypes.length];
for (int i = 0; i < this.paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(this.paramTypes[i]))) {
paramValues[i] = ConvertUtils.convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (this.targetOffset >= 0) {
target = this.getDigester().peek(this.targetOffset);
} else {
target = this.getDigester().peek(this.getDigester().getCount() + this.targetOffset);
}
if (target == null) {
throw this.getDigester().createSAXException(String.format(""[CallMethodRule]{%s} Call target is null (targetOffset=%s, stackdepth=%s)"", this.getDigester().getMatch(), this.targetOffset, this.getDigester().getCount()));
}
if (this.getDigester().getLog().isDebugEnabled()) {
Formatter formatter = new Formatter().format(""[CallMethodRule]{%s} Call %s.%s("", this.getDigester().getMatch(), target.getClass().getName(), this.methodName);
for (int i = 0; i < paramValues.length; i++) {
if (i > 0) {
formatter.format("", "");
}
formatter.format(""%s/%s"", (paramValues[i] == null ? ""null"" : paramValues[i].toString()), (this.paramTypes[i] == null ? ""null"" : this.paramTypes[i].getName()));
}
formatter.format("")"");
this.getDigester().getLog().debug(formatter.toString());
}
Object result = null;
if (this.useExactMatch) {
result = MethodUtils.invokeExactMethod(target, this.methodName, paramValues, this.paramTypes);
} else {
result = MethodUtils.invokeMethod(target, this.methodName, paramValues, this.paramTypes);
}
processMethodCallResult(result);
}",0
123,"@Override
public void end(String namespace, String name) throws Exception {
Object[] parameters = null;
if (this.paramTypes.length > 0) {
parameters = (Object[]) this.getDigester().popParams();
if (this.getDigester().getLog().isTraceEnabled()) {
Formatter formatter = new Formatter(""[CallMethodRule]"");
for (int i = 0, size = parameters.length; i < size; i++) {
if (i > 0) {
formatter.format("", "");
}
formatter.format(""(%s) %s"", i, parameters[i]);
}
this.getDigester().getLog().trace(formatter.toString());
}
if (this.paramTypes.length == 1 && parameters[0] == null) {
return;
}
} else if (this.paramTypes != null && this.paramTypes.length != 0) {
if (this.bodyText == null) {
return;
}
parameters = new Object[] { this.bodyText };
} else {
}
Object[] paramValues = new Object[this.paramTypes.length];
for (int i = 0; i < this.paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(this.paramTypes[i]))) {
paramValues[i] = ConvertUtils.convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (this.targetOffset >= 0) {
target = this.getDigester().peek(this.targetOffset);
} else {
target = this.getDigester().peek(this.getDigester().getCount() + this.targetOffset);
}
if (target == null) {
throw this.getDigester().createSAXException(String.format(""[CallMethodRule]{%s} Call target is null (targetOffset=%s, stackdepth=%s)"", this.getDigester().getMatch(), this.targetOffset, this.getDigester().getCount()));
}
if (this.getDigester().getLog().isDebugEnabled()) {
Formatter formatter = new Formatter().format(""[CallMethodRule]{%s} Call %s.%s("", this.getDigester().getMatch(), target.getClass().getName(), this.methodName);
for (int i = 0; i < paramValues.length; i++) {
if (i > 0) {
formatter.format("", "");
}
formatter.format(""%s/%s"", (paramValues[i] == null ? ""null"" : paramValues[i].toString()), (this.paramTypes[i] == null ? ""null"" : this.paramTypes[i].getName()));
}
formatter.format("")"");
this.getDigester().getLog().debug(formatter.toString());
}
Object result = null;
if (this.useExactMatch) {
result = MethodUtils.invokeExactMethod(target, this.methodName, paramValues, this.paramTypes);
} else {
result = MethodUtils.invokeMethod(target, this.methodName, paramValues, this.paramTypes);
}
processMethodCallResult(result);
}",0
124,private final List<ErrorMessage> errors;,0
125,private String currChildNamespaceURI = null;,0
126,"public void end() throws Exception {
Object[] parameters = null;
if (paramCount > 0) {
parameters = (Object[]) digester.popParams();
if (digester.log.isTraceEnabled()) {
for (int i = 0, size = parameters.length; i < size; i++) {
digester.log.trace(""[CallMethodRule]("" + i + "")"" + parameters[i]);
}
}
if (paramCount == 1 && parameters[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
parameters = new Object[1];
parameters[0] = bodyText;
if (paramTypes.length == 0) {
paramTypes = new Class[1];
paramTypes[0] = String.class;
}
} else {
;
}
Object[] paramValues = new Object[paramTypes.length];
for (int i = 0; i < paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(paramTypes[i]))) {
paramValues[i] = ConvertUtils.convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (targetOffset >= 0) {
target = digester.peek(targetOffset);
} else {
target = digester.peek(digester.getCount() + targetOffset);
}
if (target == null) {
StringBuffer sb = new StringBuffer();
sb.append(""[CallMethodRule]{"");
sb.append(digester.match);
sb.append(""} Call target is null ("");
sb.append(""targetOffset="");
sb.append(targetOffset);
sb.append("",stackdepth="");
sb.append(digester.getCount());
sb.append("")"");
throw new org.xml.sax.SAXException(sb.toString());
}
if (digester.log.isDebugEnabled()) {
StringBuffer sb = new StringBuffer(""[CallMethodRule]{"");
sb.append(digester.match);
sb.append(""} Call "");
sb.append(target.getClass().getName());
sb.append(""."");
sb.append(methodName);
sb.append(""("");
for (int i = 0; i < paramValues.length; i++) {
if (i > 0) {
sb.append("","");
}
if (paramValues[i] == null) {
sb.append(""null"");
} else {
sb.append(paramValues[i].toString());
}
sb.append(""/"");
if (paramTypes[i] == null) {
sb.append(""null"");
} else {
sb.append(paramTypes[i].getName());
}
}
sb.append("")"");
digester.log.debug(sb.toString());
}
Object result = null;
if (useExactMatch) {
result = MethodUtils.invokeExactMethod(target, methodName, paramValues, paramTypes);
} else {
result = MethodUtils.invokeMethod(target, methodName, paramValues, paramTypes);
}
processMethodCallResult(result);
}",0
127,"public void end() throws Exception {
Object[] parameters = null;
if (paramCount > 0) {
parameters = (Object[]) digester.popParams();
if (digester.log.isTraceEnabled()) {
for (int i = 0, size = parameters.length; i < size; i++) {
digester.log.trace(""[CallMethodRule]("" + i + "")"" + parameters[i]);
}
}
if (paramCount == 1 && parameters[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
parameters = new Object[1];
parameters[0] = bodyText;
if (paramTypes.length == 0) {
paramTypes = new Class[1];
paramTypes[0] = String.class;
}
} else {
;
}
Object[] paramValues = new Object[paramTypes.length];
for (int i = 0; i < paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(paramTypes[i]))) {
paramValues[i] = ConvertUtils.convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (targetOffset >= 0) {
target = digester.peek(targetOffset);
} else {
target = digester.peek(digester.getCount() + targetOffset);
}
if (target == null) {
StringBuffer sb = new StringBuffer();
sb.append(""[CallMethodRule]{"");
sb.append(digester.match);
sb.append(""} Call target is null ("");
sb.append(""targetOffset="");
sb.append(targetOffset);
sb.append("",stackdepth="");
sb.append(digester.getCount());
sb.append("")"");
throw new org.xml.sax.SAXException(sb.toString());
}
if (digester.log.isDebugEnabled()) {
StringBuffer sb = new StringBuffer(""[CallMethodRule]{"");
sb.append(digester.match);
sb.append(""} Call "");
sb.append(target.getClass().getName());
sb.append(""."");
sb.append(methodName);
sb.append(""("");
for (int i = 0; i < paramValues.length; i++) {
if (i > 0) {
sb.append("","");
}
if (paramValues[i] == null) {
sb.append(""null"");
} else {
sb.append(paramValues[i].toString());
}
sb.append(""/"");
if (paramTypes[i] == null) {
sb.append(""null"");
} else {
sb.append(paramTypes[i].getName());
}
}
sb.append("")"");
digester.log.debug(sb.toString());
}
Object result = null;
if (useExactMatch) {
result = MethodUtils.invokeExactMethod(target, methodName, paramValues, paramTypes);
} else {
result = MethodUtils.invokeMethod(target, methodName, paramValues, paramTypes);
}
processMethodCallResult(result);
}",0
128,"public SAXParser getParser() {
if (parser != null) {
return (parser);
}
try {
if (validating && (schemaLocation != null)) {
Properties properties = new Properties();
properties.put(""SAXParserFactory"", getFactory());
if (schemaLocation != null) {
properties.put(""schemaLocation"", schemaLocation);
properties.put(""schemaLanguage"", schemaLanguage);
}
parser = ParserFeatureSetterFactory.newSAXParser(properties);
} else {
parser = getFactory().newSAXParser();
}
} catch (Exception e) {
log.error(""Digester.getParser: "", e);
return (null);
}
return (parser);
}",0
129,"public InputSource resolveEntity(String publicId, String systemId) throws SAXException {
if (saxLog.isDebugEnabled()) {
saxLog.debug(""resolveEntity('"" + publicId + ""', '"" + systemId + ""')"");
}
if (publicId != null)
this.publicId = publicId;
String entityURL = null;
if (publicId != null) {
entityURL = (String) entityValidator.get(publicId);
}
if (schemaLocation != null && entityURL == null && systemId != null) {
entityURL = (String) entityValidator.get(systemId);
}
if (entityURL == null) {
if (systemId == null) {
if (log.isDebugEnabled()) {
log.debug("" Cannot resolve entity: '"" + entityURL + ""'"");
}
return (null);
} else {
if (log.isDebugEnabled()) {
log.debug("" Trying to resolve using system ID '"" + systemId + ""'"");
}
entityURL = systemId;
}
}
if (log.isDebugEnabled()) {
log.debug("" Resolving to alternate DTD '"" + entityURL + ""'"");
}
try {
return createInputSourceFromURL(entityURL);
} catch (Exception e) {
throw createSAXException(e);
}
}",0
130,protected String namespaceURI = null;,0
131,private String currChildNamespaceURI = null;,0
132,"protected static Log log = LogFactory.getLog(""org.apache.commons.digester.Digester.sax"");",0
133,"protected static String JAXP_SCHEMA_LANGUAGE = ""http://java.sun.com/xml/jaxp/properties/schemaLanguage"";",0
134,"protected static String XERCES_SCHEMA = ""http://apache.org/xml/features/validation/schema"";",0
135,"protected static String JAXP_SCHEMA_LANGUAGE = ""http://java.sun.com/xml/jaxp/properties/schemaLanguage"";",0
136,"protected static String XERCES_DYNAMIC = ""http://apache.org/xml/features/validation/dynamic"";",0
137,"protected static Log log = LogFactory.getLog(""org.apache.commons.digester.Digester.sax"");",0
138,protected static float version;,0
139,"private static String getXercesVersion() {
String versionNumber = ""1.0"";
try {
Class versionClass = Class.forName(""org.apache.xerces.impl.Version"");
Method method = versionClass.getMethod(""getVersion"", (Class[]) null);
String version = (String) method.invoke(null, (Object[]) null);
versionNumber = version.substring(""Xerces-J"".length(), version.lastIndexOf("".""));
} catch (Exception ex) {
}
return versionNumber;
}",0
140,"public static SAXParser newSAXParser(Properties properties) throws ParserConfigurationException, SAXException, SAXNotSupportedException {
SAXParserFactory factory = (SAXParserFactory) properties.get(""SAXParserFactory"");
if (versionNumber == null) {
versionNumber = getXercesVersion();
version = new Float(versionNumber).floatValue();
}
// Note: 2.2 is completely broken (with XML Schema).
if (version > 2.1) {
configureXerces(factory);
return factory.newSAXParser();
} else {
SAXParser parser = factory.newSAXParser();
configureOldXerces(parser, properties);
return parser;
}
}",0
141,protected static String versionNumber = null;,0
142,public final String DFLT_PLUGIN_ID_ATTR_NS = null;,0
143,"public final String DFLT_PLUGIN_CLASS_ATTR = ""plugin-class"";",0
144,"public final String DFLT_PLUGIN_ID_ATTR = ""plugin-id"";",0
145,"public static String DFLT_RULECLASS_ATTR = ""ruleclass"";",0
146,"public static String DFLT_METHOD_ATTR = ""method"";",0
147,"public static String DFLT_METHOD_NAME = ""addRules"";",0
148,"public static String DFLT_RULECLASS_SUFFIX = ""RuleInfo"";",0
149,"public static String DFLT_METHOD_NAME = ""addRules"";",0
150,"public static String DFLT_METHOD_NAME = ""addRules"";",0
151,"public static String DFLT_RESOURCE_SUFFIX = ""RuleInfo.xml"";",0
152,"public static String DFLT_FILENAME_ATTR = ""file"";",0
153,"public static String DFLT_METHOD_ATTR = ""method"";",0
154,"public static String DFLT_RESOURCE_ATTR = ""resource"";",0
155,"public static String DFLT_PROPS_ATTR = ""setprops"";",0
156,"public static String DFLT_FALSEVAL = ""false"";",0
157,private FromXmlRuleSet ruleSet;,0
158,"public void end() throws Exception {
Object[] parameters = null;
if (paramCount > 0) {
parameters = (Object[]) digester.popParams();
if (digester.log.isTraceEnabled()) {
for (int i = 0, size = parameters.length; i < size; i++) {
digester.log.trace(""[CallMethodRule]("" + i + "")"" + parameters[i]);
}
}
if (paramCount == 1 && parameters[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
parameters = new Object[1];
parameters[0] = bodyText;
if (paramTypes.length == 0) {
paramTypes = new Class[1];
paramTypes[0] = String.class;
}
} else {
;
}
Object[] paramValues = new Object[paramTypes.length];
for (int i = 0; i < paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(paramTypes[i]))) {
paramValues[i] = ConvertUtils.convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (targetOffset >= 0) {
target = digester.peek(targetOffset);
} else {
target = digester.peek(digester.getCount() + targetOffset);
}
if (target == null) {
StringBuffer sb = new StringBuffer();
sb.append(""[CallMethodRule]{"");
sb.append(digester.match);
sb.append(""} Call target is null ("");
sb.append(""targetOffset="");
sb.append(targetOffset);
sb.append("",stackdepth="");
sb.append(digester.getCount());
sb.append("")"");
throw new org.xml.sax.SAXException(sb.toString());
}
if (digester.log.isDebugEnabled()) {
StringBuffer sb = new StringBuffer(""[CallMethodRule]{"");
sb.append(digester.match);
sb.append(""} Call "");
sb.append(target.getClass().getName());
sb.append(""."");
sb.append(methodName);
sb.append(""("");
for (int i = 0; i < paramValues.length; i++) {
if (i > 0) {
sb.append("","");
}
if (paramValues[i] == null) {
sb.append(""null"");
} else {
sb.append(paramValues[i].toString());
}
sb.append(""/"");
if (paramTypes[i] == null) {
sb.append(""null"");
} else {
sb.append(paramTypes[i].getName());
}
}
sb.append("")"");
digester.log.debug(sb.toString());
}
Object result = null;
if (useExactMatch) {
result = MethodUtils.invokeExactMethod(target, methodName, paramValues, paramTypes);
} else {
result = MethodUtils.invokeMethod(target, methodName, paramValues, paramTypes);
}
processMethodCallResult(result);
}",0
159,"public void end() throws Exception {
Object[] parameters = null;
if (paramCount > 0) {
parameters = (Object[]) digester.popParams();
if (digester.log.isTraceEnabled()) {
for (int i = 0, size = parameters.length; i < size; i++) {
digester.log.trace(""[CallMethodRule]("" + i + "")"" + parameters[i]);
}
}
if (paramCount == 1 && parameters[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
parameters = new Object[1];
parameters[0] = bodyText;
if (paramTypes.length == 0) {
paramTypes = new Class[1];
paramTypes[0] = String.class;
}
} else {
;
}
Object[] paramValues = new Object[paramTypes.length];
for (int i = 0; i < paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(paramTypes[i]))) {
paramValues[i] = ConvertUtils.convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (targetOffset >= 0) {
target = digester.peek(targetOffset);
} else {
target = digester.peek(digester.getCount() + targetOffset);
}
if (target == null) {
StringBuffer sb = new StringBuffer();
sb.append(""[CallMethodRule]{"");
sb.append(digester.match);
sb.append(""} Call target is null ("");
sb.append(""targetOffset="");
sb.append(targetOffset);
sb.append("",stackdepth="");
sb.append(digester.getCount());
sb.append("")"");
throw new org.xml.sax.SAXException(sb.toString());
}
if (digester.log.isDebugEnabled()) {
StringBuffer sb = new StringBuffer(""[CallMethodRule]{"");
sb.append(digester.match);
sb.append(""} Call "");
sb.append(target.getClass().getName());
sb.append(""."");
sb.append(methodName);
sb.append(""("");
for (int i = 0; i < paramValues.length; i++) {
if (i > 0) {
sb.append("","");
}
if (paramValues[i] == null) {
sb.append(""null"");
} else {
sb.append(paramValues[i].toString());
}
sb.append(""/"");
if (paramTypes[i] == null) {
sb.append(""null"");
} else {
sb.append(paramTypes[i].getName());
}
}
sb.append("")"");
digester.log.debug(sb.toString());
}
Object result = null;
if (useExactMatch) {
result = MethodUtils.invokeExactMethod(target, methodName, paramValues, paramTypes);
} else {
result = MethodUtils.invokeMethod(target, methodName, paramValues, paramTypes);
}
processMethodCallResult(result);
}",0
160,"public SAXParser getParser() {
if (parser != null) {
return (parser);
}
try {
if (validating && (schemaLocation != null)) {
Properties properties = new Properties();
properties.put(""SAXParserFactory"", getFactory());
if (schemaLocation != null) {
properties.put(""schemaLocation"", schemaLocation);
properties.put(""schemaLanguage"", schemaLanguage);
}
parser = ParserFeatureSetterFactory.newSAXParser(properties);
} else {
parser = getFactory().newSAXParser();
}
} catch (Exception e) {
log.error(""Digester.getParser: "", e);
return (null);
}
return (parser);
}",0
161,"protected String JAXP_SCHEMA_LANGUAGE = ""http://java.sun.com/xml/jaxp/properties/schemaLanguage"";",0
162,protected String namespaceURI = null;,0
163,private String currChildNamespaceURI = null;,0
164,"protected static String JAXP_SCHEMA_LANGUAGE = ""http://java.sun.com/xml/jaxp/properties/schemaLanguage"";",0
165,"protected static Log log = LogFactory.getLog(""org.apache.commons.digester.Digester.sax"");",0
166,"protected static String XERCES_SCHEMA = ""http://apache.org/xml/features/validation/schema"";",0
167,"private static String getXercesVersion() {
String versionNumber = ""1.0"";
try {
Class versionClass = Class.forName(""org.apache.xerces.impl.Version"");
Method method = versionClass.getMethod(""getVersion"", (Class[]) null);
String version = (String) method.invoke(null, (Object[]) null);
versionNumber = version.substring(""Xerces-J"".length(), version.lastIndexOf("".""));
} catch (Exception ex) {
}
return versionNumber;
}",0
168,"protected static Log log = LogFactory.getLog(""org.apache.commons.digester.Digester.sax"");",0
169,"protected static String JAXP_SCHEMA_LANGUAGE = ""http://java.sun.com/xml/jaxp/properties/schemaLanguage"";",0
170,protected static String versionNumber = null;,0
171,protected static float version;,0
172,"protected static String XERCES_DYNAMIC = ""http://apache.org/xml/features/validation/dynamic"";",0
173,"public final String DFLT_PLUGIN_ID_ATTR = ""plugin-id"";",0
174,"public final String DFLT_PLUGIN_CLASS_ATTR = ""plugin-class"";",0
175,public final String DFLT_PLUGIN_ID_ATTR_NS = null;,0
176,"public static String DFLT_RULECLASS_ATTR = ""ruleclass"";",0
177,"public static String DFLT_METHOD_NAME = ""addRules"";",0
178,"public static String DFLT_METHOD_ATTR = ""method"";",0
179,"public static String DFLT_RULECLASS_SUFFIX = ""RuleInfo"";",0
180,"public static String DFLT_METHOD_NAME = ""addRules"";",0
181,"public static String DFLT_METHOD_NAME = ""addRules"";",0
182,"public static String DFLT_RESOURCE_SUFFIX = ""RuleInfo.xml"";",0
183,"public static String DFLT_FILENAME_ATTR = ""file"";",0
184,"public static String DFLT_METHOD_ATTR = ""method"";",0
185,"public static String DFLT_RESOURCE_ATTR = ""resource"";",0
186,"public static String DFLT_PROPS_ATTR = ""setprops"";",0
187,"public static String DFLT_FALSEVAL = ""false"";",0
188,private FromXmlRuleSet ruleSet;,0
189,private final List<ErrorMessage> errors;,0
190,"@Override
public void end(String namespace, String name) throws Exception {
Object[] parameters;
if (paramCount > 0) {
parameters = getDigester().popParams();
if (getDigester().getLogger().isTraceEnabled()) {
for (int i = 0, size = parameters.length; i < size; i++) {
getDigester().getLogger().trace(format(""[CallMethodRule]{%s} parameters[%s]=%s"", getDigester().getMatch(), i, parameters[i]));
}
}
if (paramCount == 1 && parameters[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
parameters = new Object[] { bodyText };
if (paramTypes.length == 0) {
paramTypes = new Class[] { String.class };
}
} else {
parameters = new Object[0];
paramTypes = new Class<?>[0];
}
Object[] paramValues = new Object[paramTypes.length];
for (int i = 0; i < paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(paramTypes[i]))) {
paramValues[i] = convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (targetOffset >= 0) {
target = getDigester().peek(targetOffset);
} else {
target = getDigester().peek(getDigester().getCount() + targetOffset);
}
if (target == null) {
throw new SAXException(format(""[CallMethodRule]{%s} Call target is null (targetOffset=%s, stackdepth=%s)"", getDigester().getMatch(), targetOffset, getDigester().getCount()));
}
if (getDigester().getLogger().isDebugEnabled()) {
Formatter formatter = new Formatter().format(""[CallMethodRule]{%s} Call %s.%s("", getDigester().getMatch(), target.getClass().getName(), methodName);
for (int i = 0; i < paramValues.length; i++) {
formatter.format(""%s%s/%s"", (i > 0 ? "", "" : """"), paramValues[i], paramTypes[i].getName());
}
formatter.format("")"");
getDigester().getLogger().debug(formatter.toString());
}
Object result = null;
if (useExactMatch) {
result = invokeExactMethod(target, methodName, paramValues, paramTypes);
} else {
result = invokeMethod(target, methodName, paramValues, paramTypes);
}
processMethodCallResult(result);
}",0
191,"public Object[] peekParams() {
try {
return (params.peek());
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}",0
192,"public Object[] peekParams(int n) {
int index = (params.size() - 1) - n;
if (index < 0) {
log.warn(""Empty stack (returning null)"");
return (null);
}
try {
return (params.get(index));
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}",0
193,"public Object[] popParams() {
try {
if (log.isTraceEnabled()) {
log.trace(""Popping params"");
}
return (params.pop());
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}",0
194,"protected final void bindRulesFrom(final Class<?> type) {
if (type == null || type.getPackage().getName().startsWith(JAVA_PACKAGE) || rulesBinder.isAlreadyBound(type)) {
return;
}
visitElements(type);
if (!type.isInterface()) {
visitElements(new PrivilegedAction<Constructor<?>[]>() {
public Constructor<?>[] run() {
return type.getDeclaredConstructors();
}
});
visitElements(new PrivilegedAction<Field[]>() {
public Field[] run() {
return type.getDeclaredFields();
}
});
}
visitElements(new PrivilegedAction<Method[]>() {
public Method[] run() {
return type.getDeclaredMethods();
}
});
rulesBinder.markAsBound(type);
bindRulesFrom(type.getSuperclass());
}",0
195,"protected final void bindRulesFrom(final Class<?> type) {
if (type == null || type.getPackage().getName().startsWith(JAVA_PACKAGE) || rulesBinder.isAlreadyBound(type)) {
return;
}
visitElements(type);
if (!type.isInterface()) {
visitElements(new PrivilegedAction<Constructor<?>[]>() {
public Constructor<?>[] run() {
return type.getDeclaredConstructors();
}
});
visitElements(new PrivilegedAction<Field[]>() {
public Field[] run() {
return type.getDeclaredFields();
}
});
}
visitElements(new PrivilegedAction<Method[]>() {
public Method[] run() {
return type.getDeclaredMethods();
}
});
rulesBinder.markAsBound(type);
bindRulesFrom(type.getSuperclass());
}",0
196,"@SuppressWarnings(""unchecked"")
private <A extends Annotation, E extends AnnotatedElement, R extends Rule> void handle(A annotation, E element) {
Class<?> annotationType = annotation.annotationType();
if (annotationType.isAnnotationPresent(DigesterRuleList.class)) {
Annotation[] annotations = getAnnotationsArrayValue(annotation);
if (annotations != null && annotations.length > 0) {
for (Annotation ptr : annotations) {
handle(ptr, element);
}
}
} else if (annotationType.isAnnotationPresent(DigesterRule.class)) {
DigesterRule digesterRule = annotationType.getAnnotation(DigesterRule.class);
Class<? extends AnnotationHandler<Annotation, AnnotatedElement>> handlerType = (Class<? extends AnnotationHandler<Annotation, AnnotatedElement>>) digesterRule.handledBy();
try {
AnnotationHandler<Annotation, AnnotatedElement> handler = annotationHandlerFactory.newInstance(handlerType);
handler.handle(annotation, element, this.rulesBinder);
} catch (Exception e) {
rulesBinder.addError(e);
}
}
}",0
197,"public static Annotation[] getAnnotationsArrayValue(Annotation annotation) {
Object value = getAnnotationValue(annotation);
if (value != null && value.getClass().isArray() && Annotation.class.isAssignableFrom(value.getClass().getComponentType())) {
return (Annotation[]) value;
}
return null;
}",0
198,"@Override
protected FactoryCreateRule createRule() {
if (type == null && attributeName == null && creationFactory == null) {
reportError(""factoryCreate()"", ""at least one between 'className', 'attributeName' or 'creationFactory' has to be specified"");
}
if (type != null || attributeName != null) {
return new FactoryCreateRule(type, attributeName, ignoreCreateExceptions);
}
return new FactoryCreateRule(creationFactory, ignoreCreateExceptions);
}",0
199,"@Override
public void begin(String namespace, String name, Attributes attributes) throws Exception {
String fileName = attributes.getValue(""url"");
if (fileName != null && fileName.length() > 0) {
final URL xmlRulesResource;
if (fileName.startsWith(CLASSPATH_URL_PREFIX)) {
String path = fileName.substring(CLASSPATH_URL_PREFIX.length());
if ('/' == path.charAt(0)) {
path = path.substring(1);
}
xmlRulesResource = this.targetRulesBinder.getContextClassLoader().getResource(path);
if (xmlRulesResource == null) {
targetRulesBinder.addError(""Resource '%s' not found, please make sure it is in the classpath"", path);
return;
}
} else {
try {
xmlRulesResource = new URL(fileName);
} catch (MalformedURLException e) {
targetRulesBinder.addError(""An error occurred while inculing file from '%s': %s"", fileName, e.getMessage());
return;
}
}
if (memoryRulesBinder.getIncludedFiles().add(xmlRulesResource.toString())) {
install(new FromXmlRulesModule() {
@Override
protected void loadRules() {
loadXMLRules(xmlRulesResource);
}
});
} else {
targetRulesBinder.addError(""Circular file inclusion detected for XML rules: %s"", xmlRulesResource);
}
}
String className = attributes.getValue(""class"");
if (className != null && className.length() > 0) {
try {
Class<?> cls = Class.forName(className);
if (!RulesModule.class.isAssignableFrom(cls)) {
targetRulesBinder.addError(""Class '%s' if not a '%s' implementation"", className, RulesModule.class.getName());
return;
}
RulesModule rulesSource = (RulesModule) cls.newInstance();
install(rulesSource);
} catch (Exception e) {
targetRulesBinder.addError(""Impossible to include programmatic rules from class '%s': %s"", className, e.getMessage());
}
}
}",0
200,"protected LinkedRuleBuilder forPattern(String pattern) {
return memoryRulesBinder.forPattern(pattern);
}",0
201,"@Override
public void end() throws Exception {
Object[] parameters = null;
if (paramCount > 0) {
parameters = (Object[]) digester.popParams();
if (digester.log.isTraceEnabled()) {
for (int i = 0, size = parameters.length; i < size; i++) {
digester.log.trace(""[CallMethodRule]("" + i + "")"" + parameters[i]);
}
}
if (paramCount == 1 && parameters[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
parameters = new Object[1];
parameters[0] = bodyText;
if (paramTypes.length == 0) {
paramTypes = new Class[1];
paramTypes[0] = String.class;
}
} else {
}
Object[] paramValues = new Object[paramTypes.length];
for (int i = 0; i < paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(paramTypes[i]))) {
paramValues[i] = ConvertUtils.convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (targetOffset >= 0) {
target = digester.peek(targetOffset);
} else {
target = digester.peek(digester.getCount() + targetOffset);
}
if (target == null) {
StringBuffer sb = new StringBuffer();
sb.append(""[CallMethodRule]{"");
sb.append(digester.match);
sb.append(""} Call target is null ("");
sb.append(""targetOffset="");
sb.append(targetOffset);
sb.append("",stackdepth="");
sb.append(digester.getCount());
sb.append("")"");
throw new org.xml.sax.SAXException(sb.toString());
}
if (digester.log.isDebugEnabled()) {
StringBuffer sb = new StringBuffer(""[CallMethodRule]{"");
sb.append(digester.match);
sb.append(""} Call "");
sb.append(target.getClass().getName());
sb.append(""."");
sb.append(methodName);
sb.append(""("");
for (int i = 0; i < paramValues.length; i++) {
if (i > 0) {
sb.append("","");
}
if (paramValues[i] == null) {
sb.append(""null"");
} else {
sb.append(paramValues[i].toString());
}
sb.append(""/"");
if (paramTypes[i] == null) {
sb.append(""null"");
} else {
sb.append(paramTypes[i].getName());
}
}
sb.append("")"");
digester.log.debug(sb.toString());
}
Object result = null;
if (useExactMatch) {
result = MethodUtils.invokeExactMethod(target, methodName, paramValues, paramTypes);
} else {
result = MethodUtils.invokeMethod(target, methodName, paramValues, paramTypes);
}
processMethodCallResult(result);
}",0
202,"@Override
public void end() throws Exception {
Object[] parameters = null;
if (paramCount > 0) {
parameters = (Object[]) digester.popParams();
if (digester.log.isTraceEnabled()) {
for (int i = 0, size = parameters.length; i < size; i++) {
digester.log.trace(""[CallMethodRule]("" + i + "")"" + parameters[i]);
}
}
if (paramCount == 1 && parameters[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
parameters = new Object[1];
parameters[0] = bodyText;
if (paramTypes.length == 0) {
paramTypes = new Class[1];
paramTypes[0] = String.class;
}
} else {
}
Object[] paramValues = new Object[paramTypes.length];
for (int i = 0; i < paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(paramTypes[i]))) {
paramValues[i] = ConvertUtils.convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (targetOffset >= 0) {
target = digester.peek(targetOffset);
} else {
target = digester.peek(digester.getCount() + targetOffset);
}
if (target == null) {
StringBuffer sb = new StringBuffer();
sb.append(""[CallMethodRule]{"");
sb.append(digester.match);
sb.append(""} Call target is null ("");
sb.append(""targetOffset="");
sb.append(targetOffset);
sb.append("",stackdepth="");
sb.append(digester.getCount());
sb.append("")"");
throw new org.xml.sax.SAXException(sb.toString());
}
if (digester.log.isDebugEnabled()) {
StringBuffer sb = new StringBuffer(""[CallMethodRule]{"");
sb.append(digester.match);
sb.append(""} Call "");
sb.append(target.getClass().getName());
sb.append(""."");
sb.append(methodName);
sb.append(""("");
for (int i = 0; i < paramValues.length; i++) {
if (i > 0) {
sb.append("","");
}
if (paramValues[i] == null) {
sb.append(""null"");
} else {
sb.append(paramValues[i].toString());
}
sb.append(""/"");
if (paramTypes[i] == null) {
sb.append(""null"");
} else {
sb.append(paramTypes[i].getName());
}
}
sb.append("")"");
digester.log.debug(sb.toString());
}
Object result = null;
if (useExactMatch) {
result = MethodUtils.invokeExactMethod(target, methodName, paramValues, paramTypes);
} else {
result = MethodUtils.invokeMethod(target, methodName, paramValues, paramTypes);
}
processMethodCallResult(result);
}",0
203,"public SAXParser getParser() {
if (parser != null) {
return (parser);
}
try {
if (validating && (schemaLocation != null)) {
Properties properties = new Properties();
properties.put(""SAXParserFactory"", getFactory());
if (schemaLocation != null) {
properties.put(""schemaLocation"", schemaLocation);
properties.put(""schemaLanguage"", schemaLanguage);
}
parser = ParserFeatureSetterFactory.newSAXParser(properties);
} else {
parser = getFactory().newSAXParser();
}
} catch (Exception e) {
log.error(""Digester.getParser: "", e);
return (null);
}
return (parser);
}",0
204,protected String namespaceURI = null;,0
205,private String currChildNamespaceURI = null;,0
206,private final int cacheSize = 255;,0
207,private final int cacheSize = 255;,0
208,private final float loadFactor = 0.75f;,0
209,"private final Map<Class<?>, FromAnnotationsRuleSet> data = new LinkedHashMap<Class<?>, FromAnnotationsRuleSet>(capacity, loadFactor) {
private static final long serialVersionUID = 1L;
@Override
protected boolean removeEldestEntry(Map.Entry<Class<?>, FromAnnotationsRuleSet> eldest) {
return size() > cacheSize;
}
};",0
210,"public MethodArgument(int index, Class<?> parameterType, Annotation[] annotations) {
this.index = index;
this.parameterType = parameterType;
this.annotations = annotations;
}",0
211,"public static Annotation[] getAnnotationsArrayValue(Annotation annotation) {
Object value = getAnnotationValue(annotation);
if (value != null && value.getClass().isArray() && Annotation.class.isAssignableFrom(value.getClass().getComponentType())) {
return (Annotation[]) value;
}
return null;
}",0
212,"protected static Log log = LogFactory.getLog(""org.apache.commons.digester.Digester.sax"");",0
213,"protected static String JAXP_SCHEMA_LANGUAGE = ""http://java.sun.com/xml/jaxp/properties/schemaLanguage"";",0
214,"public static SAXParser newSAXParser(Properties properties) throws ParserConfigurationException, SAXException, SAXNotSupportedException {
SAXParserFactory factory = (SAXParserFactory) properties.get(""SAXParserFactory"");
if (versionNumber == null) {
versionNumber = getXercesVersion();
version = new Float(versionNumber).floatValue();
}
// Note: 2.2 is completely broken (with XML Schema).
if (version > 2.1) {
configureXerces(factory);
return factory.newSAXParser();
} else {
SAXParser parser = factory.newSAXParser();
configureOldXerces(parser, properties);
return parser;
}
}",0
215,"private static String getXercesVersion() {
String versionNumber = ""1.0"";
try {
Class<?> versionClass = Class.forName(""org.apache.xerces.impl.Version"");
Method method = versionClass.getMethod(""getVersion"", (Class[]) null);
String version = (String) method.invoke(null, (Object[]) null);
versionNumber = version.substring(""Xerces-J"".length(), version.lastIndexOf("".""));
} catch (Exception ex) {
}
return versionNumber;
}",0
216,"protected static String XERCES_DYNAMIC = ""http://apache.org/xml/features/validation/dynamic"";",0
217,"protected static String JAXP_SCHEMA_LANGUAGE = ""http://java.sun.com/xml/jaxp/properties/schemaLanguage"";",0
218,protected static float version;,0
219,protected static String versionNumber = null;,0
220,"protected static String XERCES_SCHEMA = ""http://apache.org/xml/features/validation/schema"";",0
221,"protected static Log log = LogFactory.getLog(""org.apache.commons.digester.Digester.sax"");",0
222,"public final String DFLT_PLUGIN_CLASS_ATTR = ""plugin-class"";",0
223,public final String DFLT_PLUGIN_ID_ATTR_NS = null;,0
224,"public final String DFLT_PLUGIN_ID_ATTR = ""plugin-id"";",0
225,"public static String DFLT_METHOD_NAME = ""addRules"";",0
226,"public static String DFLT_METHOD_ATTR = ""method"";",0
227,"public static String DFLT_RULECLASS_ATTR = ""ruleclass"";",0
228,"public static String DFLT_RULECLASS_SUFFIX = ""RuleInfo"";",0
229,"public static String DFLT_METHOD_NAME = ""addRules"";",0
230,"public static String DFLT_METHOD_NAME = ""addRules"";",0
231,"public static String DFLT_RESOURCE_SUFFIX = ""RuleInfo.xml"";",0
232,"public static String DFLT_FILENAME_ATTR = ""file"";",0
233,"public static String DFLT_METHOD_ATTR = ""method"";",0
234,"public static String DFLT_RESOURCE_ATTR = ""resource"";",0
235,"public static String DFLT_PROPS_ATTR = ""setprops"";",0
236,"public static String DFLT_FALSEVAL = ""false"";",0
237,"@Override
public void end() throws Exception {
Object[] parameters = null;
if (paramCount > 0) {
parameters = (Object[]) digester.popParams();
if (digester.log.isTraceEnabled()) {
for (int i = 0, size = parameters.length; i < size; i++) {
digester.log.trace(""[CallMethodRule]("" + i + "")"" + parameters[i]);
}
}
if (paramCount == 1 && parameters[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
parameters = new Object[1];
parameters[0] = bodyText;
if (paramTypes.length == 0) {
paramTypes = new Class[1];
paramTypes[0] = String.class;
}
} else {
}
Object[] paramValues = new Object[paramTypes.length];
for (int i = 0; i < paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(paramTypes[i]))) {
paramValues[i] = ConvertUtils.convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (targetOffset >= 0) {
target = digester.peek(targetOffset);
} else {
target = digester.peek(digester.getCount() + targetOffset);
}
if (target == null) {
StringBuffer sb = new StringBuffer();
sb.append(""[CallMethodRule]{"");
sb.append(digester.match);
sb.append(""} Call target is null ("");
sb.append(""targetOffset="");
sb.append(targetOffset);
sb.append("",stackdepth="");
sb.append(digester.getCount());
sb.append("")"");
throw new org.xml.sax.SAXException(sb.toString());
}
if (digester.log.isDebugEnabled()) {
StringBuffer sb = new StringBuffer(""[CallMethodRule]{"");
sb.append(digester.match);
sb.append(""} Call "");
sb.append(target.getClass().getName());
sb.append(""."");
sb.append(methodName);
sb.append(""("");
for (int i = 0; i < paramValues.length; i++) {
if (i > 0) {
sb.append("","");
}
if (paramValues[i] == null) {
sb.append(""null"");
} else {
sb.append(paramValues[i].toString());
}
sb.append(""/"");
if (paramTypes[i] == null) {
sb.append(""null"");
} else {
sb.append(paramTypes[i].getName());
}
}
sb.append("")"");
digester.log.debug(sb.toString());
}
Object result = null;
if (useExactMatch) {
result = MethodUtils.invokeExactMethod(target, methodName, paramValues, paramTypes);
} else {
result = MethodUtils.invokeMethod(target, methodName, paramValues, paramTypes);
}
processMethodCallResult(result);
}",0
238,"@Override
public void end() throws Exception {
Object[] parameters = null;
if (paramCount > 0) {
parameters = (Object[]) digester.popParams();
if (digester.log.isTraceEnabled()) {
for (int i = 0, size = parameters.length; i < size; i++) {
digester.log.trace(""[CallMethodRule]("" + i + "")"" + parameters[i]);
}
}
if (paramCount == 1 && parameters[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
parameters = new Object[1];
parameters[0] = bodyText;
if (paramTypes.length == 0) {
paramTypes = new Class[1];
paramTypes[0] = String.class;
}
} else {
}
Object[] paramValues = new Object[paramTypes.length];
for (int i = 0; i < paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(paramTypes[i]))) {
paramValues[i] = ConvertUtils.convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (targetOffset >= 0) {
target = digester.peek(targetOffset);
} else {
target = digester.peek(digester.getCount() + targetOffset);
}
if (target == null) {
StringBuffer sb = new StringBuffer();
sb.append(""[CallMethodRule]{"");
sb.append(digester.match);
sb.append(""} Call target is null ("");
sb.append(""targetOffset="");
sb.append(targetOffset);
sb.append("",stackdepth="");
sb.append(digester.getCount());
sb.append("")"");
throw new org.xml.sax.SAXException(sb.toString());
}
if (digester.log.isDebugEnabled()) {
StringBuffer sb = new StringBuffer(""[CallMethodRule]{"");
sb.append(digester.match);
sb.append(""} Call "");
sb.append(target.getClass().getName());
sb.append(""."");
sb.append(methodName);
sb.append(""("");
for (int i = 0; i < paramValues.length; i++) {
if (i > 0) {
sb.append("","");
}
if (paramValues[i] == null) {
sb.append(""null"");
} else {
sb.append(paramValues[i].toString());
}
sb.append(""/"");
if (paramTypes[i] == null) {
sb.append(""null"");
} else {
sb.append(paramTypes[i].getName());
}
}
sb.append("")"");
digester.log.debug(sb.toString());
}
Object result = null;
if (useExactMatch) {
result = MethodUtils.invokeExactMethod(target, methodName, paramValues, paramTypes);
} else {
result = MethodUtils.invokeMethod(target, methodName, paramValues, paramTypes);
}
processMethodCallResult(result);
}",0
239,"public SAXParser getParser() {
if (parser != null) {
return (parser);
}
try {
if (validating && (schemaLocation != null)) {
Properties properties = new Properties();
properties.put(""SAXParserFactory"", getFactory());
if (schemaLocation != null) {
properties.put(""schemaLocation"", schemaLocation);
properties.put(""schemaLanguage"", schemaLanguage);
}
parser = ParserFeatureSetterFactory.newSAXParser(properties);
} else {
parser = getFactory().newSAXParser();
}
} catch (Exception e) {
log.error(""Digester.getParser: "", e);
return (null);
}
return (parser);
}",0
240,protected String namespaceURI = null;,0
241,private String currChildNamespaceURI = null;,0
242,"private final Map<Class<?>, FromAnnotationsRuleSet> data = new LinkedHashMap<Class<?>, FromAnnotationsRuleSet>(capacity, loadFactor) {
private static final long serialVersionUID = 1L;
@Override
protected boolean removeEldestEntry(Map.Entry<Class<?>, FromAnnotationsRuleSet> eldest) {
return size() > cacheSize;
}
};",0
243,private final int cacheSize = 255;,0
244,private final int cacheSize = 255;,0
245,private final float loadFactor = 0.75f;,0
246,private final float loadFactor = 0.75f;,0
247,"public MethodArgument(int index, Class<?> parameterType, Annotation[] annotations) {
this.index = index;
this.parameterType = parameterType;
this.annotations = annotations;
}",0
248,"public static Annotation[] getAnnotationsArrayValue(Annotation annotation) {
Object value = getAnnotationValue(annotation);
if (value != null && value.getClass().isArray() && Annotation.class.isAssignableFrom(value.getClass().getComponentType())) {
return (Annotation[]) value;
}
return null;
}",0
249,"protected static Log log = LogFactory.getLog(""org.apache.commons.digester.Digester.sax"");",0
250,"protected static String JAXP_SCHEMA_LANGUAGE = ""http://java.sun.com/xml/jaxp/properties/schemaLanguage"";",0
251,"protected static String JAXP_SCHEMA_LANGUAGE = ""http://java.sun.com/xml/jaxp/properties/schemaLanguage"";",0
252,"public static SAXParser newSAXParser(Properties properties) throws ParserConfigurationException, SAXException, SAXNotSupportedException {
SAXParserFactory factory = (SAXParserFactory) properties.get(""SAXParserFactory"");
if (versionNumber == null) {
versionNumber = getXercesVersion();
version = new Float(versionNumber).floatValue();
}
// Note: 2.2 is completely broken (with XML Schema).
if (version > 2.1) {
configureXerces(factory);
return factory.newSAXParser();
} else {
SAXParser parser = factory.newSAXParser();
configureOldXerces(parser, properties);
return parser;
}
}",0
253,"protected static String XERCES_DYNAMIC = ""http://apache.org/xml/features/validation/dynamic"";",0
254,protected static float version;,0
255,"private static String getXercesVersion() {
String versionNumber = ""1.0"";
try {
Class<?> versionClass = Class.forName(""org.apache.xerces.impl.Version"");
Method method = versionClass.getMethod(""getVersion"", (Class[]) null);
String version = (String) method.invoke(null, (Object[]) null);
versionNumber = version.substring(""Xerces-J"".length(), version.lastIndexOf("".""));
} catch (Exception ex) {
}
return versionNumber;
}",0
256,"protected static Log log = LogFactory.getLog(""org.apache.commons.digester.Digester.sax"");",0
257,protected static String versionNumber = null;,0
258,"protected static String XERCES_SCHEMA = ""http://apache.org/xml/features/validation/schema"";",0
259,"public final String DFLT_PLUGIN_CLASS_ATTR = ""plugin-class"";",0
260,"// TODO: Consider making following four constants static in 2.0
public final String DFLT_PLUGIN_CLASS_ATTR_NS = null;",0
261,"public final String DFLT_PLUGIN_ID_ATTR = ""plugin-id"";",0
262,"public static String DFLT_RULECLASS_ATTR = ""ruleclass"";",0
263,"public static String DFLT_METHOD_NAME = ""addRules"";",0
264,"public static String DFLT_METHOD_ATTR = ""method"";",0
265,"public static String DFLT_METHOD_NAME = ""addRules"";",0
266,"public static String DFLT_RULECLASS_SUFFIX = ""RuleInfo"";",0
267,"public static String DFLT_METHOD_NAME = ""addRules"";",0
268,"public static String DFLT_RESOURCE_SUFFIX = ""RuleInfo.xml"";",0
269,"public static String DFLT_FILENAME_ATTR = ""file"";",0
270,"public static String DFLT_METHOD_ATTR = ""method"";",0
271,"public static String DFLT_RESOURCE_ATTR = ""resource"";",0
272,"public static String DFLT_PROPS_ATTR = ""setprops"";",0
273,"public static String DFLT_FALSEVAL = ""false"";",0
274,"@Override
public void end(String namespace, String name) throws Exception {
Object[] parameters;
if (paramCount > 0) {
parameters = getDigester().popParams();
if (getDigester().getLogger().isTraceEnabled()) {
for (int i = 0, size = parameters.length; i < size; i++) {
getDigester().getLogger().trace(format(""[CallMethodRule]{%s} parameters[%s]=%s"", getDigester().getMatch(), i, parameters[i]));
}
}
if (paramCount == 1 && parameters[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
parameters = new Object[] { bodyText };
if (paramTypes.length == 0) {
paramTypes = new Class[] { String.class };
}
} else {
parameters = new Object[0];
paramTypes = new Class<?>[0];
}
Object[] paramValues = new Object[paramTypes.length];
for (int i = 0; i < paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(paramTypes[i]))) {
paramValues[i] = convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (targetOffset >= 0) {
target = getDigester().peek(targetOffset);
} else {
target = getDigester().peek(getDigester().getCount() + targetOffset);
}
if (target == null) {
throw new SAXException(format(""[CallMethodRule]{%s} Call target is null (targetOffset=%s, stackdepth=%s)"", getDigester().getMatch(), targetOffset, getDigester().getCount()));
}
if (getDigester().getLogger().isDebugEnabled()) {
Formatter formatter = new Formatter().format(""[CallMethodRule]{%s} Call %s.%s("", getDigester().getMatch(), target.getClass().getName(), methodName);
for (int i = 0; i < paramValues.length; i++) {
formatter.format(""%s%s/%s"", (i > 0 ? "", "" : """"), paramValues[i], paramTypes[i].getName());
}
formatter.format("")"");
getDigester().getLogger().debug(formatter.toString());
}
Object result = null;
if (useExactMatch) {
result = invokeExactMethod(target, methodName, paramValues, paramTypes);
} else {
result = invokeMethod(target, methodName, paramValues, paramTypes);
}
processMethodCallResult(result);
}",0
275,"public Object[] popParams() {
try {
if (log.isTraceEnabled()) {
log.trace(""Popping params"");
}
return (params.pop());
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}",0
276,"public Object[] peekParams(int n) {
int index = (params.size() - 1) - n;
if (index < 0) {
log.warn(""Empty stack (returning null)"");
return (null);
}
try {
return (params.get(index));
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}",0
277,"public Object[] peekParams() {
try {
return (params.peek());
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}",0
278,"@SuppressWarnings(""unchecked"")
private <A extends Annotation, E extends AnnotatedElement, R extends Rule> void handle(A annotation, E element) {
Class<?> annotationType = annotation.annotationType();
if (annotationType.isAnnotationPresent(DigesterRuleList.class)) {
Annotation[] annotations = getAnnotationsArrayValue(annotation);
if (annotations != null && annotations.length > 0) {
for (Annotation ptr : annotations) {
handle(ptr, element);
}
}
} else if (annotationType.isAnnotationPresent(DigesterRule.class)) {
DigesterRule digesterRule = annotationType.getAnnotation(DigesterRule.class);
Class<? extends AnnotationHandler<Annotation, AnnotatedElement>> handlerType = (Class<? extends AnnotationHandler<Annotation, AnnotatedElement>>) digesterRule.handledBy();
try {
AnnotationHandler<Annotation, AnnotatedElement> handler = annotationHandlerFactory.newInstance(handlerType);
handler.handle(annotation, element, this.rulesBinder);
} catch (Exception e) {
rulesBinder.addError(e);
}
}
}",0
279,"protected final void bindRulesFrom(final Class<?> type) {
if (type == null || type.getPackage().getName().startsWith(JAVA_PACKAGE) || rulesBinder.isAlreadyBound(type)) {
return;
}
visitElements(type);
if (!type.isInterface()) {
visitElements(new PrivilegedAction<Constructor<?>[]>() {
public Constructor<?>[] run() {
return type.getDeclaredConstructors();
}
});
visitElements(new PrivilegedAction<Field[]>() {
public Field[] run() {
return type.getDeclaredFields();
}
});
}
visitElements(new PrivilegedAction<Method[]>() {
public Method[] run() {
return type.getDeclaredMethods();
}
});
rulesBinder.markAsBound(type);
bindRulesFrom(type.getSuperclass());
}",0
280,"protected final void bindRulesFrom(final Class<?> type) {
if (type == null || type.getPackage().getName().startsWith(JAVA_PACKAGE) || rulesBinder.isAlreadyBound(type)) {
return;
}
visitElements(type);
if (!type.isInterface()) {
visitElements(new PrivilegedAction<Constructor<?>[]>() {
public Constructor<?>[] run() {
return type.getDeclaredConstructors();
}
});
visitElements(new PrivilegedAction<Field[]>() {
public Field[] run() {
return type.getDeclaredFields();
}
});
}
visitElements(new PrivilegedAction<Method[]>() {
public Method[] run() {
return type.getDeclaredMethods();
}
});
rulesBinder.markAsBound(type);
bindRulesFrom(type.getSuperclass());
}",0
281,"protected final void bindRulesFrom(final Class<?> type) {
if (type == null || type.getPackage().getName().startsWith(JAVA_PACKAGE) || rulesBinder.isAlreadyBound(type)) {
return;
}
visitElements(type);
if (!type.isInterface()) {
visitElements(new PrivilegedAction<Constructor<?>[]>() {
public Constructor<?>[] run() {
return type.getDeclaredConstructors();
}
});
visitElements(new PrivilegedAction<Field[]>() {
public Field[] run() {
return type.getDeclaredFields();
}
});
}
visitElements(new PrivilegedAction<Method[]>() {
public Method[] run() {
return type.getDeclaredMethods();
}
});
rulesBinder.markAsBound(type);
bindRulesFrom(type.getSuperclass());
}",0
282,"public static Annotation[] getAnnotationsArrayValue(Annotation annotation) {
Object value = getAnnotationValue(annotation);
if (value != null && value.getClass().isArray() && Annotation.class.isAssignableFrom(value.getClass().getComponentType())) {
return (Annotation[]) value;
}
return null;
}",0
283,"@Override
protected FactoryCreateRule createRule() {
if (type == null && attributeName == null && creationFactory == null) {
reportError(""factoryCreate()"", ""at least one between 'className', 'attributeName' or 'creationFactory' has to be specified"");
}
if (type != null || attributeName != null) {
return new FactoryCreateRule(type, attributeName, ignoreCreateExceptions);
}
return new FactoryCreateRule(creationFactory, ignoreCreateExceptions);
}",0
284,"@Override
public void begin(String namespace, String name, Attributes attributes) throws Exception {
String fileName = attributes.getValue(""url"");
if (fileName != null && fileName.length() > 0) {
final URL xmlRulesResource;
if (fileName.startsWith(CLASSPATH_URL_PREFIX)) {
String path = fileName.substring(CLASSPATH_URL_PREFIX.length());
if ('/' == path.charAt(0)) {
path = path.substring(1);
}
xmlRulesResource = this.targetRulesBinder.getContextClassLoader().getResource(path);
if (xmlRulesResource == null) {
targetRulesBinder.addError(""Resource '%s' not found, please make sure it is in the classpath"", path);
return;
}
} else {
try {
xmlRulesResource = new URL(fileName);
} catch (MalformedURLException e) {
targetRulesBinder.addError(""An error occurred while inculing file from '%s': %s"", fileName, e.getMessage());
return;
}
}
if (memoryRulesBinder.getIncludedFiles().add(xmlRulesResource.toString())) {
install(new FromXmlRulesModule() {
@Override
protected void loadRules() {
loadXMLRules(xmlRulesResource);
}
});
} else {
targetRulesBinder.addError(""Circular file inclusion detected for XML rules: %s"", xmlRulesResource);
}
}
String className = attributes.getValue(""class"");
if (className != null && className.length() > 0) {
try {
Class<?> cls = Class.forName(className);
if (!RulesModule.class.isAssignableFrom(cls)) {
targetRulesBinder.addError(""Class '%s' if not a '%s' implementation"", className, RulesModule.class.getName());
return;
}
RulesModule rulesSource = (RulesModule) cls.newInstance();
install(rulesSource);
} catch (Exception e) {
targetRulesBinder.addError(""Impossible to include programmatic rules from class '%s': %s"", className, e.getMessage());
}
}
}",0
285,"protected LinkedRuleBuilder forPattern(String pattern) {
return memoryRulesBinder.forPattern(pattern);
}",0
286,"public MethodArgument(int index, Class<?> parameterType, Annotation[] annotations) {
this.index = index;
this.parameterType = parameterType;
this.annotations = annotations;
}",0
287,"public static Annotation[] getAnnotationsArrayValue(Annotation annotation) {
Object value = getAnnotationValue(annotation);
if (value != null && value.getClass().isArray() && Annotation.class.isAssignableFrom(value.getClass().getComponentType())) {
return (Annotation[]) value;
}
return null;
}",0
288,"public final String DFLT_PLUGIN_CLASS_ATTR = ""plugin-class"";",0
289,"public final String DFLT_PLUGIN_ID_ATTR = ""plugin-id"";",0
290,public final String DFLT_PLUGIN_ID_ATTR_NS = null;,0
291,"@Override
public void begin(String namespace, String name, Attributes attributes) throws Exception {
int nAttrs = attributes.getLength();
Properties props = new Properties();
for (int i = 0; i < nAttrs; ++i) {
String key = attributes.getLocalName(i);
if ((key == null) || (key.length() == 0)) {
key = attributes.getQName(i);
}
String value = attributes.getValue(i);
props.setProperty(key, value);
}
try {
declarePlugin(getDigester(), props);
} catch (PluginInvalidInputException ex) {
throw new PluginInvalidInputException(String.format(""Error on element [%s]:"", getDigester().getMatch(), ex.getMessage()), ex);
}
}",0
292,"public static String DFLT_RULECLASS_ATTR = ""ruleclass"";",0
293,"public static String DFLT_METHOD_NAME = ""addRules"";",0
294,"public static String DFLT_METHOD_ATTR = ""method"";",0
295,"public static String DFLT_RULECLASS_SUFFIX = ""RuleInfo"";",0
296,"public static String DFLT_METHOD_NAME = ""addRules"";",0
297,"public static String DFLT_METHOD_NAME = ""addRules"";",0
298,"public static String DFLT_RESOURCE_SUFFIX = ""RuleInfo.xml"";",0
299,"public static String DFLT_FILENAME_ATTR = ""file"";",0
300,"public static String DFLT_METHOD_ATTR = ""method"";",0
301,"public static String DFLT_RESOURCE_ATTR = ""resource"";",0
302,"public static String DFLT_FALSEVAL = ""false"";",0
303,"public static String DFLT_PROPS_ATTR = ""setprops"";",0
304,"@Override
public void end(String namespace, String name) throws Exception {
Object[] parameters = null;
if (this.paramCount > 0) {
parameters = (Object[]) this.getDigester().popParams();
if (this.getDigester().getLog().isTraceEnabled()) {
Formatter formatter = new Formatter(""[CallMethodRule]"");
for (int i = 0, size = parameters.length; i < size; i++) {
if (i > 0) {
formatter.format("", "");
}
formatter.format(""(%s) %s"", i, parameters[i]);
}
this.getDigester().getLog().trace(formatter.toString());
}
if (this.paramCount == 1 && parameters[0] == null) {
return;
}
} else if (this.paramTypes != null && this.paramTypes.length != 0) {
if (this.bodyText == null) {
return;
}
parameters = new Object[] { this.bodyText };
} else {
}
Object[] paramValues = new Object[this.paramTypes.length];
for (int i = 0; i < this.paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(this.paramTypes[i]))) {
paramValues[i] = ConvertUtils.convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (this.targetOffset >= 0) {
target = this.getDigester().peek(this.targetOffset);
} else {
target = this.getDigester().peek(this.getDigester().getCount() + this.targetOffset);
}
if (target == null) {
throw this.getDigester().createSAXException(String.format(""[CallMethodRule]{%s} Call target is null (targetOffset=%s, stackdepth=%s)"", this.getDigester().getMatch(), this.targetOffset, this.getDigester().getCount()));
}
if (this.getDigester().getLog().isDebugEnabled()) {
Formatter formatter = new Formatter().format(""[CallMethodRule]{%s} Call %s.%s("", this.getDigester().getMatch(), target.getClass().getName(), this.methodName);
for (int i = 0; i < paramValues.length; i++) {
if (i > 0) {
formatter.format("", "");
}
formatter.format(""%s/%s"", (paramValues[i] == null ? ""null"" : paramValues[i].toString()), (this.paramTypes[i] == null ? ""null"" : this.paramTypes[i].getName()));
}
formatter.format("")"");
this.getDigester().getLog().debug(formatter.toString());
}
Object result = null;
if (this.useExactMatch) {
result = MethodUtils.invokeExactMethod(target, this.methodName, paramValues, this.paramTypes);
} else {
result = MethodUtils.invokeMethod(target, this.methodName, paramValues, this.paramTypes);
}
processMethodCallResult(result);
}",0
305,"@Override
public void end(String namespace, String name) throws Exception {
Object[] parameters = null;
if (this.paramCount > 0) {
parameters = (Object[]) this.getDigester().popParams();
if (this.getDigester().getLog().isTraceEnabled()) {
Formatter formatter = new Formatter(""[CallMethodRule]"");
for (int i = 0, size = parameters.length; i < size; i++) {
if (i > 0) {
formatter.format("", "");
}
formatter.format(""(%s) %s"", i, parameters[i]);
}
this.getDigester().getLog().trace(formatter.toString());
}
if (this.paramCount == 1 && parameters[0] == null) {
return;
}
} else if (this.paramTypes != null && this.paramTypes.length != 0) {
if (this.bodyText == null) {
return;
}
parameters = new Object[] { this.bodyText };
} else {
}
Object[] paramValues = new Object[this.paramTypes.length];
for (int i = 0; i < this.paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(this.paramTypes[i]))) {
paramValues[i] = ConvertUtils.convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (this.targetOffset >= 0) {
target = this.getDigester().peek(this.targetOffset);
} else {
target = this.getDigester().peek(this.getDigester().getCount() + this.targetOffset);
}
if (target == null) {
throw this.getDigester().createSAXException(String.format(""[CallMethodRule]{%s} Call target is null (targetOffset=%s, stackdepth=%s)"", this.getDigester().getMatch(), this.targetOffset, this.getDigester().getCount()));
}
if (this.getDigester().getLog().isDebugEnabled()) {
Formatter formatter = new Formatter().format(""[CallMethodRule]{%s} Call %s.%s("", this.getDigester().getMatch(), target.getClass().getName(), this.methodName);
for (int i = 0; i < paramValues.length; i++) {
if (i > 0) {
formatter.format("", "");
}
formatter.format(""%s/%s"", (paramValues[i] == null ? ""null"" : paramValues[i].toString()), (this.paramTypes[i] == null ? ""null"" : this.paramTypes[i].getName()));
}
formatter.format("")"");
this.getDigester().getLog().debug(formatter.toString());
}
Object result = null;
if (this.useExactMatch) {
result = MethodUtils.invokeExactMethod(target, this.methodName, paramValues, this.paramTypes);
} else {
result = MethodUtils.invokeMethod(target, this.methodName, paramValues, this.paramTypes);
}
processMethodCallResult(result);
}",0
306,"@Override
public String toString() {
Formatter formatter = new Formatter().format(""CallMethodRule[methodName=%s, paramCount=%s, paramTypes={"", this.methodName, this.paramTypes.length);
if (this.paramTypes != null) {
for (int i = 0; i < this.paramTypes.length; i++) {
if (i > 0) {
formatter.format("", "");
}
formatter.format(this.paramTypes[i].getName());
}
}
return formatter.format(""}]"").toString();
}",0
307,private String currChildNamespaceURI = null;,0
308,private String currChildNamespaceURI = null;,0
309,"protected LinkedRuleBuilder forPattern(String pattern) {
return this.memoryRulesBinder.forPattern(pattern);
}",0
310,"public void end() throws Exception {
Object[] parameters = null;
if (paramCount > 0) {
parameters = (Object[]) digester.popParams();
if (digester.log.isTraceEnabled()) {
for (int i = 0, size = parameters.length; i < size; i++) {
digester.log.trace(""[CallMethodRule]("" + i + "")"" + parameters[i]);
}
}
if (paramCount == 1 && parameters[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
parameters = new Object[1];
parameters[0] = bodyText;
if (paramTypes.length == 0) {
paramTypes = new Class[1];
paramTypes[0] = String.class;
}
} else {
;
}
Object[] paramValues = new Object[paramTypes.length];
for (int i = 0; i < paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(paramTypes[i]))) {
paramValues[i] = ConvertUtils.convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (targetOffset >= 0) {
target = digester.peek(targetOffset);
} else {
target = digester.peek(digester.getCount() + targetOffset);
}
if (target == null) {
StringBuffer sb = new StringBuffer();
sb.append(""[CallMethodRule]{"");
sb.append(digester.match);
sb.append(""} Call target is null ("");
sb.append(""targetOffset="");
sb.append(targetOffset);
sb.append("",stackdepth="");
sb.append(digester.getCount());
sb.append("")"");
throw new org.xml.sax.SAXException(sb.toString());
}
if (digester.log.isDebugEnabled()) {
StringBuffer sb = new StringBuffer(""[CallMethodRule]{"");
sb.append(digester.match);
sb.append(""} Call "");
sb.append(target.getClass().getName());
sb.append(""."");
sb.append(methodName);
sb.append(""("");
for (int i = 0; i < paramValues.length; i++) {
if (i > 0) {
sb.append("","");
}
if (paramValues[i] == null) {
sb.append(""null"");
} else {
sb.append(paramValues[i].toString());
}
sb.append(""/"");
if (paramTypes[i] == null) {
sb.append(""null"");
} else {
sb.append(paramTypes[i].getName());
}
}
sb.append("")"");
digester.log.debug(sb.toString());
}
Object result = null;
if (useExactMatch) {
result = MethodUtils.invokeExactMethod(target, methodName, paramValues, paramTypes);
} else {
result = MethodUtils.invokeMethod(target, methodName, paramValues, paramTypes);
}
processMethodCallResult(result);
}",0
311,"public void end() throws Exception {
Object[] parameters = null;
if (paramCount > 0) {
parameters = (Object[]) digester.popParams();
if (digester.log.isTraceEnabled()) {
for (int i = 0, size = parameters.length; i < size; i++) {
digester.log.trace(""[CallMethodRule]("" + i + "")"" + parameters[i]);
}
}
if (paramCount == 1 && parameters[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
parameters = new Object[1];
parameters[0] = bodyText;
if (paramTypes.length == 0) {
paramTypes = new Class[1];
paramTypes[0] = String.class;
}
} else {
;
}
Object[] paramValues = new Object[paramTypes.length];
for (int i = 0; i < paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(paramTypes[i]))) {
paramValues[i] = ConvertUtils.convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (targetOffset >= 0) {
target = digester.peek(targetOffset);
} else {
target = digester.peek(digester.getCount() + targetOffset);
}
if (target == null) {
StringBuffer sb = new StringBuffer();
sb.append(""[CallMethodRule]{"");
sb.append(digester.match);
sb.append(""} Call target is null ("");
sb.append(""targetOffset="");
sb.append(targetOffset);
sb.append("",stackdepth="");
sb.append(digester.getCount());
sb.append("")"");
throw new org.xml.sax.SAXException(sb.toString());
}
if (digester.log.isDebugEnabled()) {
StringBuffer sb = new StringBuffer(""[CallMethodRule]{"");
sb.append(digester.match);
sb.append(""} Call "");
sb.append(target.getClass().getName());
sb.append(""."");
sb.append(methodName);
sb.append(""("");
for (int i = 0; i < paramValues.length; i++) {
if (i > 0) {
sb.append("","");
}
if (paramValues[i] == null) {
sb.append(""null"");
} else {
sb.append(paramValues[i].toString());
}
sb.append(""/"");
if (paramTypes[i] == null) {
sb.append(""null"");
} else {
sb.append(paramTypes[i].getName());
}
}
sb.append("")"");
digester.log.debug(sb.toString());
}
Object result = null;
if (useExactMatch) {
result = MethodUtils.invokeExactMethod(target, methodName, paramValues, paramTypes);
} else {
result = MethodUtils.invokeMethod(target, methodName, paramValues, paramTypes);
}
processMethodCallResult(result);
}",0
312,"public InputSource resolveEntity(String publicId, String systemId) throws SAXException {
if (saxLog.isDebugEnabled()) {
saxLog.debug(""resolveEntity('"" + publicId + ""', '"" + systemId + ""')"");
}
if (publicId != null)
this.publicId = publicId;
URL entityURL = null;
if (publicId != null) {
entityURL = (URL) entityValidator.get(publicId);
}
if (schemaLocation != null && entityURL == null && systemId != null) {
entityURL = (URL) entityValidator.get(systemId);
}
if (entityURL == null) {
if (systemId == null) {
if (log.isDebugEnabled()) {
log.debug("" Cannot resolve entity: '"" + entityURL + ""'"");
}
return (null);
} else {
if (log.isDebugEnabled()) {
log.debug("" Trying to resolve using system ID '"" + systemId + ""'"");
}
try {
entityURL = new URL(systemId);
} catch (MalformedURLException e) {
throw new IllegalArgumentException(""Malformed URL '"" + systemId + ""' : "" + e.getMessage());
}
}
}
if (log.isDebugEnabled()) {
log.debug("" Resolving to alternate DTD '"" + entityURL + ""'"");
}
try {
return createInputSourceFromURL(entityURL);
} catch (Exception e) {
throw createSAXException(e);
}
}",0
313,"public SAXParser getParser() {
if (parser != null) {
return (parser);
}
try {
if (validating && (schemaLocation != null)) {
Properties properties = new Properties();
properties.put(""SAXParserFactory"", getFactory());
if (schemaLocation != null) {
properties.put(""schemaLocation"", schemaLocation);
properties.put(""schemaLanguage"", schemaLanguage);
}
parser = ParserFeatureSetterFactory.newSAXParser(properties);
} else {
parser = getFactory().newSAXParser();
}
} catch (Exception e) {
log.error(""Digester.getParser: "", e);
return (null);
}
return (parser);
}",0
314,protected String namespaceURI = null;,0
315,private String currChildNamespaceURI = null;,0
316,"protected static String JAXP_SCHEMA_LANGUAGE = ""http://java.sun.com/xml/jaxp/properties/schemaLanguage"";",0
317,"protected static Log log = LogFactory.getLog(""org.apache.commons.digester.Digester.sax"");",0
318,"protected static String XERCES_DYNAMIC = ""http://apache.org/xml/features/validation/dynamic"";",0
319,"public static SAXParser newSAXParser(Properties properties) throws ParserConfigurationException, SAXException, SAXNotSupportedException {
SAXParserFactory factory = (SAXParserFactory) properties.get(""SAXParserFactory"");
if (versionNumber == null) {
versionNumber = getXercesVersion();
version = new Float(versionNumber).floatValue();
}
// Note: 2.2 is completely broken (with XML Schema).
if (version > 2.1) {
configureXerces(factory);
return factory.newSAXParser();
} else {
SAXParser parser = factory.newSAXParser();
configureOldXerces(parser, properties);
return parser;
}
}",0
320,"protected static Log log = LogFactory.getLog(""org.apache.commons.digester.Digester.sax"");",0
321,"protected static String XERCES_SCHEMA = ""http://apache.org/xml/features/validation/schema"";",0
322,"protected static String JAXP_SCHEMA_LANGUAGE = ""http://java.sun.com/xml/jaxp/properties/schemaLanguage"";",0
323,"private static String getXercesVersion() {
String versionNumber = ""1.0"";
try {
Class versionClass = Class.forName(""org.apache.xerces.impl.Version"");
Method method = versionClass.getMethod(""getVersion"", (Class[]) null);
String version = (String) method.invoke(null, (Object[]) null);
versionNumber = version.substring(""Xerces-J"".length(), version.lastIndexOf("".""));
} catch (Exception ex) {
}
return versionNumber;
}",0
324,protected static float version;,0
325,protected static String versionNumber = null;,0
326,"public final String DFLT_PLUGIN_ID_ATTR = ""plugin-id"";",0
327,"public final String DFLT_PLUGIN_CLASS_ATTR = ""plugin-class"";",0
328,public final String DFLT_PLUGIN_ID_ATTR_NS = null;,0
329,"public static String DFLT_METHOD_ATTR = ""method"";",0
330,"public static String DFLT_RULECLASS_ATTR = ""ruleclass"";",0
331,"public static String DFLT_METHOD_NAME = ""addRules"";",0
332,"public static String DFLT_RULECLASS_SUFFIX = ""RuleInfo"";",0
333,"public static String DFLT_METHOD_NAME = ""addRules"";",0
334,"public static String DFLT_METHOD_NAME = ""addRules"";",0
335,"public static String DFLT_RESOURCE_SUFFIX = ""RuleInfo.xml"";",0
336,"public static String DFLT_FILENAME_ATTR = ""file"";",0
337,"public static String DFLT_METHOD_ATTR = ""method"";",0
338,"public static String DFLT_RESOURCE_ATTR = ""resource"";",0
339,"public static String DFLT_FALSEVAL = ""false"";",0
340,"public static String DFLT_PROPS_ATTR = ""setprops"";",0
341,private FromXmlRuleSet ruleSet;,0
342,"public void end() throws Exception {
Object[] parameters = null;
if (paramCount > 0) {
parameters = (Object[]) digester.popParams();
if (digester.log.isTraceEnabled()) {
for (int i = 0, size = parameters.length; i < size; i++) {
digester.log.trace(""[CallMethodRule]("" + i + "")"" + parameters[i]);
}
}
if (paramCount == 1 && parameters[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
parameters = new Object[1];
parameters[0] = bodyText;
if (paramTypes.length == 0) {
paramTypes = new Class[1];
paramTypes[0] = String.class;
}
} else {
;
}
Object[] paramValues = new Object[paramTypes.length];
for (int i = 0; i < paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(paramTypes[i]))) {
paramValues[i] = ConvertUtils.convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (targetOffset >= 0) {
target = digester.peek(targetOffset);
} else {
target = digester.peek(digester.getCount() + targetOffset);
}
if (target == null) {
StringBuffer sb = new StringBuffer();
sb.append(""[CallMethodRule]{"");
sb.append(digester.match);
sb.append(""} Call target is null ("");
sb.append(""targetOffset="");
sb.append(targetOffset);
sb.append("",stackdepth="");
sb.append(digester.getCount());
sb.append("")"");
throw new org.xml.sax.SAXException(sb.toString());
}
if (digester.log.isDebugEnabled()) {
StringBuffer sb = new StringBuffer(""[CallMethodRule]{"");
sb.append(digester.match);
sb.append(""} Call "");
sb.append(target.getClass().getName());
sb.append(""."");
sb.append(methodName);
sb.append(""("");
for (int i = 0; i < paramValues.length; i++) {
if (i > 0) {
sb.append("","");
}
if (paramValues[i] == null) {
sb.append(""null"");
} else {
sb.append(paramValues[i].toString());
}
sb.append(""/"");
if (paramTypes[i] == null) {
sb.append(""null"");
} else {
sb.append(paramTypes[i].getName());
}
}
sb.append("")"");
digester.log.debug(sb.toString());
}
Object result = null;
if (useExactMatch) {
result = MethodUtils.invokeExactMethod(target, methodName, paramValues, paramTypes);
} else {
result = MethodUtils.invokeMethod(target, methodName, paramValues, paramTypes);
}
processMethodCallResult(result);
}",0
343,"public void end() throws Exception {
Object[] parameters = null;
if (paramCount > 0) {
parameters = (Object[]) digester.popParams();
if (digester.log.isTraceEnabled()) {
for (int i = 0, size = parameters.length; i < size; i++) {
digester.log.trace(""[CallMethodRule]("" + i + "")"" + parameters[i]);
}
}
if (paramCount == 1 && parameters[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
parameters = new Object[1];
parameters[0] = bodyText;
if (paramTypes.length == 0) {
paramTypes = new Class[1];
paramTypes[0] = String.class;
}
} else {
;
}
Object[] paramValues = new Object[paramTypes.length];
for (int i = 0; i < paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(paramTypes[i]))) {
paramValues[i] = ConvertUtils.convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (targetOffset >= 0) {
target = digester.peek(targetOffset);
} else {
target = digester.peek(digester.getCount() + targetOffset);
}
if (target == null) {
StringBuffer sb = new StringBuffer();
sb.append(""[CallMethodRule]{"");
sb.append(digester.match);
sb.append(""} Call target is null ("");
sb.append(""targetOffset="");
sb.append(targetOffset);
sb.append("",stackdepth="");
sb.append(digester.getCount());
sb.append("")"");
throw new org.xml.sax.SAXException(sb.toString());
}
if (digester.log.isDebugEnabled()) {
StringBuffer sb = new StringBuffer(""[CallMethodRule]{"");
sb.append(digester.match);
sb.append(""} Call "");
sb.append(target.getClass().getName());
sb.append(""."");
sb.append(methodName);
sb.append(""("");
for (int i = 0; i < paramValues.length; i++) {
if (i > 0) {
sb.append("","");
}
if (paramValues[i] == null) {
sb.append(""null"");
} else {
sb.append(paramValues[i].toString());
}
sb.append(""/"");
if (paramTypes[i] == null) {
sb.append(""null"");
} else {
sb.append(paramTypes[i].getName());
}
}
sb.append("")"");
digester.log.debug(sb.toString());
}
Object result = null;
if (useExactMatch) {
result = MethodUtils.invokeExactMethod(target, methodName, paramValues, paramTypes);
} else {
result = MethodUtils.invokeMethod(target, methodName, paramValues, paramTypes);
}
processMethodCallResult(result);
}",0
344,"public InputSource resolveEntity(String publicId, String systemId) throws SAXException {
if (saxLog.isDebugEnabled()) {
saxLog.debug(""resolveEntity('"" + publicId + ""', '"" + systemId + ""')"");
}
if (publicId != null)
this.publicId = publicId;
URL entityURL = null;
if (publicId != null) {
entityURL = (URL) entityValidator.get(publicId);
}
if (schemaLocation != null && entityURL == null && systemId != null) {
entityURL = (URL) entityValidator.get(systemId);
}
if (entityURL == null) {
if (systemId == null) {
if (log.isDebugEnabled()) {
log.debug("" Cannot resolve entity: '"" + entityURL + ""'"");
}
return (null);
} else {
if (log.isDebugEnabled()) {
log.debug("" Trying to resolve using system ID '"" + systemId + ""'"");
}
try {
entityURL = new URL(systemId);
} catch (MalformedURLException e) {
throw new IllegalArgumentException(""Malformed URL '"" + systemId + ""' : "" + e.getMessage());
}
}
}
if (log.isDebugEnabled()) {
log.debug("" Resolving to alternate DTD '"" + entityURL + ""'"");
}
try {
return createInputSourceFromURL(entityURL);
} catch (Exception e) {
throw createSAXException(e);
}
}",0
345,"public SAXParser getParser() {
if (parser != null) {
return (parser);
}
try {
if (validating && (schemaLocation != null)) {
Properties properties = new Properties();
properties.put(""SAXParserFactory"", getFactory());
if (schemaLocation != null) {
properties.put(""schemaLocation"", schemaLocation);
properties.put(""schemaLanguage"", schemaLanguage);
}
parser = ParserFeatureSetterFactory.newSAXParser(properties);
} else {
parser = getFactory().newSAXParser();
}
} catch (Exception e) {
log.error(""Digester.getParser: "", e);
return (null);
}
return (parser);
}",0
346,protected String namespaceURI = null;,0
347,private String currChildNamespaceURI = null;,0
348,"protected static String JAXP_SCHEMA_LANGUAGE = ""http://java.sun.com/xml/jaxp/properties/schemaLanguage"";",0
349,"protected static Log log = LogFactory.getLog(""org.apache.commons.digester.Digester.sax"");",0
350,"public static SAXParser newSAXParser(Properties properties) throws ParserConfigurationException, SAXException, SAXNotSupportedException {
SAXParserFactory factory = (SAXParserFactory) properties.get(""SAXParserFactory"");
if (versionNumber == null) {
versionNumber = getXercesVersion();
version = new Float(versionNumber).floatValue();
}
// Note: 2.2 is completely broken (with XML Schema).
if (version > 2.1) {
configureXerces(factory);
return factory.newSAXParser();
} else {
SAXParser parser = factory.newSAXParser();
configureOldXerces(parser, properties);
return parser;
}
}",0
351,protected static String versionNumber = null;,0
352,protected static float version;,0
353,"protected static String XERCES_SCHEMA = ""http://apache.org/xml/features/validation/schema"";",0
354,"private static String getXercesVersion() {
String versionNumber = ""1.0"";
try {
Class versionClass = Class.forName(""org.apache.xerces.impl.Version"");
Method method = versionClass.getMethod(""getVersion"", (Class[]) null);
String version = (String) method.invoke(null, (Object[]) null);
versionNumber = version.substring(""Xerces-J"".length(), version.lastIndexOf("".""));
} catch (Exception ex) {
}
return versionNumber;
}",0
355,"protected static String XERCES_DYNAMIC = ""http://apache.org/xml/features/validation/dynamic"";",0
356,"protected static Log log = LogFactory.getLog(""org.apache.commons.digester.Digester.sax"");",0
357,"protected static String JAXP_SCHEMA_LANGUAGE = ""http://java.sun.com/xml/jaxp/properties/schemaLanguage"";",0
358,"public final String DFLT_PLUGIN_ID_ATTR = ""plugin-id"";",0
359,"public final String DFLT_PLUGIN_CLASS_ATTR = ""plugin-class"";",0
360,"// TODO: Consider making following four constants static in 2.0
public final String DFLT_PLUGIN_CLASS_ATTR_NS = null;",0
361,"public static String DFLT_METHOD_ATTR = ""method"";",0
362,"public static String DFLT_RULECLASS_ATTR = ""ruleclass"";",0
363,"public static String DFLT_METHOD_NAME = ""addRules"";",0
364,"public static String DFLT_METHOD_NAME = ""addRules"";",0
365,"public static String DFLT_RULECLASS_SUFFIX = ""RuleInfo"";",0
366,"public static String DFLT_METHOD_NAME = ""addRules"";",0
367,"public static String DFLT_RESOURCE_SUFFIX = ""RuleInfo.xml"";",0
368,"public static String DFLT_FILENAME_ATTR = ""file"";",0
369,"public static String DFLT_METHOD_ATTR = ""method"";",0
370,"public static String DFLT_RESOURCE_ATTR = ""resource"";",0
371,"public static String DFLT_FALSEVAL = ""false"";",0
372,"public static String DFLT_PROPS_ATTR = ""setprops"";",0
373,private FromXmlRuleSet ruleSet;,0
374,"@Override
public void end(final String namespace, final String name) throws Exception {
Object[] parameters;
if (paramCount > 0) {
parameters = getDigester().popParams();
if (getDigester().getLogger().isTraceEnabled()) {
for (int i = 0, size = parameters.length; i < size; i++) {
getDigester().getLogger().trace(format(""[CallMethodRule]{%s} parameters[%s]=%s"", getDigester().getMatch(), i, parameters[i]));
}
}
if (paramCount == 1 && parameters[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
parameters = new Object[] { bodyText };
if (paramTypes.length == 0) {
paramTypes = new Class[] { String.class };
}
} else {
parameters = new Object[0];
paramTypes = new Class<?>[0];
}
final Object[] paramValues = new Object[paramTypes.length];
for (int i = 0; i < paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(paramTypes[i]))) {
paramValues[i] = convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (targetOffset >= 0) {
target = getDigester().peek(targetOffset);
} else {
target = getDigester().peek(getDigester().getCount() + targetOffset);
}
if (target == null) {
throw new SAXException(format(""[CallMethodRule]{%s} Call target is null (targetOffset=%s, stackdepth=%s)"", getDigester().getMatch(), targetOffset, getDigester().getCount()));
}
if (getDigester().getLogger().isDebugEnabled()) {
final Formatter formatter = new Formatter().format(""[CallMethodRule]{%s} Call %s.%s("", getDigester().getMatch(), target.getClass().getName(), methodName);
for (int i = 0; i < paramValues.length; i++) {
formatter.format(""%s%s/%s"", (i > 0 ? "", "" : """"), paramValues[i], paramTypes[i].getName());
}
formatter.format("")"");
getDigester().getLogger().debug(formatter.toString());
}
Object result = null;
if (useExactMatch) {
result = invokeExactMethod(target, methodName, paramValues, paramTypes);
} else {
result = invokeMethod(target, methodName, paramValues, paramTypes);
}
processMethodCallResult(result);
}",0
375,"public Object[] peekParams() {
try {
return (params.peek());
} catch (final EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}",0
376,"public Object[] popParams() {
try {
if (log.isTraceEnabled()) {
log.trace(""Popping params"");
}
return (params.pop());
} catch (final EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}",0
377,"public Object[] peekParams(final int n) {
final int index = (params.size() - 1) - n;
if (index < 0) {
log.warn(""Empty stack (returning null)"");
return (null);
}
try {
return (params.get(index));
} catch (final EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}",0
378,"protected final void bindRulesFrom(final Class<?> type) {
if (type == null || type.getPackage().getName().startsWith(JAVA_PACKAGE) || rulesBinder.isAlreadyBound(type)) {
return;
}
visitElements(type);
if (!type.isInterface()) {
visitElements(new PrivilegedAction<Constructor<?>[]>() {
@Override
public Constructor<?>[] run() {
return type.getDeclaredConstructors();
}
});
visitElements(new PrivilegedAction<Field[]>() {
@Override
public Field[] run() {
return type.getDeclaredFields();
}
});
}
visitElements(new PrivilegedAction<Method[]>() {
@Override
public Method[] run() {
return type.getDeclaredMethods();
}
});
rulesBinder.markAsBound(type);
bindRulesFrom(type.getSuperclass());
}",0
379,"protected final void bindRulesFrom(final Class<?> type) {
if (type == null || type.getPackage().getName().startsWith(JAVA_PACKAGE) || rulesBinder.isAlreadyBound(type)) {
return;
}
visitElements(type);
if (!type.isInterface()) {
visitElements(new PrivilegedAction<Constructor<?>[]>() {
@Override
public Constructor<?>[] run() {
return type.getDeclaredConstructors();
}
});
visitElements(new PrivilegedAction<Field[]>() {
@Override
public Field[] run() {
return type.getDeclaredFields();
}
});
}
visitElements(new PrivilegedAction<Method[]>() {
@Override
public Method[] run() {
return type.getDeclaredMethods();
}
});
rulesBinder.markAsBound(type);
bindRulesFrom(type.getSuperclass());
}",0
380,"@SuppressWarnings(""unchecked"")
private <A extends Annotation, E extends AnnotatedElement, R extends Rule> void handle(final A annotation, final E element) {
final Class<?> annotationType = annotation.annotationType();
if (annotationType.isAnnotationPresent(DigesterRuleList.class)) {
final Annotation[] annotations = getAnnotationsArrayValue(annotation);
if (annotations != null && annotations.length > 0) {
for (final Annotation ptr : annotations) {
handle(ptr, element);
}
}
} else if (annotationType.isAnnotationPresent(DigesterRule.class)) {
final DigesterRule digesterRule = annotationType.getAnnotation(DigesterRule.class);
final Class<? extends AnnotationHandler<Annotation, AnnotatedElement>> handlerType = (Class<? extends AnnotationHandler<Annotation, AnnotatedElement>>) digesterRule.handledBy();
try {
final AnnotationHandler<Annotation, AnnotatedElement> handler = annotationHandlerFactory.newInstance(handlerType);
handler.handle(annotation, element, this.rulesBinder);
} catch (final Exception e) {
rulesBinder.addError(e);
}
}
}",0
381,"protected final void bindRulesFrom(final Class<?> type) {
if (type == null || type.getPackage().getName().startsWith(JAVA_PACKAGE) || rulesBinder.isAlreadyBound(type)) {
return;
}
visitElements(type);
if (!type.isInterface()) {
visitElements(new PrivilegedAction<Constructor<?>[]>() {
@Override
public Constructor<?>[] run() {
return type.getDeclaredConstructors();
}
});
visitElements(new PrivilegedAction<Field[]>() {
@Override
public Field[] run() {
return type.getDeclaredFields();
}
});
}
visitElements(new PrivilegedAction<Method[]>() {
@Override
public Method[] run() {
return type.getDeclaredMethods();
}
});
rulesBinder.markAsBound(type);
bindRulesFrom(type.getSuperclass());
}",0
382,"public static Annotation[] getAnnotationsArrayValue(final Annotation annotation) {
final Object value = getAnnotationValue(annotation);
if (value != null && value.getClass().isArray() && Annotation.class.isAssignableFrom(value.getClass().getComponentType())) {
return (Annotation[]) value;
}
return null;
}",0
383,"@Override
protected FactoryCreateRule createRule() {
if (type == null && attributeName == null && creationFactory == null) {
reportError(""factoryCreate()"", ""at least one between 'className', 'attributeName' or 'creationFactory' has to be specified"");
}
if (type != null || attributeName != null) {
return new FactoryCreateRule(type, attributeName, ignoreCreateExceptions);
}
return new FactoryCreateRule(creationFactory, ignoreCreateExceptions);
}",0
384,"@Override
public void begin(final String namespace, final String name, final Attributes attributes) throws Exception {
final String fileName = attributes.getValue(""url"");
if (fileName != null && !fileName.isEmpty()) {
final URL xmlRulesResource;
if (fileName.startsWith(CLASSPATH_URL_PREFIX)) {
String path = fileName.substring(CLASSPATH_URL_PREFIX.length());
if ('/' == path.charAt(0)) {
path = path.substring(1);
}
xmlRulesResource = this.targetRulesBinder.getContextClassLoader().getResource(path);
if (xmlRulesResource == null) {
targetRulesBinder.addError(""Resource '%s' not found, please make sure it is in the classpath"", path);
return;
}
} else {
try {
xmlRulesResource = new URL(fileName);
} catch (final MalformedURLException e) {
targetRulesBinder.addError(""An error occurred while inculing file from '%s': %s"", fileName, e.getMessage());
return;
}
}
final Set<String> includedFiles = memoryRulesBinder.getIncludedFiles();
final String xmlRulesResourceString = xmlRulesResource.toString();
if (includedFiles.add(xmlRulesResourceString)) {
try {
install(new FromXmlRulesModule() {
@Override
protected void loadRules() {
loadXMLRules(xmlRulesResource);
}
});
} finally {
includedFiles.remove(xmlRulesResourceString);
}
} else {
targetRulesBinder.addError(""Circular file inclusion detected for XML rules: %s"", xmlRulesResource);
}
}
final String className = attributes.getValue(""class"");
if (className != null && !className.isEmpty()) {
try {
final Class<?> cls = Class.forName(className);
if (!RulesModule.class.isAssignableFrom(cls)) {
targetRulesBinder.addError(""Class '%s' if not a '%s' implementation"", className, RulesModule.class.getName());
return;
}
final RulesModule rulesSource = (RulesModule) cls.newInstance();
install(rulesSource);
} catch (final Exception e) {
targetRulesBinder.addError(""Impossible to include programmatic rules from class '%s': %s"", className, e.getMessage());
}
}
}",0
385,"protected LinkedRuleBuilder forPattern(final String pattern) {
return memoryRulesBinder.forPattern(pattern);
}",0
386,"public void setUpdated(final Date updated) {
this.updated = updated;
}",0
387,"public Date getUpdated() {
return updated;
}",0
388,"public void setUpdated(final Date updated) {
this.updated = updated;
}",0
389,"public Date getUpdated() {
return updated;
}",0
390,"public void print() {
System.out.println(""Person #"" + id);
System.out.println(""  category="" + category);
System.out.println(""  name="" + name);
for (final String type : emails.keySet()) {
final String address = emails.get(type);
System.out.println(""  email (type "" + type + "") : "" + address);
}
for (final Address addr : addresses) {
addr.print(System.out, 2);
}
}",0
391,"private static java.io.Reader getInputData(final String filename) throws IOException {
final java.io.File srcfile = new java.io.File(filename);
final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream(1000);
final byte[] buf = new byte[100];
final java.io.FileInputStream fis = new java.io.FileInputStream(srcfile);
for (; ; ) {
final int nread = fis.read(buf);
if (nread == -1) {
break;
}
baos.write(buf, 0, nread);
}
fis.close();
return new java.io.StringReader(baos.toString());
}",0
392,"private static java.io.Reader getInputData(final String filename) throws IOException {
final java.io.File srcfile = new java.io.File(filename);
final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream(1000);
final byte[] buf = new byte[100];
final java.io.FileInputStream fis = new java.io.FileInputStream(srcfile);
for (; ; ) {
final int nread = fis.read(buf);
if (nread == -1) {
break;
}
baos.write(buf, 0, nread);
}
fis.close();
return new java.io.StringReader(baos.toString());
}",0
393,"private static java.io.Reader getInputData(final String filename) throws IOException {
final java.io.File srcfile = new java.io.File(filename);
final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream(1000);
final byte[] buf = new byte[100];
final java.io.FileInputStream fis = new java.io.FileInputStream(srcfile);
for (; ; ) {
final int nread = fis.read(buf);
if (nread == -1) {
break;
}
baos.write(buf, 0, nread);
}
fis.close();
return new java.io.StringReader(baos.toString());
}",0
394,"public static void main(final String[] args) {
if (args.length != 1) {
usage();
System.exit(-1);
}
final String filename = args[0];
final Digester d = new Digester();
final Connection connection = null;
addRules(d, connection);
System.out.println(""Parsing commencing..."");
try {
final File srcfile = new File(filename);
d.parse(srcfile);
} catch (final IOException ioe) {
System.out.println(""Error reading input file:"" + ioe.getMessage());
System.exit(-1);
} catch (final SAXException se) {
System.out.println(""Error parsing input file:"" + se.getMessage());
System.exit(-1);
}
System.out.println(""Parsing complete."");
}",0
395,private final Connection conn;,0
396,"public void setUpdated(final Date updated) {
this.updated = updated;
}",0
397,"public Date getUpdated() {
return updated;
}",0
398,"public Date getUpdated() {
return updated;
}",0
399,"public void setUpdated(final Date updated) {
this.updated = updated;
}",0
400,"@Override
public String transform(final String s) {
if (toLower) {
return s.toLowerCase();
}
return s.toUpperCase();
}",0
401,"private void execute() throws IOException {
final FileReader inRaw = new FileReader(source);
final FileWriter out = new FileWriter(dest);
final BufferedReader in = new BufferedReader(inRaw);
while (true) {
final String inStr = in.readLine();
if (inStr == null) {
break;
}
final String outStr = transformer.transform(inStr);
out.write(outStr);
out.write('\n');
}
inRaw.close();
out.close();
System.out.println(""Contents of file "" + source + "" have been transformed, and"" + "" written to file "" + dest + ""."");
}",0
402,"private void execute() throws IOException {
final FileReader inRaw = new FileReader(source);
final FileWriter out = new FileWriter(dest);
final BufferedReader in = new BufferedReader(inRaw);
while (true) {
final String inStr = in.readLine();
if (inStr == null) {
break;
}
final String outStr = transformer.transform(inStr);
out.write(outStr);
out.write('\n');
}
inRaw.close();
out.close();
System.out.println(""Contents of file "" + source + "" have been transformed, and"" + "" written to file "" + dest + ""."");
}",0
403,"private void execute() throws IOException {
final FileReader inRaw = new FileReader(source);
final FileWriter out = new FileWriter(dest);
final BufferedReader in = new BufferedReader(inRaw);
while (true) {
final String inStr = in.readLine();
if (inStr == null) {
break;
}
final String outStr = transformer.transform(inStr);
out.write(outStr);
out.write('\n');
}
inRaw.close();
out.close();
System.out.println(""Contents of file "" + source + "" have been transformed, and"" + "" written to file "" + dest + ""."");
}",0
404,"private void execute() throws IOException {
final FileReader inRaw = new FileReader(source);
final FileWriter out = new FileWriter(dest);
final BufferedReader in = new BufferedReader(inRaw);
while (true) {
final String inStr = in.readLine();
if (inStr == null) {
break;
}
final String outStr = transformer.transform(inStr);
out.write(outStr);
out.write('\n');
}
inRaw.close();
out.close();
System.out.println(""Contents of file "" + source + "" have been transformed, and"" + "" written to file "" + dest + ""."");
}",0
405,"private void execute() throws IOException {
final FileReader inRaw = new FileReader(source);
final FileWriter out = new FileWriter(dest);
final BufferedReader in = new BufferedReader(inRaw);
while (true) {
final String inStr = in.readLine();
if (inStr == null) {
break;
}
final String outStr = transformer.transform(inStr);
out.write(outStr);
out.write('\n');
}
inRaw.close();
out.close();
System.out.println(""Contents of file "" + source + "" have been transformed, and"" + "" written to file "" + dest + ""."");
}",0
406,"private void execute() throws IOException {
final FileReader inRaw = new FileReader(source);
final FileWriter out = new FileWriter(dest);
final BufferedReader in = new BufferedReader(inRaw);
while (true) {
final String inStr = in.readLine();
if (inStr == null) {
break;
}
final String outStr = transformer.transform(inStr);
out.write(outStr);
out.write('\n');
}
inRaw.close();
out.close();
System.out.println(""Contents of file "" + source + "" have been transformed, and"" + "" written to file "" + dest + ""."");
}",0
407,"@Override
public String transform(final String s) {
final StringBuilder buf = new StringBuilder(s);
while (true) {
final int idx = buf.indexOf(from);
if (idx == -1) {
break;
}
buf.replace(idx, idx + from.length(), to);
}
return buf.toString();
}",0
408,"public void render(final OutputStream stream, final String encoding) throws UnsupportedEncodingException {
PrintWriter pw = null;
if (encoding == null) {
pw = new PrintWriter(stream);
} else {
pw = new PrintWriter(new OutputStreamWriter(stream, encoding));
}
render(pw, encoding);
pw.flush();
}",0
409,"public static void main(final String[] args) {
try {
System.out.println(""RSSDigester Test Program"");
System.out.println(""Opening input stream ..."");
final InputStream is = RSSDigester.class.getResourceAsStream(""/org/apache/commons/digester3/rss/rss-example.xml"");
System.out.println(""Creating new digester ..."");
final RSSDigester digester = new RSSDigester();
if ((args.length > 0) && (args[0].equals(""-debug""))) {
digester.setLogger(LogFactory.getLog(""RSSDigester""));
}
System.out.println(""Parsing input stream ..."");
final Channel channel = (Channel) digester.parse(is);
System.out.println(""Closing input stream ..."");
is.close();
System.out.println(""Dumping channel info ..."");
channel.render(System.out);
} catch (final Exception e) {
System.out.println(""-->Exception"");
e.printStackTrace(System.out);
}
}",0
410,"public void print() {
System.out.println(""Person #"" + id);
System.out.println(""  category="" + category);
System.out.println(""  name="" + name);
for (final String type : emails.keySet()) {
final String address = emails.get(type);
System.out.println(""  email (type "" + type + "") : "" + address);
}
for (final Address addr : addresses) {
addr.print(System.out, 2);
}
}",0
411,"@Override
public void end(String namespace, String name) throws Exception {
Object[] parameters;
if (paramCount > 0) {
parameters = getDigester().popParams();
if (getDigester().getLogger().isTraceEnabled()) {
for (int i = 0, size = parameters.length; i < size; i++) {
getDigester().getLogger().trace(format(""[CallMethodRule]{%s} parameters[%s]=%s"", getDigester().getMatch(), i, parameters[i]));
}
}
if (paramCount == 1 && parameters[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
parameters = new Object[] { bodyText };
if (paramTypes.length == 0) {
paramTypes = new Class[] { String.class };
}
} else {
parameters = new Object[0];
paramTypes = new Class<?>[0];
}
Object[] paramValues = new Object[paramTypes.length];
for (int i = 0; i < paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(paramTypes[i]))) {
paramValues[i] = convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (targetOffset >= 0) {
target = getDigester().peek(targetOffset);
} else {
target = getDigester().peek(getDigester().getCount() + targetOffset);
}
if (target == null) {
throw new SAXException(format(""[CallMethodRule]{%s} Call target is null (targetOffset=%s, stackdepth=%s)"", getDigester().getMatch(), targetOffset, getDigester().getCount()));
}
if (getDigester().getLogger().isDebugEnabled()) {
Formatter formatter = new Formatter().format(""[CallMethodRule]{%s} Call %s.%s("", getDigester().getMatch(), target.getClass().getName(), methodName);
for (int i = 0; i < paramValues.length; i++) {
formatter.format(""%s%s/%s"", (i > 0 ? "", "" : """"), paramValues[i], paramTypes[i].getName());
}
formatter.format("")"");
getDigester().getLogger().debug(formatter.toString());
}
Object result = null;
if (useExactMatch) {
result = invokeExactMethod(target, methodName, paramValues, paramTypes);
} else {
result = invokeMethod(target, methodName, paramValues, paramTypes);
}
processMethodCallResult(result);
}",0
412,"public Object[] peekParams() {
try {
return (params.peek());
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}",0
413,"public Object[] popParams() {
try {
if (log.isTraceEnabled()) {
log.trace(""Popping params"");
}
return (params.pop());
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}",0
414,"public Object[] peekParams(int n) {
int index = (params.size() - 1) - n;
if (index < 0) {
log.warn(""Empty stack (returning null)"");
return (null);
}
try {
return (params.get(index));
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}",0
415,"@SuppressWarnings(""unchecked"")
private <A extends Annotation, E extends AnnotatedElement, R extends Rule> void handle(A annotation, E element) {
Class<?> annotationType = annotation.annotationType();
if (annotationType.isAnnotationPresent(DigesterRuleList.class)) {
Annotation[] annotations = getAnnotationsArrayValue(annotation);
if (annotations != null && annotations.length > 0) {
for (Annotation ptr : annotations) {
handle(ptr, element);
}
}
} else if (annotationType.isAnnotationPresent(DigesterRule.class)) {
DigesterRule digesterRule = annotationType.getAnnotation(DigesterRule.class);
Class<? extends AnnotationHandler<Annotation, AnnotatedElement>> handlerType = (Class<? extends AnnotationHandler<Annotation, AnnotatedElement>>) digesterRule.handledBy();
try {
AnnotationHandler<Annotation, AnnotatedElement> handler = annotationHandlerFactory.newInstance(handlerType);
handler.handle(annotation, element, this.rulesBinder);
} catch (Exception e) {
rulesBinder.addError(e);
}
}
}",0
416,"protected final void bindRulesFrom(final Class<?> type) {
if (type == null || type.getPackage().getName().startsWith(JAVA_PACKAGE) || rulesBinder.isAlreadyBound(type)) {
return;
}
visitElements(type);
if (!type.isInterface()) {
visitElements(new PrivilegedAction<Constructor<?>[]>() {
public Constructor<?>[] run() {
return type.getDeclaredConstructors();
}
});
visitElements(new PrivilegedAction<Field[]>() {
public Field[] run() {
return type.getDeclaredFields();
}
});
}
visitElements(new PrivilegedAction<Method[]>() {
public Method[] run() {
return type.getDeclaredMethods();
}
});
rulesBinder.markAsBound(type);
bindRulesFrom(type.getSuperclass());
}",0
417,"protected final void bindRulesFrom(final Class<?> type) {
if (type == null || type.getPackage().getName().startsWith(JAVA_PACKAGE) || rulesBinder.isAlreadyBound(type)) {
return;
}
visitElements(type);
if (!type.isInterface()) {
visitElements(new PrivilegedAction<Constructor<?>[]>() {
public Constructor<?>[] run() {
return type.getDeclaredConstructors();
}
});
visitElements(new PrivilegedAction<Field[]>() {
public Field[] run() {
return type.getDeclaredFields();
}
});
}
visitElements(new PrivilegedAction<Method[]>() {
public Method[] run() {
return type.getDeclaredMethods();
}
});
rulesBinder.markAsBound(type);
bindRulesFrom(type.getSuperclass());
}",0
418,"protected final void bindRulesFrom(final Class<?> type) {
if (type == null || type.getPackage().getName().startsWith(JAVA_PACKAGE) || rulesBinder.isAlreadyBound(type)) {
return;
}
visitElements(type);
if (!type.isInterface()) {
visitElements(new PrivilegedAction<Constructor<?>[]>() {
public Constructor<?>[] run() {
return type.getDeclaredConstructors();
}
});
visitElements(new PrivilegedAction<Field[]>() {
public Field[] run() {
return type.getDeclaredFields();
}
});
}
visitElements(new PrivilegedAction<Method[]>() {
public Method[] run() {
return type.getDeclaredMethods();
}
});
rulesBinder.markAsBound(type);
bindRulesFrom(type.getSuperclass());
}",0
419,"public static Annotation[] getAnnotationsArrayValue(Annotation annotation) {
Object value = getAnnotationValue(annotation);
if (value != null && value.getClass().isArray() && Annotation.class.isAssignableFrom(value.getClass().getComponentType())) {
return (Annotation[]) value;
}
return null;
}",0
420,"@Override
protected FactoryCreateRule createRule() {
if (type == null && attributeName == null && creationFactory == null) {
reportError(""factoryCreate()"", ""at least one between 'className', 'attributeName' or 'creationFactory' has to be specified"");
}
if (type != null || attributeName != null) {
return new FactoryCreateRule(type, attributeName, ignoreCreateExceptions);
}
return new FactoryCreateRule(creationFactory, ignoreCreateExceptions);
}",0
421,"@Override
public void begin(String namespace, String name, Attributes attributes) throws Exception {
String fileName = attributes.getValue(""url"");
if (fileName != null && fileName.length() > 0) {
final URL xmlRulesResource;
if (fileName.startsWith(CLASSPATH_URL_PREFIX)) {
String path = fileName.substring(CLASSPATH_URL_PREFIX.length());
if ('/' == path.charAt(0)) {
path = path.substring(1);
}
xmlRulesResource = this.targetRulesBinder.getContextClassLoader().getResource(path);
if (xmlRulesResource == null) {
targetRulesBinder.addError(""Resource '%s' not found, please make sure it is in the classpath"", path);
return;
}
} else {
try {
xmlRulesResource = new URL(fileName);
} catch (MalformedURLException e) {
targetRulesBinder.addError(""An error occurred while inculing file from '%s': %s"", fileName, e.getMessage());
return;
}
}
if (memoryRulesBinder.getIncludedFiles().add(xmlRulesResource.toString())) {
install(new FromXmlRulesModule() {
@Override
protected void loadRules() {
loadXMLRules(xmlRulesResource);
}
});
} else {
targetRulesBinder.addError(""Circular file inclusion detected for XML rules: %s"", xmlRulesResource);
}
}
String className = attributes.getValue(""class"");
if (className != null && className.length() > 0) {
try {
Class<?> cls = Class.forName(className);
if (!RulesModule.class.isAssignableFrom(cls)) {
targetRulesBinder.addError(""Class '%s' if not a '%s' implementation"", className, RulesModule.class.getName());
return;
}
RulesModule rulesSource = (RulesModule) cls.newInstance();
install(rulesSource);
} catch (Exception e) {
targetRulesBinder.addError(""Impossible to include programmatic rules from class '%s': %s"", className, e.getMessage());
}
}
}",0
422,"protected LinkedRuleBuilder forPattern(String pattern) {
return memoryRulesBinder.forPattern(pattern);
}",0
423,"public Date getUpdated() {
return updated;
}",0
424,"public void setUpdated(Date updated) {
this.updated = updated;
}",0
425,"public Date getUpdated() {
return updated;
}",0
426,"public void setUpdated(Date updated) {
this.updated = updated;
}",0
427,"public void print() {
System.out.println(""Person #"" + id);
System.out.println(""  category="" + category);
System.out.println(""  name="" + name);
for (Iterator<String> i = emails.keySet().iterator(); i.hasNext(); ) {
String type = i.next();
String address = emails.get(type);
System.out.println(""  email (type "" + type + "") : "" + address);
}
for (Iterator<Address> i = addresses.iterator(); i.hasNext(); ) {
Address addr = i.next();
addr.print(System.out, 2);
}
}",0
428,"private static java.io.Reader getInputData(String filename) throws java.io.IOException {
java.io.File srcfile = new java.io.File(filename);
java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream(1000);
byte[] buf = new byte[100];
java.io.FileInputStream fis = new java.io.FileInputStream(srcfile);
for (; ; ) {
int nread = fis.read(buf);
if (nread == -1) {
break;
}
baos.write(buf, 0, nread);
}
fis.close();
return new java.io.StringReader(baos.toString());
}",0
429,"private static java.io.Reader getInputData(String filename) throws java.io.IOException {
java.io.File srcfile = new java.io.File(filename);
java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream(1000);
byte[] buf = new byte[100];
java.io.FileInputStream fis = new java.io.FileInputStream(srcfile);
for (; ; ) {
int nread = fis.read(buf);
if (nread == -1) {
break;
}
baos.write(buf, 0, nread);
}
fis.close();
return new java.io.StringReader(baos.toString());
}",0
430,"private static java.io.Reader getInputData(String filename) throws java.io.IOException {
java.io.File srcfile = new java.io.File(filename);
java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream(1000);
byte[] buf = new byte[100];
java.io.FileInputStream fis = new java.io.FileInputStream(srcfile);
for (; ; ) {
int nread = fis.read(buf);
if (nread == -1) {
break;
}
baos.write(buf, 0, nread);
}
fis.close();
return new java.io.StringReader(baos.toString());
}",0
431,"public static void main(String[] args) {
if (args.length != 1) {
usage();
System.exit(-1);
}
String filename = args[0];
Digester d = new Digester();
Connection connection = null;
addRules(d, connection);
System.out.println(""Parsing commencing..."");
try {
File srcfile = new File(filename);
d.parse(srcfile);
} catch (IOException ioe) {
System.out.println(""Error reading input file:"" + ioe.getMessage());
System.exit(-1);
} catch (SAXException se) {
System.out.println(""Error parsing input file:"" + se.getMessage());
System.exit(-1);
}
System.out.println(""Parsing complete."");
}",0
432,private Connection conn;,0
433,"public void setUpdated(Date updated) {
this.updated = updated;
}",0
434,"public Date getUpdated() {
return updated;
}",0
435,"public Date getUpdated() {
return updated;
}",0
436,"public void setUpdated(Date updated) {
this.updated = updated;
}",0
437,"public String transform(String s) {
if (toLower) {
return s.toLowerCase();
}
return s.toUpperCase();
}",0
438,"private void execute() throws IOException {
FileReader inRaw = new FileReader(source);
FileWriter out = new FileWriter(dest);
BufferedReader in = new BufferedReader(inRaw);
while (true) {
String inStr = in.readLine();
if (inStr == null)
break;
String outStr = transformer.transform(inStr);
out.write(outStr);
out.write('\n');
}
inRaw.close();
out.close();
System.out.println(""Contents of file "" + source + "" have been transformed, and"" + "" written to file "" + dest + ""."");
}",0
439,"private void execute() throws IOException {
FileReader inRaw = new FileReader(source);
FileWriter out = new FileWriter(dest);
BufferedReader in = new BufferedReader(inRaw);
while (true) {
String inStr = in.readLine();
if (inStr == null)
break;
String outStr = transformer.transform(inStr);
out.write(outStr);
out.write('\n');
}
inRaw.close();
out.close();
System.out.println(""Contents of file "" + source + "" have been transformed, and"" + "" written to file "" + dest + ""."");
}",0
440,"private void execute() throws IOException {
FileReader inRaw = new FileReader(source);
FileWriter out = new FileWriter(dest);
BufferedReader in = new BufferedReader(inRaw);
while (true) {
String inStr = in.readLine();
if (inStr == null)
break;
String outStr = transformer.transform(inStr);
out.write(outStr);
out.write('\n');
}
inRaw.close();
out.close();
System.out.println(""Contents of file "" + source + "" have been transformed, and"" + "" written to file "" + dest + ""."");
}",0
441,"private void execute() throws IOException {
FileReader inRaw = new FileReader(source);
FileWriter out = new FileWriter(dest);
BufferedReader in = new BufferedReader(inRaw);
while (true) {
String inStr = in.readLine();
if (inStr == null)
break;
String outStr = transformer.transform(inStr);
out.write(outStr);
out.write('\n');
}
inRaw.close();
out.close();
System.out.println(""Contents of file "" + source + "" have been transformed, and"" + "" written to file "" + dest + ""."");
}",0
442,"private void execute() throws IOException {
FileReader inRaw = new FileReader(source);
FileWriter out = new FileWriter(dest);
BufferedReader in = new BufferedReader(inRaw);
while (true) {
String inStr = in.readLine();
if (inStr == null)
break;
String outStr = transformer.transform(inStr);
out.write(outStr);
out.write('\n');
}
inRaw.close();
out.close();
System.out.println(""Contents of file "" + source + "" have been transformed, and"" + "" written to file "" + dest + ""."");
}",0
443,"private void execute() throws IOException {
FileReader inRaw = new FileReader(source);
FileWriter out = new FileWriter(dest);
BufferedReader in = new BufferedReader(inRaw);
while (true) {
String inStr = in.readLine();
if (inStr == null)
break;
String outStr = transformer.transform(inStr);
out.write(outStr);
out.write('\n');
}
inRaw.close();
out.close();
System.out.println(""Contents of file "" + source + "" have been transformed, and"" + "" written to file "" + dest + ""."");
}",0
444,"public String transform(String s) {
StringBuilder buf = new StringBuilder(s);
while (true) {
int idx = buf.indexOf(from);
if (idx == -1) {
break;
}
buf.replace(idx, idx + from.length(), to);
}
return buf.toString();
}",0
445,"public void render(OutputStream stream, String encoding) throws UnsupportedEncodingException {
PrintWriter pw = null;
if (encoding == null) {
pw = new PrintWriter(stream);
} else {
pw = new PrintWriter(new OutputStreamWriter(stream, encoding));
}
render(pw, encoding);
pw.flush();
}",0
446,"public static void main(String[] args) {
try {
System.out.println(""RSSDigester Test Program"");
System.out.println(""Opening input stream ..."");
InputStream is = RSSDigester.class.getResourceAsStream(""/org/apache/commons/digester3/rss/rss-example.xml"");
System.out.println(""Creating new digester ..."");
RSSDigester digester = new RSSDigester();
if ((args.length > 0) && (args[0].equals(""-debug""))) {
digester.setLogger(LogFactory.getLog(""RSSDigester""));
}
System.out.println(""Parsing input stream ..."");
Channel channel = (Channel) digester.parse(is);
System.out.println(""Closing input stream ..."");
is.close();
System.out.println(""Dumping channel info ..."");
channel.render(System.out);
} catch (Exception e) {
System.out.println(""-->Exception"");
e.printStackTrace(System.out);
}
}",0
447,"public void print() {
System.out.println(""Person #"" + id);
System.out.println(""  category="" + category);
System.out.println(""  name="" + name);
for (Iterator<String> i = emails.keySet().iterator(); i.hasNext(); ) {
String type = i.next();
String address = emails.get(type);
System.out.println(""  email (type "" + type + "") : "" + address);
}
for (Iterator<Address> i = addresses.iterator(); i.hasNext(); ) {
Address addr = i.next();
addr.print(System.out, 2);
}
}",0
448,"public void end() throws Exception {
Object[] parameters = null;
if (paramCount > 0) {
parameters = (Object[]) digester.popParams();
if (digester.log.isTraceEnabled()) {
for (int i = 0, size = parameters.length; i < size; i++) {
digester.log.trace(""[CallMethodRule]("" + i + "")"" + parameters[i]);
}
}
if (paramCount == 1 && parameters[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
parameters = new Object[1];
parameters[0] = bodyText;
if (paramTypes.length == 0) {
paramTypes = new Class[1];
paramTypes[0] = String.class;
}
} else {
;
}
Object[] paramValues = new Object[paramTypes.length];
for (int i = 0; i < paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(paramTypes[i]))) {
paramValues[i] = ConvertUtils.convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (targetOffset >= 0) {
target = digester.peek(targetOffset);
} else {
target = digester.peek(digester.getCount() + targetOffset);
}
if (target == null) {
StringBuffer sb = new StringBuffer();
sb.append(""[CallMethodRule]{"");
sb.append(digester.match);
sb.append(""} Call target is null ("");
sb.append(""targetOffset="");
sb.append(targetOffset);
sb.append("",stackdepth="");
sb.append(digester.getCount());
sb.append("")"");
throw new org.xml.sax.SAXException(sb.toString());
}
if (digester.log.isDebugEnabled()) {
StringBuffer sb = new StringBuffer(""[CallMethodRule]{"");
sb.append(digester.match);
sb.append(""} Call "");
sb.append(target.getClass().getName());
sb.append(""."");
sb.append(methodName);
sb.append(""("");
for (int i = 0; i < paramValues.length; i++) {
if (i > 0) {
sb.append("","");
}
if (paramValues[i] == null) {
sb.append(""null"");
} else {
sb.append(paramValues[i].toString());
}
sb.append(""/"");
if (paramTypes[i] == null) {
sb.append(""null"");
} else {
sb.append(paramTypes[i].getName());
}
}
sb.append("")"");
digester.log.debug(sb.toString());
}
Object result = null;
if (useExactMatch) {
result = MethodUtils.invokeExactMethod(target, methodName, paramValues, paramTypes);
} else {
result = MethodUtils.invokeMethod(target, methodName, paramValues, paramTypes);
}
processMethodCallResult(result);
}",0
449,"public void end() throws Exception {
Object[] parameters = null;
if (paramCount > 0) {
parameters = (Object[]) digester.popParams();
if (digester.log.isTraceEnabled()) {
for (int i = 0, size = parameters.length; i < size; i++) {
digester.log.trace(""[CallMethodRule]("" + i + "")"" + parameters[i]);
}
}
if (paramCount == 1 && parameters[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
parameters = new Object[1];
parameters[0] = bodyText;
if (paramTypes.length == 0) {
paramTypes = new Class[1];
paramTypes[0] = String.class;
}
} else {
;
}
Object[] paramValues = new Object[paramTypes.length];
for (int i = 0; i < paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(paramTypes[i]))) {
paramValues[i] = ConvertUtils.convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (targetOffset >= 0) {
target = digester.peek(targetOffset);
} else {
target = digester.peek(digester.getCount() + targetOffset);
}
if (target == null) {
StringBuffer sb = new StringBuffer();
sb.append(""[CallMethodRule]{"");
sb.append(digester.match);
sb.append(""} Call target is null ("");
sb.append(""targetOffset="");
sb.append(targetOffset);
sb.append("",stackdepth="");
sb.append(digester.getCount());
sb.append("")"");
throw new org.xml.sax.SAXException(sb.toString());
}
if (digester.log.isDebugEnabled()) {
StringBuffer sb = new StringBuffer(""[CallMethodRule]{"");
sb.append(digester.match);
sb.append(""} Call "");
sb.append(target.getClass().getName());
sb.append(""."");
sb.append(methodName);
sb.append(""("");
for (int i = 0; i < paramValues.length; i++) {
if (i > 0) {
sb.append("","");
}
if (paramValues[i] == null) {
sb.append(""null"");
} else {
sb.append(paramValues[i].toString());
}
sb.append(""/"");
if (paramTypes[i] == null) {
sb.append(""null"");
} else {
sb.append(paramTypes[i].getName());
}
}
sb.append("")"");
digester.log.debug(sb.toString());
}
Object result = null;
if (useExactMatch) {
result = MethodUtils.invokeExactMethod(target, methodName, paramValues, paramTypes);
} else {
result = MethodUtils.invokeMethod(target, methodName, paramValues, paramTypes);
}
processMethodCallResult(result);
}",0
450,"public SAXParser getParser() {
if (parser != null) {
return (parser);
}
try {
if (validating && (schemaLocation != null)) {
Properties properties = new Properties();
properties.put(""SAXParserFactory"", getFactory());
if (schemaLocation != null) {
properties.put(""schemaLocation"", schemaLocation);
properties.put(""schemaLanguage"", schemaLanguage);
}
parser = ParserFeatureSetterFactory.newSAXParser(properties);
} else {
parser = getFactory().newSAXParser();
}
} catch (Exception e) {
log.error(""Digester.getParser: "", e);
return (null);
}
return (parser);
}",0
451,"public InputSource resolveEntity(String publicId, String systemId) throws SAXException {
if (saxLog.isDebugEnabled()) {
saxLog.debug(""resolveEntity('"" + publicId + ""', '"" + systemId + ""')"");
}
if (publicId != null)
this.publicId = publicId;
URL entityURL = null;
if (publicId != null) {
entityURL = (URL) entityValidator.get(publicId);
}
if (schemaLocation != null && entityURL == null && systemId != null) {
entityURL = (URL) entityValidator.get(systemId);
}
if (entityURL == null) {
if (systemId == null) {
if (log.isDebugEnabled()) {
log.debug("" Cannot resolve entity: '"" + entityURL + ""'"");
}
return (null);
} else {
if (log.isDebugEnabled()) {
log.debug("" Trying to resolve using system ID '"" + systemId + ""'"");
}
try {
entityURL = new URL(systemId);
} catch (MalformedURLException e) {
throw new IllegalArgumentException(""Malformed URL '"" + systemId + ""' : "" + e.getMessage());
}
}
}
if (log.isDebugEnabled()) {
log.debug("" Resolving to alternate DTD '"" + entityURL + ""'"");
}
try {
return createInputSourceFromURL(entityURL);
} catch (Exception e) {
throw createSAXException(e);
}
}",0
452,protected String namespaceURI = null;,0
453,private String currChildNamespaceURI = null;,0
454,"protected static String JAXP_SCHEMA_LANGUAGE = ""http://java.sun.com/xml/jaxp/properties/schemaLanguage"";",0
455,"protected static Log log = LogFactory.getLog(""org.apache.commons.digester.Digester.sax"");",0
456,"protected static String XERCES_DYNAMIC = ""http://apache.org/xml/features/validation/dynamic"";",0
457,"protected static Log log = LogFactory.getLog(""org.apache.commons.digester.Digester.sax"");",0
458,protected static String versionNumber = null;,0
459,"protected static String JAXP_SCHEMA_LANGUAGE = ""http://java.sun.com/xml/jaxp/properties/schemaLanguage"";",0
460,protected static float version;,0
461,"protected static String XERCES_SCHEMA = ""http://apache.org/xml/features/validation/schema"";",0
462,"public static SAXParser newSAXParser(Properties properties) throws ParserConfigurationException, SAXException, SAXNotSupportedException {
SAXParserFactory factory = (SAXParserFactory) properties.get(""SAXParserFactory"");
if (versionNumber == null) {
versionNumber = getXercesVersion();
version = new Float(versionNumber).floatValue();
}
// Note: 2.2 is completely broken (with XML Schema).
if (version > 2.1) {
configureXerces(factory);
return factory.newSAXParser();
} else {
SAXParser parser = factory.newSAXParser();
configureOldXerces(parser, properties);
return parser;
}
}",0
463,"private static String getXercesVersion() {
String versionNumber = ""1.0"";
try {
Class versionClass = Class.forName(""org.apache.xerces.impl.Version"");
Method method = versionClass.getMethod(""getVersion"", (Class[]) null);
String version = (String) method.invoke(null, (Object[]) null);
versionNumber = version.substring(""Xerces-J"".length(), version.lastIndexOf("".""));
} catch (Exception ex) {
}
return versionNumber;
}",0
464,"public final String DFLT_PLUGIN_ID_ATTR = ""plugin-id"";",0
465,"// TODO: Consider making following four constants static in 2.0
public final String DFLT_PLUGIN_CLASS_ATTR_NS = null;",0
466,"public final String DFLT_PLUGIN_CLASS_ATTR = ""plugin-class"";",0
467,"public static String DFLT_METHOD_NAME = ""addRules"";",0
468,"public static String DFLT_RULECLASS_ATTR = ""ruleclass"";",0
469,"public static String DFLT_METHOD_ATTR = ""method"";",0
470,"public static String DFLT_METHOD_NAME = ""addRules"";",0
471,"public static String DFLT_RULECLASS_SUFFIX = ""RuleInfo"";",0
472,"public static String DFLT_METHOD_NAME = ""addRules"";",0
473,"public static String DFLT_RESOURCE_SUFFIX = ""RuleInfo.xml"";",0
474,"public static String DFLT_FILENAME_ATTR = ""file"";",0
475,"public static String DFLT_METHOD_ATTR = ""method"";",0
476,"public static String DFLT_RESOURCE_ATTR = ""resource"";",0
477,"public static String DFLT_FALSEVAL = ""false"";",0
478,"public static String DFLT_PROPS_ATTR = ""setprops"";",0
479,private FromXmlRuleSet ruleSet;,0
480,"@Override
public void end(String namespace, String name) throws Exception {
Object[] parameters = null;
if (paramCount > 0) {
parameters = getDigester().popParams();
if (getDigester().getLogger().isTraceEnabled()) {
for (int i = 0, size = parameters.length; i < size; i++) {
getDigester().getLogger().trace(""[CallMethodRule]("" + i + "")"" + parameters[i]);
}
}
if (paramCount == 1 && parameters[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
parameters = new Object[1];
parameters[0] = bodyText;
if (paramTypes.length == 0) {
paramTypes = new Class[1];
paramTypes[0] = String.class;
}
} else {
}
Object[] paramValues = new Object[paramTypes.length];
for (int i = 0; i < paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(paramTypes[i]))) {
paramValues[i] = ConvertUtils.convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (targetOffset >= 0) {
target = getDigester().peek(targetOffset);
} else {
target = getDigester().peek(getDigester().getCount() + targetOffset);
}
if (target == null) {
StringBuilder sb = new StringBuilder();
sb.append(""[CallMethodRule]{"");
sb.append(getDigester().getMatch());
sb.append(""} Call target is null ("");
sb.append(""targetOffset="");
sb.append(targetOffset);
sb.append("",stackdepth="");
sb.append(getDigester().getCount());
sb.append("")"");
throw new org.xml.sax.SAXException(sb.toString());
}
if (getDigester().getLogger().isDebugEnabled()) {
StringBuilder sb = new StringBuilder(""[CallMethodRule]{"");
sb.append(getDigester().getMatch());
sb.append(""} Call "");
sb.append(target.getClass().getName());
sb.append(""."");
sb.append(methodName);
sb.append(""("");
for (int i = 0; i < paramValues.length; i++) {
if (i > 0) {
sb.append("","");
}
if (paramValues[i] == null) {
sb.append(""null"");
} else {
sb.append(paramValues[i].toString());
}
sb.append(""/"");
if (paramTypes[i] == null) {
sb.append(""null"");
} else {
sb.append(paramTypes[i].getName());
}
}
sb.append("")"");
getDigester().getLogger().debug(sb.toString());
}
Object result = null;
if (useExactMatch) {
result = MethodUtils.invokeExactMethod(target, methodName, paramValues, paramTypes);
} else {
result = MethodUtils.invokeMethod(target, methodName, paramValues, paramTypes);
}
processMethodCallResult(result);
}",0
481,"@Override
public void end(String namespace, String name) throws Exception {
Object[] parameters = null;
if (paramCount > 0) {
parameters = getDigester().popParams();
if (getDigester().getLogger().isTraceEnabled()) {
for (int i = 0, size = parameters.length; i < size; i++) {
getDigester().getLogger().trace(""[CallMethodRule]("" + i + "")"" + parameters[i]);
}
}
if (paramCount == 1 && parameters[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
parameters = new Object[1];
parameters[0] = bodyText;
if (paramTypes.length == 0) {
paramTypes = new Class[1];
paramTypes[0] = String.class;
}
} else {
}
Object[] paramValues = new Object[paramTypes.length];
for (int i = 0; i < paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(paramTypes[i]))) {
paramValues[i] = ConvertUtils.convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (targetOffset >= 0) {
target = getDigester().peek(targetOffset);
} else {
target = getDigester().peek(getDigester().getCount() + targetOffset);
}
if (target == null) {
StringBuilder sb = new StringBuilder();
sb.append(""[CallMethodRule]{"");
sb.append(getDigester().getMatch());
sb.append(""} Call target is null ("");
sb.append(""targetOffset="");
sb.append(targetOffset);
sb.append("",stackdepth="");
sb.append(getDigester().getCount());
sb.append("")"");
throw new org.xml.sax.SAXException(sb.toString());
}
if (getDigester().getLogger().isDebugEnabled()) {
StringBuilder sb = new StringBuilder(""[CallMethodRule]{"");
sb.append(getDigester().getMatch());
sb.append(""} Call "");
sb.append(target.getClass().getName());
sb.append(""."");
sb.append(methodName);
sb.append(""("");
for (int i = 0; i < paramValues.length; i++) {
if (i > 0) {
sb.append("","");
}
if (paramValues[i] == null) {
sb.append(""null"");
} else {
sb.append(paramValues[i].toString());
}
sb.append(""/"");
if (paramTypes[i] == null) {
sb.append(""null"");
} else {
sb.append(paramTypes[i].getName());
}
}
sb.append("")"");
getDigester().getLogger().debug(sb.toString());
}
Object result = null;
if (useExactMatch) {
result = MethodUtils.invokeExactMethod(target, methodName, paramValues, paramTypes);
} else {
result = MethodUtils.invokeMethod(target, methodName, paramValues, paramTypes);
}
processMethodCallResult(result);
}",0
482,"public Object[] popParams() {
try {
if (log.isTraceEnabled()) {
log.trace(""Popping params"");
}
return (params.pop());
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}",0
483,"public Object[] peekParams() {
try {
return (params.peek());
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}",0
484,"public Object[] peekParams(int n) {
int index = (params.size() - 1) - n;
if (index < 0) {
log.warn(""Empty stack (returning null)"");
return (null);
}
try {
return (params.get(index));
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}",0
485,private String currChildNamespaceURI = null;,0
486,private final float loadFactor = 0.75f;,0
487,private final float loadFactor = 0.75f;,0
488,private final int cacheSize = 255;,0
489,"private final Map<Class<?>, FromAnnotationsRuleSet> data = new LinkedHashMap<Class<?>, FromAnnotationsRuleSet>(capacity, loadFactor) {
private static final long serialVersionUID = 1L;
@Override
protected boolean removeEldestEntry(Map.Entry<Class<?>, FromAnnotationsRuleSet> eldest) {
return size() > cacheSize;
}
};",0
490,"public MethodArgument(int index, Class<?> parameterType, Annotation[] annotations) {
this.index = index;
this.parameterType = parameterType;
this.annotations = annotations;
}",0
491,"public static Annotation[] getAnnotationsArrayValue(Annotation annotation) {
Object value = getAnnotationValue(annotation);
if (value != null && value.getClass().isArray() && Annotation.class.isAssignableFrom(value.getClass().getComponentType())) {
return (Annotation[]) value;
}
return null;
}",0
492,public final String DFLT_PLUGIN_ID_ATTR_NS = null;,0
493,"public final String DFLT_PLUGIN_ID_ATTR = ""plugin-id"";",0
494,"public final String DFLT_PLUGIN_CLASS_ATTR = ""plugin-class"";",0
495,"public static String DFLT_METHOD_ATTR = ""method"";",0
496,"public static String DFLT_RULECLASS_ATTR = ""ruleclass"";",0
497,"public static String DFLT_METHOD_NAME = ""addRules"";",0
498,"public static String DFLT_METHOD_NAME = ""addRules"";",0
499,"public static String DFLT_RULECLASS_SUFFIX = ""RuleInfo"";",0
500,"public static String DFLT_METHOD_NAME = ""addRules"";",0
501,"public static String DFLT_RESOURCE_SUFFIX = ""RuleInfo.xml"";",0
502,"public static String DFLT_FILENAME_ATTR = ""file"";",0
503,"public static String DFLT_METHOD_ATTR = ""method"";",0
504,"public static String DFLT_RESOURCE_ATTR = ""resource"";",0
505,"public static String DFLT_PROPS_ATTR = ""setprops"";",0
506,"public static String DFLT_FALSEVAL = ""false"";",0
507,"@Override
public void end(String namespace, String name) throws Exception {
Object[] parameters;
if (paramCount > 0) {
parameters = getDigester().popParams();
if (getDigester().getLogger().isTraceEnabled()) {
for (int i = 0, size = parameters.length; i < size; i++) {
getDigester().getLogger().trace(format(""[CallMethodRule]{%s} parameters[%s]=%s"", getDigester().getMatch(), i, parameters[i]));
}
}
if (paramCount == 1 && parameters[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
parameters = new Object[] { bodyText };
if (paramTypes.length == 0) {
paramTypes = new Class[] { String.class };
}
} else {
parameters = new Object[0];
paramTypes = new Class<?>[0];
}
Object[] paramValues = new Object[paramTypes.length];
for (int i = 0; i < paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(paramTypes[i]))) {
paramValues[i] = convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (targetOffset >= 0) {
target = getDigester().peek(targetOffset);
} else {
target = getDigester().peek(getDigester().getCount() + targetOffset);
}
if (target == null) {
throw new SAXException(format(""[CallMethodRule]{%s} Call target is null (targetOffset=%s, stackdepth=%s)"", getDigester().getMatch(), targetOffset, getDigester().getCount()));
}
if (getDigester().getLogger().isDebugEnabled()) {
Formatter formatter = new Formatter().format(""[CallMethodRule]{%s} Call %s.%s("", getDigester().getMatch(), target.getClass().getName(), methodName);
for (int i = 0; i < paramValues.length; i++) {
formatter.format(""%s%s/%s"", (i > 0 ? "", "" : """"), paramValues[i], paramTypes[i].getName());
}
formatter.format("")"");
getDigester().getLogger().debug(formatter.toString());
}
Object result = null;
if (useExactMatch) {
result = invokeExactMethod(target, methodName, paramValues, paramTypes);
} else {
result = invokeMethod(target, methodName, paramValues, paramTypes);
}
processMethodCallResult(result);
}",0
508,"public Object[] peekParams(int n) {
int index = (params.size() - 1) - n;
if (index < 0) {
log.warn(""Empty stack (returning null)"");
return (null);
}
try {
return (params.get(index));
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}",0
509,"public Object[] peekParams() {
try {
return (params.peek());
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}",0
510,"public Object[] popParams() {
try {
if (log.isTraceEnabled()) {
log.trace(""Popping params"");
}
return (params.pop());
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}",0
511,"@SuppressWarnings(""unchecked"")
private <A extends Annotation, E extends AnnotatedElement, R extends Rule> void handle(A annotation, E element) {
Class<?> annotationType = annotation.annotationType();
if (annotationType.isAnnotationPresent(DigesterRuleList.class)) {
Annotation[] annotations = getAnnotationsArrayValue(annotation);
if (annotations != null && annotations.length > 0) {
for (Annotation ptr : annotations) {
handle(ptr, element);
}
}
} else if (annotationType.isAnnotationPresent(DigesterRule.class)) {
DigesterRule digesterRule = annotationType.getAnnotation(DigesterRule.class);
Class<? extends AnnotationHandler<Annotation, AnnotatedElement>> handlerType = (Class<? extends AnnotationHandler<Annotation, AnnotatedElement>>) digesterRule.handledBy();
try {
AnnotationHandler<Annotation, AnnotatedElement> handler = annotationHandlerFactory.newInstance(handlerType);
handler.handle(annotation, element, this.rulesBinder);
} catch (Exception e) {
rulesBinder.addError(e);
}
}
}",0
512,"protected final void bindRulesFrom(final Class<?> type) {
if (type == null || type.getPackage().getName().startsWith(JAVA_PACKAGE) || rulesBinder.isAlreadyBound(type)) {
return;
}
visitElements(type);
if (!type.isInterface()) {
visitElements(new PrivilegedAction<Constructor<?>[]>() {
public Constructor<?>[] run() {
return type.getDeclaredConstructors();
}
});
visitElements(new PrivilegedAction<Field[]>() {
public Field[] run() {
return type.getDeclaredFields();
}
});
}
visitElements(new PrivilegedAction<Method[]>() {
public Method[] run() {
return type.getDeclaredMethods();
}
});
rulesBinder.markAsBound(type);
bindRulesFrom(type.getSuperclass());
}",0
513,"protected final void bindRulesFrom(final Class<?> type) {
if (type == null || type.getPackage().getName().startsWith(JAVA_PACKAGE) || rulesBinder.isAlreadyBound(type)) {
return;
}
visitElements(type);
if (!type.isInterface()) {
visitElements(new PrivilegedAction<Constructor<?>[]>() {
public Constructor<?>[] run() {
return type.getDeclaredConstructors();
}
});
visitElements(new PrivilegedAction<Field[]>() {
public Field[] run() {
return type.getDeclaredFields();
}
});
}
visitElements(new PrivilegedAction<Method[]>() {
public Method[] run() {
return type.getDeclaredMethods();
}
});
rulesBinder.markAsBound(type);
bindRulesFrom(type.getSuperclass());
}",0
514,"public static Annotation[] getAnnotationsArrayValue(Annotation annotation) {
Object value = getAnnotationValue(annotation);
if (value != null && value.getClass().isArray() && Annotation.class.isAssignableFrom(value.getClass().getComponentType())) {
return (Annotation[]) value;
}
return null;
}",0
515,"@Override
protected FactoryCreateRule createRule() {
if (type == null && attributeName == null && creationFactory == null) {
reportError(""factoryCreate()"", ""at least one between 'className', 'attributeName' or 'creationFactory' has to be specified"");
}
if (type != null || attributeName != null) {
return new FactoryCreateRule(type, attributeName, ignoreCreateExceptions);
}
return new FactoryCreateRule(creationFactory, ignoreCreateExceptions);
}",0
516,"@Override
public void begin(String namespace, String name, Attributes attributes) throws Exception {
String fileName = attributes.getValue(""url"");
if (fileName != null && fileName.length() > 0) {
final URL xmlRulesResource;
if (fileName.startsWith(CLASSPATH_URL_PREFIX)) {
String path = fileName.substring(CLASSPATH_URL_PREFIX.length());
if ('/' == path.charAt(0)) {
path = path.substring(1);
}
xmlRulesResource = this.targetRulesBinder.getContextClassLoader().getResource(path);
if (xmlRulesResource == null) {
targetRulesBinder.addError(""Resource '%s' not found, please make sure it is in the classpath"", path);
return;
}
} else {
try {
xmlRulesResource = new URL(fileName);
} catch (MalformedURLException e) {
targetRulesBinder.addError(""An error occurred while inculing file from '%s': %s"", fileName, e.getMessage());
return;
}
}
if (memoryRulesBinder.getIncludedFiles().add(xmlRulesResource.toString())) {
install(new FromXmlRulesModule() {
@Override
protected void loadRules() {
loadXMLRules(xmlRulesResource);
}
});
} else {
targetRulesBinder.addError(""Circular file inclusion detected for XML rules: %s"", xmlRulesResource);
}
}
String className = attributes.getValue(""class"");
if (className != null && className.length() > 0) {
try {
Class<?> cls = Class.forName(className);
if (!RulesModule.class.isAssignableFrom(cls)) {
targetRulesBinder.addError(""Class '%s' if not a '%s' implementation"", className, RulesModule.class.getName());
return;
}
RulesModule rulesSource = (RulesModule) cls.newInstance();
install(rulesSource);
} catch (Exception e) {
targetRulesBinder.addError(""Impossible to include programmatic rules from class '%s': %s"", className, e.getMessage());
}
}
}",0
517,"protected LinkedRuleBuilder forPattern(String pattern) {
return memoryRulesBinder.forPattern(pattern);
}",0
518,"private void invoke() throws Exception {
Object child = getChild();
Object parent = getParent();
if (getDigester().getLogger().isDebugEnabled()) {
if (parent == null) {
getDigester().getLogger().debug(format(""[%s]{%s} Call [NULL PARENT].%s(%s)"", getClass().getSimpleName(), getDigester().getMatch(), methodName, child));
} else {
getDigester().getLogger().debug(format(""[%s]{%s} Call %s.%s(%s)"", getClass().getSimpleName(), getDigester().getMatch(), parent.getClass().getName(), methodName, child));
}
}
Class<?>[] paramTypes = new Class<?>[1];
if (paramType != null) {
paramTypes[0] = getDigester().getClassLoader().loadClass(paramTypeName);
} else {
paramTypes[0] = child.getClass();
}
if (useExactMatch) {
invokeExactMethod(parent, methodName, new Object[] { child }, paramTypes);
} else {
invokeMethod(parent, methodName, new Object[] { child }, paramTypes);
}
}",0
519,"@Override
public void end(String namespace, String name) throws Exception {
Object[] parameters;
if (paramCount > 0) {
parameters = getDigester().popParams();
if (getDigester().getLogger().isTraceEnabled()) {
for (int i = 0, size = parameters.length; i < size; i++) {
getDigester().getLogger().trace(format(""[CallMethodRule]{%s} parameters[%s]=%s"", getDigester().getMatch(), i, parameters[i]));
}
}
if (paramCount == 1 && parameters[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
parameters = new Object[] { bodyText };
if (paramTypes.length == 0) {
paramTypes = new Class[] { String.class };
}
} else {
parameters = new Object[0];
paramTypes = new Class<?>[0];
}
Object[] paramValues = new Object[paramTypes.length];
for (int i = 0; i < paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(paramTypes[i]))) {
paramValues[i] = convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (targetOffset >= 0) {
target = getDigester().peek(targetOffset);
} else {
target = getDigester().peek(getDigester().getCount() + targetOffset);
}
if (target == null) {
throw new SAXException(format(""[CallMethodRule]{%s} Call target is null (targetOffset=%s, stackdepth=%s)"", getDigester().getMatch(), targetOffset, getDigester().getCount()));
}
if (getDigester().getLogger().isDebugEnabled()) {
Formatter formatter = new Formatter().format(""[CallMethodRule]{%s} Call %s.%s("", getDigester().getMatch(), target.getClass().getName(), methodName);
for (int i = 0; i < paramValues.length; i++) {
formatter.format(""%s%s/%s"", (i > 0 ? "", "" : """"), paramValues[i], paramTypes[i].getName());
}
formatter.format("")"");
getDigester().getLogger().debug(formatter.toString());
}
Object result = null;
if (useExactMatch) {
result = invokeExactMethod(target, methodName, paramValues, paramTypes);
} else {
result = invokeMethod(target, methodName, paramValues, paramTypes);
}
processMethodCallResult(result);
}",0
520,"public Object[] peekParams(int n) {
int index = (params.size() - 1) - n;
if (index < 0) {
log.warn(""Empty stack (returning null)"");
return (null);
}
try {
return (params.get(index));
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}",0
521,"public Object[] popParams() {
try {
if (log.isTraceEnabled()) {
log.trace(""Popping params"");
}
return (params.pop());
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}",0
522,"public Object[] peekParams() {
try {
return (params.peek());
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}",0
523,"protected final void bindRulesFrom(final Class<?> type) {
if (type == null || type.getPackage().getName().startsWith(JAVA_PACKAGE) || rulesBinder.isAlreadyBound(type)) {
return;
}
visitElements(type);
if (!type.isInterface()) {
visitElements(new PrivilegedAction<Constructor<?>[]>() {
public Constructor<?>[] run() {
return type.getDeclaredConstructors();
}
});
visitElements(new PrivilegedAction<Field[]>() {
public Field[] run() {
return type.getDeclaredFields();
}
});
}
visitElements(new PrivilegedAction<Method[]>() {
public Method[] run() {
return type.getDeclaredMethods();
}
});
rulesBinder.markAsBound(type);
bindRulesFrom(type.getSuperclass());
}",0
524,"protected final void bindRulesFrom(final Class<?> type) {
if (type == null || type.getPackage().getName().startsWith(JAVA_PACKAGE) || rulesBinder.isAlreadyBound(type)) {
return;
}
visitElements(type);
if (!type.isInterface()) {
visitElements(new PrivilegedAction<Constructor<?>[]>() {
public Constructor<?>[] run() {
return type.getDeclaredConstructors();
}
});
visitElements(new PrivilegedAction<Field[]>() {
public Field[] run() {
return type.getDeclaredFields();
}
});
}
visitElements(new PrivilegedAction<Method[]>() {
public Method[] run() {
return type.getDeclaredMethods();
}
});
rulesBinder.markAsBound(type);
bindRulesFrom(type.getSuperclass());
}",0
525,"@SuppressWarnings(""unchecked"")
private <A extends Annotation, E extends AnnotatedElement, R extends Rule> void handle(A annotation, E element) {
Class<?> annotationType = annotation.annotationType();
if (annotationType.isAnnotationPresent(DigesterRuleList.class)) {
Annotation[] annotations = getAnnotationsArrayValue(annotation);
if (annotations != null && annotations.length > 0) {
for (Annotation ptr : annotations) {
handle(ptr, element);
}
}
} else if (annotationType.isAnnotationPresent(DigesterRule.class)) {
DigesterRule digesterRule = annotationType.getAnnotation(DigesterRule.class);
Class<? extends AnnotationHandler<Annotation, AnnotatedElement>> handlerType = (Class<? extends AnnotationHandler<Annotation, AnnotatedElement>>) digesterRule.handledBy();
try {
AnnotationHandler<Annotation, AnnotatedElement> handler = annotationHandlerFactory.newInstance(handlerType);
handler.handle(annotation, element, this.rulesBinder);
} catch (Exception e) {
rulesBinder.addError(e);
}
}
}",0
526,"@SuppressWarnings(""unchecked"")
private <A extends Annotation, E extends AnnotatedElement, R extends Rule> void handle(A annotation, E element) {
Class<?> annotationType = annotation.annotationType();
if (annotationType.isAnnotationPresent(DigesterRuleList.class)) {
Annotation[] annotations = getAnnotationsArrayValue(annotation);
if (annotations != null && annotations.length > 0) {
for (Annotation ptr : annotations) {
handle(ptr, element);
}
}
} else if (annotationType.isAnnotationPresent(DigesterRule.class)) {
DigesterRule digesterRule = annotationType.getAnnotation(DigesterRule.class);
Class<? extends AnnotationHandler<Annotation, AnnotatedElement>> handlerType = (Class<? extends AnnotationHandler<Annotation, AnnotatedElement>>) digesterRule.handledBy();
try {
AnnotationHandler<Annotation, AnnotatedElement> handler = annotationHandlerFactory.newInstance(handlerType);
handler.handle(annotation, element, this.rulesBinder);
} catch (Exception e) {
rulesBinder.addError(e);
}
}
}",0
527,"public static Annotation[] getAnnotationsArrayValue(Annotation annotation) {
Object value = getAnnotationValue(annotation);
if (value != null && value.getClass().isArray() && Annotation.class.isAssignableFrom(value.getClass().getComponentType())) {
return (Annotation[]) value;
}
return null;
}",0
528,"@Override
protected FactoryCreateRule createRule() {
if (type == null && attributeName == null && creationFactory == null) {
reportError(""factoryCreate()"", ""at least one between 'className', 'attributeName' or 'creationFactory' has to be specified"");
}
if (type != null || attributeName != null) {
return new FactoryCreateRule(type, attributeName, ignoreCreateExceptions);
}
return new FactoryCreateRule(creationFactory, ignoreCreateExceptions);
}",0
529,"@Override
public void begin(String namespace, String name, Attributes attributes) throws Exception {
String fileName = attributes.getValue(""url"");
if (fileName != null && fileName.length() > 0) {
final URL xmlRulesResource;
if (fileName.startsWith(CLASSPATH_URL_PREFIX)) {
String path = fileName.substring(CLASSPATH_URL_PREFIX.length());
if ('/' == path.charAt(0)) {
path = path.substring(1);
}
xmlRulesResource = this.targetRulesBinder.getContextClassLoader().getResource(path);
if (xmlRulesResource == null) {
targetRulesBinder.addError(""Resource '%s' not found, please make sure it is in the classpath"", path);
return;
}
} else {
try {
xmlRulesResource = new URL(fileName);
} catch (MalformedURLException e) {
targetRulesBinder.addError(""An error occurred while inculing file from '%s': %s"", fileName, e.getMessage());
return;
}
}
if (memoryRulesBinder.getIncludedFiles().add(xmlRulesResource.toString())) {
install(new FromXmlRulesModule() {
@Override
protected void loadRules() {
loadXMLRules(xmlRulesResource);
}
});
} else {
targetRulesBinder.addError(""Circular file inclusion detected for XML rules: %s"", xmlRulesResource);
}
}
String className = attributes.getValue(""class"");
if (className != null && className.length() > 0) {
try {
Class<?> cls = Class.forName(className);
if (!RulesModule.class.isAssignableFrom(cls)) {
targetRulesBinder.addError(""Class '%s' if not a '%s' implementation"", className, RulesModule.class.getName());
return;
}
RulesModule rulesSource = (RulesModule) cls.newInstance();
install(rulesSource);
} catch (Exception e) {
targetRulesBinder.addError(""Impossible to include programmatic rules from class '%s': %s"", className, e.getMessage());
}
}
}",0
530,"protected LinkedRuleBuilder forPattern(String pattern) {
return memoryRulesBinder.forPattern(pattern);
}",0
531,"@Override
public void end(String namespace, String name) throws Exception {
Object[] parameters = null;
if (paramCount > 0) {
parameters = getDigester().popParams();
if (getDigester().getLogger().isTraceEnabled()) {
for (int i = 0, size = parameters.length; i < size; i++) {
getDigester().getLogger().trace(format(""[CallMethodRule]{%s} parameters[%s]=%s"", getDigester().getMatch(), i, parameters[i]));
}
}
if (paramCount == 1 && parameters[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
parameters = new Object[1];
parameters[0] = bodyText;
if (paramTypes.length == 0) {
paramTypes = new Class[1];
paramTypes[0] = String.class;
}
} else {
}
Object[] paramValues = new Object[paramTypes.length];
for (int i = 0; i < paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(paramTypes[i]))) {
paramValues[i] = ConvertUtils.convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (targetOffset >= 0) {
target = getDigester().peek(targetOffset);
} else {
target = getDigester().peek(getDigester().getCount() + targetOffset);
}
if (target == null) {
throw new SAXException(format(""[CallMethodRule]{%s} Call target is null (targetOffset=%s, stackdepth=%s)"", getDigester().getMatch(), targetOffset, getDigester().getCount()));
}
if (getDigester().getLogger().isDebugEnabled()) {
Formatter formatter = new Formatter().format(""[CallMethodRule]{%s} Call %s.%s("", getDigester().getMatch(), target.getClass().getName(), methodName);
for (int i = 0; i < paramValues.length; i++) {
formatter.format(""%s%s/%s"", (i > 0 ? "", "" : """"), paramValues[i], paramTypes[i].getName());
}
formatter.format("")"");
getDigester().getLogger().debug(formatter.toString());
}
Object result = null;
if (useExactMatch) {
result = MethodUtils.invokeExactMethod(target, methodName, paramValues, paramTypes);
} else {
result = MethodUtils.invokeMethod(target, methodName, paramValues, paramTypes);
}
processMethodCallResult(result);
}",0
532,"@Override
public void end(String namespace, String name) throws Exception {
Object[] parameters = null;
if (paramCount > 0) {
parameters = getDigester().popParams();
if (getDigester().getLogger().isTraceEnabled()) {
for (int i = 0, size = parameters.length; i < size; i++) {
getDigester().getLogger().trace(format(""[CallMethodRule]{%s} parameters[%s]=%s"", getDigester().getMatch(), i, parameters[i]));
}
}
if (paramCount == 1 && parameters[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
parameters = new Object[1];
parameters[0] = bodyText;
if (paramTypes.length == 0) {
paramTypes = new Class[1];
paramTypes[0] = String.class;
}
} else {
}
Object[] paramValues = new Object[paramTypes.length];
for (int i = 0; i < paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(paramTypes[i]))) {
paramValues[i] = ConvertUtils.convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (targetOffset >= 0) {
target = getDigester().peek(targetOffset);
} else {
target = getDigester().peek(getDigester().getCount() + targetOffset);
}
if (target == null) {
throw new SAXException(format(""[CallMethodRule]{%s} Call target is null (targetOffset=%s, stackdepth=%s)"", getDigester().getMatch(), targetOffset, getDigester().getCount()));
}
if (getDigester().getLogger().isDebugEnabled()) {
Formatter formatter = new Formatter().format(""[CallMethodRule]{%s} Call %s.%s("", getDigester().getMatch(), target.getClass().getName(), methodName);
for (int i = 0; i < paramValues.length; i++) {
formatter.format(""%s%s/%s"", (i > 0 ? "", "" : """"), paramValues[i], paramTypes[i].getName());
}
formatter.format("")"");
getDigester().getLogger().debug(formatter.toString());
}
Object result = null;
if (useExactMatch) {
result = MethodUtils.invokeExactMethod(target, methodName, paramValues, paramTypes);
} else {
result = MethodUtils.invokeMethod(target, methodName, paramValues, paramTypes);
}
processMethodCallResult(result);
}",0
533,"public Object[] peekParams(int n) {
int index = (params.size() - 1) - n;
if (index < 0) {
log.warn(""Empty stack (returning null)"");
return (null);
}
try {
return (params.get(index));
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}",0
534,"public Object[] popParams() {
try {
if (log.isTraceEnabled()) {
log.trace(""Popping params"");
}
return (params.pop());
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}",0
535,"public Object[] peekParams() {
try {
return (params.peek());
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}",0
536,private String currChildNamespaceURI = null;,0
537,"@SuppressWarnings(""unchecked"")
private <A extends Annotation, E extends AnnotatedElement, R extends Rule> void handle(A annotation, E element) {
Class<?> annotationType = annotation.annotationType();
if (annotationType.isAnnotationPresent(DigesterRuleList.class)) {
Annotation[] annotations = getAnnotationsArrayValue(annotation);
if (annotations != null && annotations.length > 0) {
for (Annotation ptr : annotations) {
handle(ptr, element);
}
}
} else if (annotationType.isAnnotationPresent(DigesterRule.class)) {
DigesterRule digesterRule = annotationType.getAnnotation(DigesterRule.class);
Class<? extends AnnotationHandler<Annotation, AnnotatedElement>> handlerType = (Class<? extends AnnotationHandler<Annotation, AnnotatedElement>>) digesterRule.handledBy();
try {
AnnotationHandler<Annotation, AnnotatedElement> handler = annotationHandlerFactory.newInstance(handlerType);
handler.handle(annotation, element, this.rulesBinder);
} catch (Exception e) {
rulesBinder.addError(e);
}
}
}",0
538,"@SuppressWarnings(""unchecked"")
private <A extends Annotation, E extends AnnotatedElement, R extends Rule> void handle(A annotation, E element) {
Class<?> annotationType = annotation.annotationType();
if (annotationType.isAnnotationPresent(DigesterRuleList.class)) {
Annotation[] annotations = getAnnotationsArrayValue(annotation);
if (annotations != null && annotations.length > 0) {
for (Annotation ptr : annotations) {
handle(ptr, element);
}
}
} else if (annotationType.isAnnotationPresent(DigesterRule.class)) {
DigesterRule digesterRule = annotationType.getAnnotation(DigesterRule.class);
Class<? extends AnnotationHandler<Annotation, AnnotatedElement>> handlerType = (Class<? extends AnnotationHandler<Annotation, AnnotatedElement>>) digesterRule.handledBy();
try {
AnnotationHandler<Annotation, AnnotatedElement> handler = annotationHandlerFactory.newInstance(handlerType);
handler.handle(annotation, element, this.rulesBinder);
} catch (Exception e) {
rulesBinder.addError(e);
}
}
}",0
539,"protected final void bindRulesFrom(final Class<?> type) {
if (type == null || type.getPackage().getName().startsWith(JAVA_PACKAGE) || rulesBinder.isAlreadyBound(type)) {
return;
}
visitElements(type);
if (!type.isInterface()) {
visitElements(new PrivilegedAction<Constructor<?>[]>() {
public Constructor<?>[] run() {
return type.getDeclaredConstructors();
}
});
visitElements(new PrivilegedAction<Field[]>() {
public Field[] run() {
return type.getDeclaredFields();
}
});
}
visitElements(new PrivilegedAction<Method[]>() {
public Method[] run() {
return type.getDeclaredMethods();
}
});
rulesBinder.markAsBound(type);
bindRulesFrom(type.getSuperclass());
}",0
540,"protected final void bindRulesFrom(final Class<?> type) {
if (type == null || type.getPackage().getName().startsWith(JAVA_PACKAGE) || rulesBinder.isAlreadyBound(type)) {
return;
}
visitElements(type);
if (!type.isInterface()) {
visitElements(new PrivilegedAction<Constructor<?>[]>() {
public Constructor<?>[] run() {
return type.getDeclaredConstructors();
}
});
visitElements(new PrivilegedAction<Field[]>() {
public Field[] run() {
return type.getDeclaredFields();
}
});
}
visitElements(new PrivilegedAction<Method[]>() {
public Method[] run() {
return type.getDeclaredMethods();
}
});
rulesBinder.markAsBound(type);
bindRulesFrom(type.getSuperclass());
}",0
541,"public MethodArgument(int index, Class<?> parameterType, Annotation[] annotations) {
this.index = index;
this.parameterType = parameterType;
this.annotations = annotations;
}",0
542,"public static Annotation[] getAnnotationsArrayValue(Annotation annotation) {
Object value = getAnnotationValue(annotation);
if (value != null && value.getClass().isArray() && Annotation.class.isAssignableFrom(value.getClass().getComponentType())) {
return (Annotation[]) value;
}
return null;
}",0
543,"@Override
protected FactoryCreateRule createRule() {
if (type == null && attributeName == null && creationFactory == null) {
reportError(""factoryCreate()"", ""at least one between 'className', 'attributeName' or 'creationFactory' has to be specified"");
}
if (type != null || attributeName != null) {
return new FactoryCreateRule(type, attributeName, ignoreCreateExceptions);
}
return new FactoryCreateRule(creationFactory, ignoreCreateExceptions);
}",0
544,"@Override
public void begin(String namespace, String name, Attributes attributes) throws Exception {
String fileName = attributes.getValue(""url"");
if (fileName != null && fileName.length() > 0) {
final URL xmlRulesResource;
if (fileName.startsWith(CLASSPATH_URL_PREFIX)) {
String path = fileName.substring(CLASSPATH_URL_PREFIX.length());
if ('/' == path.charAt(0)) {
path = path.substring(1);
}
xmlRulesResource = this.targetRulesBinder.getContextClassLoader().getResource(path);
if (xmlRulesResource == null) {
targetRulesBinder.addError(""Resource '%s' not found, please make sure it is in the classpath"", path);
return;
}
} else {
try {
xmlRulesResource = new URL(fileName);
} catch (MalformedURLException e) {
targetRulesBinder.addError(""An error occurred while inculing file from '%s': %s"", fileName, e.getMessage());
return;
}
}
if (memoryRulesBinder.getIncludedFiles().add(xmlRulesResource.toString())) {
install(new FromXmlRulesModule() {
@Override
protected void loadRules() {
loadXMLRules(xmlRulesResource);
}
});
} else {
targetRulesBinder.addError(""Circular file inclusion detected for XML rules: %s"", xmlRulesResource);
}
}
String className = attributes.getValue(""class"");
if (className != null && className.length() > 0) {
try {
Class<?> cls = Class.forName(className);
if (!RulesModule.class.isAssignableFrom(cls)) {
targetRulesBinder.addError(""Class '%s' if not a '%s' implementation"", className, RulesModule.class.getName());
return;
}
RulesModule rulesSource = (RulesModule) cls.newInstance();
install(rulesSource);
} catch (Exception e) {
targetRulesBinder.addError(""Impossible to include programmatic rules from class '%s': %s"", className, e.getMessage());
}
}
}",0
545,"protected LinkedRuleBuilder forPattern(String pattern) {
return memoryRulesBinder.forPattern(pattern);
}",0
546,"@Override
public void end(String namespace, String name) throws Exception {
Object[] parameters;
if (paramCount > 0) {
parameters = getDigester().popParams();
if (getDigester().getLogger().isTraceEnabled()) {
for (int i = 0, size = parameters.length; i < size; i++) {
getDigester().getLogger().trace(format(""[CallMethodRule]{%s} parameters[%s]=%s"", getDigester().getMatch(), i, parameters[i]));
}
}
if (paramCount == 1 && parameters[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
parameters = new Object[] { bodyText };
if (paramTypes.length == 0) {
paramTypes = new Class[] { String.class };
}
} else {
parameters = new Object[0];
paramTypes = new Class<?>[0];
}
Object[] paramValues = new Object[paramTypes.length];
for (int i = 0; i < paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(paramTypes[i]))) {
paramValues[i] = convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (targetOffset >= 0) {
target = getDigester().peek(targetOffset);
} else {
target = getDigester().peek(getDigester().getCount() + targetOffset);
}
if (target == null) {
throw new SAXException(format(""[CallMethodRule]{%s} Call target is null (targetOffset=%s, stackdepth=%s)"", getDigester().getMatch(), targetOffset, getDigester().getCount()));
}
if (getDigester().getLogger().isDebugEnabled()) {
Formatter formatter = new Formatter().format(""[CallMethodRule]{%s} Call %s.%s("", getDigester().getMatch(), target.getClass().getName(), methodName);
for (int i = 0; i < paramValues.length; i++) {
formatter.format(""%s%s/%s"", (i > 0 ? "", "" : """"), paramValues[i], paramTypes[i].getName());
}
formatter.format("")"");
getDigester().getLogger().debug(formatter.toString());
}
Object result = null;
if (useExactMatch) {
result = invokeExactMethod(target, methodName, paramValues, paramTypes);
} else {
result = invokeMethod(target, methodName, paramValues, paramTypes);
}
processMethodCallResult(result);
}",0
547,"public Object[] popParams() {
try {
if (log.isTraceEnabled()) {
log.trace(""Popping params"");
}
return (params.pop());
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}",0
548,"public Object[] peekParams() {
try {
return (params.peek());
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}",0
549,"public Object[] peekParams(int n) {
int index = (params.size() - 1) - n;
if (index < 0) {
log.warn(""Empty stack (returning null)"");
return (null);
}
try {
return (params.get(index));
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}",0
550,"@SuppressWarnings(""unchecked"")
private <A extends Annotation, E extends AnnotatedElement, R extends Rule> void handle(A annotation, E element) {
Class<?> annotationType = annotation.annotationType();
if (annotationType.isAnnotationPresent(DigesterRuleList.class)) {
Annotation[] annotations = getAnnotationsArrayValue(annotation);
if (annotations != null && annotations.length > 0) {
for (Annotation ptr : annotations) {
handle(ptr, element);
}
}
} else if (annotationType.isAnnotationPresent(DigesterRule.class)) {
DigesterRule digesterRule = annotationType.getAnnotation(DigesterRule.class);
Class<? extends AnnotationHandler<Annotation, AnnotatedElement>> handlerType = (Class<? extends AnnotationHandler<Annotation, AnnotatedElement>>) digesterRule.handledBy();
try {
AnnotationHandler<Annotation, AnnotatedElement> handler = annotationHandlerFactory.newInstance(handlerType);
handler.handle(annotation, element, this.rulesBinder);
} catch (Exception e) {
rulesBinder.addError(e);
}
}
}",0
551,"@SuppressWarnings(""unchecked"")
private <A extends Annotation, E extends AnnotatedElement, R extends Rule> void handle(A annotation, E element) {
Class<?> annotationType = annotation.annotationType();
if (annotationType.isAnnotationPresent(DigesterRuleList.class)) {
Annotation[] annotations = getAnnotationsArrayValue(annotation);
if (annotations != null && annotations.length > 0) {
for (Annotation ptr : annotations) {
handle(ptr, element);
}
}
} else if (annotationType.isAnnotationPresent(DigesterRule.class)) {
DigesterRule digesterRule = annotationType.getAnnotation(DigesterRule.class);
Class<? extends AnnotationHandler<Annotation, AnnotatedElement>> handlerType = (Class<? extends AnnotationHandler<Annotation, AnnotatedElement>>) digesterRule.handledBy();
try {
AnnotationHandler<Annotation, AnnotatedElement> handler = annotationHandlerFactory.newInstance(handlerType);
handler.handle(annotation, element, this.rulesBinder);
} catch (Exception e) {
rulesBinder.addError(e);
}
}
}",0
552,"protected final void bindRulesFrom(final Class<?> type) {
if (type == null || type.getPackage().getName().startsWith(JAVA_PACKAGE) || rulesBinder.isAlreadyBound(type)) {
return;
}
visitElements(type);
if (!type.isInterface()) {
visitElements(new PrivilegedAction<Constructor<?>[]>() {
public Constructor<?>[] run() {
return type.getDeclaredConstructors();
}
});
visitElements(new PrivilegedAction<Field[]>() {
public Field[] run() {
return type.getDeclaredFields();
}
});
}
visitElements(new PrivilegedAction<Method[]>() {
public Method[] run() {
return type.getDeclaredMethods();
}
});
rulesBinder.markAsBound(type);
bindRulesFrom(type.getSuperclass());
}",0
553,"protected final void bindRulesFrom(final Class<?> type) {
if (type == null || type.getPackage().getName().startsWith(JAVA_PACKAGE) || rulesBinder.isAlreadyBound(type)) {
return;
}
visitElements(type);
if (!type.isInterface()) {
visitElements(new PrivilegedAction<Constructor<?>[]>() {
public Constructor<?>[] run() {
return type.getDeclaredConstructors();
}
});
visitElements(new PrivilegedAction<Field[]>() {
public Field[] run() {
return type.getDeclaredFields();
}
});
}
visitElements(new PrivilegedAction<Method[]>() {
public Method[] run() {
return type.getDeclaredMethods();
}
});
rulesBinder.markAsBound(type);
bindRulesFrom(type.getSuperclass());
}",0
554,"public static Annotation[] getAnnotationsArrayValue(Annotation annotation) {
Object value = getAnnotationValue(annotation);
if (value != null && value.getClass().isArray() && Annotation.class.isAssignableFrom(value.getClass().getComponentType())) {
return (Annotation[]) value;
}
return null;
}",0
555,"@Override
protected FactoryCreateRule createRule() {
if (type == null && attributeName == null && creationFactory == null) {
reportError(""factoryCreate()"", ""at least one between 'className', 'attributeName' or 'creationFactory' has to be specified"");
}
if (type != null || attributeName != null) {
return new FactoryCreateRule(type, attributeName, ignoreCreateExceptions);
}
return new FactoryCreateRule(creationFactory, ignoreCreateExceptions);
}",0
556,"@Override
public void begin(String namespace, String name, Attributes attributes) throws Exception {
String fileName = attributes.getValue(""url"");
if (fileName != null && fileName.length() > 0) {
final URL xmlRulesResource;
if (fileName.startsWith(CLASSPATH_URL_PREFIX)) {
String path = fileName.substring(CLASSPATH_URL_PREFIX.length());
if ('/' == path.charAt(0)) {
path = path.substring(1);
}
xmlRulesResource = this.targetRulesBinder.getContextClassLoader().getResource(path);
if (xmlRulesResource == null) {
targetRulesBinder.addError(""Resource '%s' not found, please make sure it is in the classpath"", path);
return;
}
} else {
try {
xmlRulesResource = new URL(fileName);
} catch (MalformedURLException e) {
targetRulesBinder.addError(""An error occurred while inculing file from '%s': %s"", fileName, e.getMessage());
return;
}
}
if (memoryRulesBinder.getIncludedFiles().add(xmlRulesResource.toString())) {
install(new FromXmlRulesModule() {
@Override
protected void loadRules() {
loadXMLRules(xmlRulesResource);
}
});
} else {
targetRulesBinder.addError(""Circular file inclusion detected for XML rules: %s"", xmlRulesResource);
}
}
String className = attributes.getValue(""class"");
if (className != null && className.length() > 0) {
try {
Class<?> cls = Class.forName(className);
if (!RulesModule.class.isAssignableFrom(cls)) {
targetRulesBinder.addError(""Class '%s' if not a '%s' implementation"", className, RulesModule.class.getName());
return;
}
RulesModule rulesSource = (RulesModule) cls.newInstance();
install(rulesSource);
} catch (Exception e) {
targetRulesBinder.addError(""Impossible to include programmatic rules from class '%s': %s"", className, e.getMessage());
}
}
}",0
557,"protected LinkedRuleBuilder forPattern(String pattern) {
return memoryRulesBinder.forPattern(pattern);
}",0
558,"public void end() throws Exception {
Object[] parameters = null;
if (paramCount > 0) {
parameters = (Object[]) digester.popParams();
if (digester.log.isTraceEnabled()) {
for (int i = 0, size = parameters.length; i < size; i++) {
digester.log.trace(""[CallMethodRule]("" + i + "")"" + parameters[i]);
}
}
if (paramCount == 1 && parameters[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
parameters = new Object[1];
parameters[0] = bodyText;
if (paramTypes.length == 0) {
paramTypes = new Class[1];
paramTypes[0] = String.class;
}
} else {
;
}
Object[] paramValues = new Object[paramTypes.length];
for (int i = 0; i < paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(paramTypes[i]))) {
paramValues[i] = ConvertUtils.convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (targetOffset >= 0) {
target = digester.peek(targetOffset);
} else {
target = digester.peek(digester.getCount() + targetOffset);
}
if (target == null) {
StringBuffer sb = new StringBuffer();
sb.append(""[CallMethodRule]{"");
sb.append(digester.match);
sb.append(""} Call target is null ("");
sb.append(""targetOffset="");
sb.append(targetOffset);
sb.append("",stackdepth="");
sb.append(digester.getCount());
sb.append("")"");
throw new org.xml.sax.SAXException(sb.toString());
}
if (digester.log.isDebugEnabled()) {
StringBuffer sb = new StringBuffer(""[CallMethodRule]{"");
sb.append(digester.match);
sb.append(""} Call "");
sb.append(target.getClass().getName());
sb.append(""."");
sb.append(methodName);
sb.append(""("");
for (int i = 0; i < paramValues.length; i++) {
if (i > 0) {
sb.append("","");
}
if (paramValues[i] == null) {
sb.append(""null"");
} else {
sb.append(paramValues[i].toString());
}
sb.append(""/"");
if (paramTypes[i] == null) {
sb.append(""null"");
} else {
sb.append(paramTypes[i].getName());
}
}
sb.append("")"");
digester.log.debug(sb.toString());
}
Object result = null;
if (useExactMatch) {
result = MethodUtils.invokeExactMethod(target, methodName, paramValues, paramTypes);
} else {
result = MethodUtils.invokeMethod(target, methodName, paramValues, paramTypes);
}
processMethodCallResult(result);
}",0
559,"public void end() throws Exception {
Object[] parameters = null;
if (paramCount > 0) {
parameters = (Object[]) digester.popParams();
if (digester.log.isTraceEnabled()) {
for (int i = 0, size = parameters.length; i < size; i++) {
digester.log.trace(""[CallMethodRule]("" + i + "")"" + parameters[i]);
}
}
if (paramCount == 1 && parameters[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
parameters = new Object[1];
parameters[0] = bodyText;
if (paramTypes.length == 0) {
paramTypes = new Class[1];
paramTypes[0] = String.class;
}
} else {
;
}
Object[] paramValues = new Object[paramTypes.length];
for (int i = 0; i < paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(paramTypes[i]))) {
paramValues[i] = ConvertUtils.convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (targetOffset >= 0) {
target = digester.peek(targetOffset);
} else {
target = digester.peek(digester.getCount() + targetOffset);
}
if (target == null) {
StringBuffer sb = new StringBuffer();
sb.append(""[CallMethodRule]{"");
sb.append(digester.match);
sb.append(""} Call target is null ("");
sb.append(""targetOffset="");
sb.append(targetOffset);
sb.append("",stackdepth="");
sb.append(digester.getCount());
sb.append("")"");
throw new org.xml.sax.SAXException(sb.toString());
}
if (digester.log.isDebugEnabled()) {
StringBuffer sb = new StringBuffer(""[CallMethodRule]{"");
sb.append(digester.match);
sb.append(""} Call "");
sb.append(target.getClass().getName());
sb.append(""."");
sb.append(methodName);
sb.append(""("");
for (int i = 0; i < paramValues.length; i++) {
if (i > 0) {
sb.append("","");
}
if (paramValues[i] == null) {
sb.append(""null"");
} else {
sb.append(paramValues[i].toString());
}
sb.append(""/"");
if (paramTypes[i] == null) {
sb.append(""null"");
} else {
sb.append(paramTypes[i].getName());
}
}
sb.append("")"");
digester.log.debug(sb.toString());
}
Object result = null;
if (useExactMatch) {
result = MethodUtils.invokeExactMethod(target, methodName, paramValues, paramTypes);
} else {
result = MethodUtils.invokeMethod(target, methodName, paramValues, paramTypes);
}
processMethodCallResult(result);
}",0
560,"public SAXParser getParser() {
if (parser != null) {
return (parser);
}
try {
if (validating && (schemaLocation != null)) {
Properties properties = new Properties();
properties.put(""SAXParserFactory"", getFactory());
if (schemaLocation != null) {
properties.put(""schemaLocation"", schemaLocation);
properties.put(""schemaLanguage"", schemaLanguage);
}
parser = ParserFeatureSetterFactory.newSAXParser(properties);
} else {
parser = getFactory().newSAXParser();
}
} catch (Exception e) {
log.error(""Digester.getParser: "", e);
return (null);
}
return (parser);
}",0
561,protected String namespaceURI = null;,0
562,private String currChildNamespaceURI = null;,0
563,"protected static String JAXP_SCHEMA_LANGUAGE = ""http://java.sun.com/xml/jaxp/properties/schemaLanguage"";",0
564,"protected static Log log = LogFactory.getLog(""org.apache.commons.digester.Digester.sax"");",0
565,protected static float version;,0
566,"protected static String XERCES_SCHEMA = ""http://apache.org/xml/features/validation/schema"";",0
567,"protected static String XERCES_DYNAMIC = ""http://apache.org/xml/features/validation/dynamic"";",0
568,"private static String getXercesVersion() {
String versionNumber = ""1.0"";
try {
Class versionClass = Class.forName(""org.apache.xerces.impl.Version"");
Method method = versionClass.getMethod(""getVersion"", (Class[]) null);
String version = (String) method.invoke(null, (Object[]) null);
versionNumber = version.substring(""Xerces-J"".length(), version.lastIndexOf("".""));
} catch (Exception ex) {
}
return versionNumber;
}",0
569,protected static String versionNumber = null;,0
570,"protected static Log log = LogFactory.getLog(""org.apache.commons.digester.Digester.sax"");",0
571,"protected static String JAXP_SCHEMA_LANGUAGE = ""http://java.sun.com/xml/jaxp/properties/schemaLanguage"";",0
572,"public final String DFLT_PLUGIN_CLASS_ATTR = ""plugin-class"";",0
573,"public final String DFLT_PLUGIN_ID_ATTR = ""plugin-id"";",0
574,"// TODO: Consider making following four constants static in 2.0
public final String DFLT_PLUGIN_CLASS_ATTR_NS = null;",0
575,"public static String DFLT_METHOD_ATTR = ""method"";",0
576,"public static String DFLT_METHOD_NAME = ""addRules"";",0
577,"public static String DFLT_RULECLASS_ATTR = ""ruleclass"";",0
578,"public static String DFLT_METHOD_NAME = ""addRules"";",0
579,"public static String DFLT_RULECLASS_SUFFIX = ""RuleInfo"";",0
580,"public static String DFLT_METHOD_NAME = ""addRules"";",0
581,"public static String DFLT_RESOURCE_SUFFIX = ""RuleInfo.xml"";",0
582,"public static String DFLT_FILENAME_ATTR = ""file"";",0
583,"public static String DFLT_METHOD_ATTR = ""method"";",0
584,"public static String DFLT_RESOURCE_ATTR = ""resource"";",0
585,"public static String DFLT_FALSEVAL = ""false"";",0
586,"public static String DFLT_PROPS_ATTR = ""setprops"";",0
587,private FromXmlRuleSet ruleSet;,0
588,"@Override
public void end(String namespace, String name) throws Exception {
Object[] parameters;
if (paramCount > 0) {
parameters = getDigester().popParams();
if (getDigester().getLogger().isTraceEnabled()) {
for (int i = 0, size = parameters.length; i < size; i++) {
getDigester().getLogger().trace(format(""[CallMethodRule]{%s} parameters[%s]=%s"", getDigester().getMatch(), i, parameters[i]));
}
}
if (paramCount == 1 && parameters[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
parameters = new Object[] { bodyText };
if (paramTypes.length == 0) {
paramTypes = new Class[] { String.class };
}
} else {
parameters = new Object[0];
paramTypes = new Class<?>[0];
}
Object[] paramValues = new Object[paramTypes.length];
for (int i = 0; i < paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(paramTypes[i]))) {
paramValues[i] = convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (targetOffset >= 0) {
target = getDigester().peek(targetOffset);
} else {
target = getDigester().peek(getDigester().getCount() + targetOffset);
}
if (target == null) {
throw new SAXException(format(""[CallMethodRule]{%s} Call target is null (targetOffset=%s, stackdepth=%s)"", getDigester().getMatch(), targetOffset, getDigester().getCount()));
}
if (getDigester().getLogger().isDebugEnabled()) {
Formatter formatter = new Formatter().format(""[CallMethodRule]{%s} Call %s.%s("", getDigester().getMatch(), target.getClass().getName(), methodName);
for (int i = 0; i < paramValues.length; i++) {
formatter.format(""%s%s/%s"", (i > 0 ? "", "" : """"), paramValues[i], paramTypes[i].getName());
}
formatter.format("")"");
getDigester().getLogger().debug(formatter.toString());
}
Object result = null;
if (useExactMatch) {
result = invokeExactMethod(target, methodName, paramValues, paramTypes);
} else {
result = invokeMethod(target, methodName, paramValues, paramTypes);
}
processMethodCallResult(result);
}",0
589,"public Object[] peekParams() {
try {
return (params.peek());
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}",0
590,"public Object[] peekParams(int n) {
int index = (params.size() - 1) - n;
if (index < 0) {
log.warn(""Empty stack (returning null)"");
return (null);
}
try {
return (params.get(index));
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}",0
591,"public Object[] popParams() {
try {
if (log.isTraceEnabled()) {
log.trace(""Popping params"");
}
return (params.pop());
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}",0
592,"@SuppressWarnings(""unchecked"")
private <A extends Annotation, E extends AnnotatedElement, R extends Rule> void handle(A annotation, E element) {
Class<?> annotationType = annotation.annotationType();
if (annotationType.isAnnotationPresent(DigesterRuleList.class)) {
Annotation[] annotations = getAnnotationsArrayValue(annotation);
if (annotations != null && annotations.length > 0) {
for (Annotation ptr : annotations) {
handle(ptr, element);
}
}
} else if (annotationType.isAnnotationPresent(DigesterRule.class)) {
DigesterRule digesterRule = annotationType.getAnnotation(DigesterRule.class);
Class<? extends AnnotationHandler<Annotation, AnnotatedElement>> handlerType = (Class<? extends AnnotationHandler<Annotation, AnnotatedElement>>) digesterRule.handledBy();
try {
AnnotationHandler<Annotation, AnnotatedElement> handler = annotationHandlerFactory.newInstance(handlerType);
handler.handle(annotation, element, this.rulesBinder);
} catch (Exception e) {
rulesBinder.addError(e);
}
}
}",0
593,"@SuppressWarnings(""unchecked"")
private <A extends Annotation, E extends AnnotatedElement, R extends Rule> void handle(A annotation, E element) {
Class<?> annotationType = annotation.annotationType();
if (annotationType.isAnnotationPresent(DigesterRuleList.class)) {
Annotation[] annotations = getAnnotationsArrayValue(annotation);
if (annotations != null && annotations.length > 0) {
for (Annotation ptr : annotations) {
handle(ptr, element);
}
}
} else if (annotationType.isAnnotationPresent(DigesterRule.class)) {
DigesterRule digesterRule = annotationType.getAnnotation(DigesterRule.class);
Class<? extends AnnotationHandler<Annotation, AnnotatedElement>> handlerType = (Class<? extends AnnotationHandler<Annotation, AnnotatedElement>>) digesterRule.handledBy();
try {
AnnotationHandler<Annotation, AnnotatedElement> handler = annotationHandlerFactory.newInstance(handlerType);
handler.handle(annotation, element, this.rulesBinder);
} catch (Exception e) {
rulesBinder.addError(e);
}
}
}",0
594,"protected final void bindRulesFrom(final Class<?> type) {
if (type == null || type.getPackage().getName().startsWith(JAVA_PACKAGE) || rulesBinder.isAlreadyBound(type)) {
return;
}
visitElements(type);
if (!type.isInterface()) {
visitElements(new PrivilegedAction<Constructor<?>[]>() {
public Constructor<?>[] run() {
return type.getDeclaredConstructors();
}
});
visitElements(new PrivilegedAction<Field[]>() {
public Field[] run() {
return type.getDeclaredFields();
}
});
}
visitElements(new PrivilegedAction<Method[]>() {
public Method[] run() {
return type.getDeclaredMethods();
}
});
rulesBinder.markAsBound(type);
bindRulesFrom(type.getSuperclass());
}",0
595,"protected final void bindRulesFrom(final Class<?> type) {
if (type == null || type.getPackage().getName().startsWith(JAVA_PACKAGE) || rulesBinder.isAlreadyBound(type)) {
return;
}
visitElements(type);
if (!type.isInterface()) {
visitElements(new PrivilegedAction<Constructor<?>[]>() {
public Constructor<?>[] run() {
return type.getDeclaredConstructors();
}
});
visitElements(new PrivilegedAction<Field[]>() {
public Field[] run() {
return type.getDeclaredFields();
}
});
}
visitElements(new PrivilegedAction<Method[]>() {
public Method[] run() {
return type.getDeclaredMethods();
}
});
rulesBinder.markAsBound(type);
bindRulesFrom(type.getSuperclass());
}",0
596,"protected final void bindRulesFrom(final Class<?> type) {
if (type == null || type.getPackage().getName().startsWith(JAVA_PACKAGE) || rulesBinder.isAlreadyBound(type)) {
return;
}
visitElements(type);
if (!type.isInterface()) {
visitElements(new PrivilegedAction<Constructor<?>[]>() {
public Constructor<?>[] run() {
return type.getDeclaredConstructors();
}
});
visitElements(new PrivilegedAction<Field[]>() {
public Field[] run() {
return type.getDeclaredFields();
}
});
}
visitElements(new PrivilegedAction<Method[]>() {
public Method[] run() {
return type.getDeclaredMethods();
}
});
rulesBinder.markAsBound(type);
bindRulesFrom(type.getSuperclass());
}",0
597,"public static Annotation[] getAnnotationsArrayValue(Annotation annotation) {
Object value = getAnnotationValue(annotation);
if (value != null && value.getClass().isArray() && Annotation.class.isAssignableFrom(value.getClass().getComponentType())) {
return (Annotation[]) value;
}
return null;
}",0
598,"@Override
protected FactoryCreateRule createRule() {
if (type == null && attributeName == null && creationFactory == null) {
reportError(""factoryCreate()"", ""at least one between 'className', 'attributeName' or 'creationFactory' has to be specified"");
}
if (type != null || attributeName != null) {
return new FactoryCreateRule(type, attributeName, ignoreCreateExceptions);
}
return new FactoryCreateRule(creationFactory, ignoreCreateExceptions);
}",0
599,"@Override
public void begin(String namespace, String name, Attributes attributes) throws Exception {
String fileName = attributes.getValue(""url"");
if (fileName != null && fileName.length() > 0) {
final URL xmlRulesResource;
if (fileName.startsWith(CLASSPATH_URL_PREFIX)) {
String path = fileName.substring(CLASSPATH_URL_PREFIX.length());
if ('/' == path.charAt(0)) {
path = path.substring(1);
}
xmlRulesResource = this.targetRulesBinder.getContextClassLoader().getResource(path);
if (xmlRulesResource == null) {
targetRulesBinder.addError(""Resource '%s' not found, please make sure it is in the classpath"", path);
return;
}
} else {
try {
xmlRulesResource = new URL(fileName);
} catch (MalformedURLException e) {
targetRulesBinder.addError(""An error occurred while inculing file from '%s': %s"", fileName, e.getMessage());
return;
}
}
if (memoryRulesBinder.getIncludedFiles().add(xmlRulesResource.toString())) {
install(new FromXmlRulesModule() {
@Override
protected void loadRules() {
loadXMLRules(xmlRulesResource);
}
});
} else {
targetRulesBinder.addError(""Circular file inclusion detected for XML rules: %s"", xmlRulesResource);
}
}
String className = attributes.getValue(""class"");
if (className != null && className.length() > 0) {
try {
Class<?> cls = Class.forName(className);
if (!RulesModule.class.isAssignableFrom(cls)) {
targetRulesBinder.addError(""Class '%s' if not a '%s' implementation"", className, RulesModule.class.getName());
return;
}
RulesModule rulesSource = (RulesModule) cls.newInstance();
install(rulesSource);
} catch (Exception e) {
targetRulesBinder.addError(""Impossible to include programmatic rules from class '%s': %s"", className, e.getMessage());
}
}
}",0
600,"protected LinkedRuleBuilder forPattern(String pattern) {
return memoryRulesBinder.forPattern(pattern);
}",0
601,"@Override
public void end(String namespace, String name) throws Exception {
Object[] parameters;
if (paramCount > 0) {
parameters = getDigester().popParams();
if (getDigester().getLogger().isTraceEnabled()) {
for (int i = 0, size = parameters.length; i < size; i++) {
getDigester().getLogger().trace(format(""[CallMethodRule]{%s} parameters[%s]=%s"", getDigester().getMatch(), i, parameters[i]));
}
}
if (paramCount == 1 && parameters[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
parameters = new Object[] { bodyText };
if (paramTypes.length == 0) {
paramTypes = new Class[] { String.class };
}
} else {
parameters = new Object[0];
}
Object[] paramValues = new Object[paramTypes.length];
for (int i = 0; i < paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(paramTypes[i]))) {
paramValues[i] = convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (targetOffset >= 0) {
target = getDigester().peek(targetOffset);
} else {
target = getDigester().peek(getDigester().getCount() + targetOffset);
}
if (target == null) {
throw new SAXException(format(""[CallMethodRule]{%s} Call target is null (targetOffset=%s, stackdepth=%s)"", getDigester().getMatch(), targetOffset, getDigester().getCount()));
}
if (getDigester().getLogger().isDebugEnabled()) {
Formatter formatter = new Formatter().format(""[CallMethodRule]{%s} Call %s.%s("", getDigester().getMatch(), target.getClass().getName(), methodName);
for (int i = 0; i < paramValues.length; i++) {
formatter.format(""%s%s/%s"", (i > 0 ? "", "" : """"), paramValues[i], paramTypes[i].getName());
}
formatter.format("")"");
getDigester().getLogger().debug(formatter.toString());
}
Object result = null;
if (useExactMatch) {
result = invokeExactMethod(target, methodName, paramValues, paramTypes);
} else {
result = invokeMethod(target, methodName, paramValues, paramTypes);
}
processMethodCallResult(result);
}",0
602,private String currChildNamespaceURI = null;,1
603,"public SAXParser getParser() {
if (parser != null) {
return (parser);
}
try {
if (validating && (schemaLocation != null)) {
Properties properties = new Properties();
properties.put(""SAXParserFactory"", getFactory());
if (schemaLocation != null) {
properties.put(""schemaLocation"", schemaLocation);
properties.put(""schemaLanguage"", schemaLanguage);
}
parser = ParserFeatureSetterFactory.newSAXParser(properties);
} else {
parser = getFactory().newSAXParser();
}
} catch (Exception e) {
log.error(""Digester.getParser: "", e);
return (null);
}
return (parser);
}",0
604,private final ClassLoader classLoader;,0
605,"public final String DFLT_PLUGIN_ID_ATTR = ""plugin-id"";",1
606,"private <R extends Rule> RuleProvider<R> addProvider(RuleProvider<R> provider) {
if (keyPattern == null) {
return provider;
}
List<RuleProvider<? extends Rule>> providerLits = providers.get(keyPattern);
if (providerLits == null) {
providerLits = new ArrayList<RuleProvider<? extends Rule>>();
providers.put(keyPattern, providerLits);
}
providerLits.add(provider);
return provider;
}",1
607,"private void invoke() throws Exception {
final Object child = getChild();
final Object parent = getParent();
if (getDigester().getLogger().isDebugEnabled()) {
if (parent == null) {
getDigester().getLogger().debug(format(""[%s]{%s} Call [NULL PARENT].%s(%s)"", getClass().getSimpleName(), getDigester().getMatch(), methodName, child));
} else {
getDigester().getLogger().debug(format(""[%s]{%s} Call %s.%s(%s)"", getClass().getSimpleName(), getDigester().getMatch(), parent.getClass().getName(), methodName, child));
}
}
final Class<?>[] paramTypes = new Class<?>[1];
if (paramType != null) {
paramTypes[0] = getDigester().getClassLoader().loadClass(paramTypeName);
} else {
paramTypes[0] = child.getClass();
}
if (useExactMatch) {
invokeExactMethod(parent, methodName, new Object[] { child }, paramTypes);
} else {
invokeMethod(parent, methodName, new Object[] { child }, paramTypes);
}
}",0
608,private Substitutor substitutor;,1
609,public final String DFLT_PLUGIN_ID_ATTR_NS = null;,0
610,private String namespaceURI;,1
611,"public static String DFLT_RESOURCE_ATTR = ""resource"";",1
612,"protected void install(RulesModule rulesModule) {
this.rulesBinder.install(rulesModule);
}",0
613,"public static String DFLT_PROPS_ATTR = ""setprops"";",1
614,private String namespaceURI;,1
615,"@Override
public void begin(String namespace, String name, Attributes attributes) throws Exception {
Class<?> clazz = this.clazz;
if (clazz == null) {
String realClassName = className;
if (attributeName != null) {
String value = attributes.getValue(attributeName);
if (value != null) {
realClassName = value;
}
}
if (getDigester().getLogger().isDebugEnabled()) {
getDigester().getLogger().debug(format(""[ObjectCreateRule]{%s} New '%s'"", getDigester().getMatch(), realClassName));
}
clazz = getDigester().getClassLoader().loadClass(realClassName);
}
Object instance;
if (constructorArgumentTypes == null || constructorArgumentTypes.length == 0) {
if (getDigester().getLogger().isDebugEnabled()) {
getDigester().getLogger().debug(format(""[ObjectCreateRule]{%s} New '%s' using default empty constructor"", getDigester().getMatch(), clazz.getName()));
}
instance = clazz.newInstance();
} else {
if (proxyManager == null) {
synchronized (this) {
if (proxyManager == null) {
Constructor<?> constructor = getAccessibleConstructor(clazz, constructorArgumentTypes);
if (constructor == null) {
throw new SAXException(format(""[ObjectCreateRule]{%s} Class '%s' does not have a construcor with types"", getDigester().getMatch(), clazz.getName(), Arrays.toString(constructorArgumentTypes)));
}
proxyManager = new ProxyManager(clazz, constructor, defaultConstructorArguments, getDigester());
}
}
}
instance = proxyManager.createProxy();
}
getDigester().push(instance);
}",1
616,"private void invoke() throws Exception {
final Object child = getChild();
final Object parent = getParent();
if (getDigester().getLogger().isDebugEnabled()) {
if (parent == null) {
getDigester().getLogger().debug(format(""[%s]{%s} Call [NULL PARENT].%s(%s)"", getClass().getSimpleName(), getDigester().getMatch(), methodName, child));
} else {
getDigester().getLogger().debug(format(""[%s]{%s} Call %s.%s(%s)"", getClass().getSimpleName(), getDigester().getMatch(), parent.getClass().getName(), methodName, child));
}
}
final Class<?>[] paramTypes = new Class<?>[1];
if (paramType != null) {
paramTypes[0] = getDigester().getClassLoader().loadClass(paramTypeName);
} else {
paramTypes[0] = child.getClass();
}
if (useExactMatch) {
invokeExactMethod(parent, methodName, new Object[] { child }, paramTypes);
} else {
invokeMethod(parent, methodName, new Object[] { child }, paramTypes);
}
}",0
617,"Object createProxy() {
Object[] constructorArguments = new Object[templateConstructorArguments.length];
arraycopy(templateConstructorArguments, 0, constructorArguments, 0, constructorArguments.length);
digester.pushParams(constructorArguments);
DeferredConstructionCallback callback = new DeferredConstructionCallback(constructor, constructorArguments);
Object result;
if (factory == null) {
synchronized (this) {
// check again for null now that we're in the synchronized block:
if (factory == null) {
Enhancer enhancer = new Enhancer();
enhancer.setSuperclass(clazz);
enhancer.setCallback(callback);
enhancer.setClassLoader(digester.getClassLoader());
enhancer.setInterceptDuringConstruction(false);
if (hasDefaultConstructor) {
result = enhancer.create();
} else {
result = enhancer.create(constructor.getParameterTypes(), constructorArguments);
}
factory = (Factory) result;
return result;
}
}
}
if (hasDefaultConstructor) {
result = factory.newInstance(callback);
} else {
result = factory.newInstance(constructor.getParameterTypes(), constructorArguments, new Callback[] { callback });
}
return result;
}",1
618,"public static String DFLT_METHOD_NAME = ""addRules"";",1
619,"protected void addError(String messagePattern, Object... arguments) {
this.rulesBinder.addError(messagePattern, arguments);
}",0
620,private FromXmlRuleSet ruleSet;,1
621,"public static String DFLT_RULECLASS_ATTR = ""ruleclass"";",1
622,"public Object[] popParams() {
try {
if (log.isTraceEnabled()) {
log.trace(""Popping params"");
}
return (params.pop());
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}",0
623,"protected void addError(Throwable t) {
this.rulesBinder.addError(t);
}",0
624,"public DigesterLoader setClassLoader(ClassLoader classLoader) {
if (classLoader == null) {
throw new IllegalArgumentException(""Parameter 'classLoader' cannot be null"");
}
this.classLoader = new BinderClassLoader(classLoader);
return this;
}",1
625,private final List<ErrorMessage> errors;,1
626,"public static String DFLT_FILENAME_ATTR = ""file"";",1
627,"public final String DFLT_PLUGIN_CLASS_ATTR = ""plugin-class"";",1
628,private boolean useContextClassLoader;,1
629,"public MethodArgument(int index, Class<?> parameterType, Annotation[] annotations) {
this.index = index;
this.parameterType = parameterType;
this.annotations = annotations;
}",1
630,"public InputSource resolveEntity(String publicId, String systemId) throws SAXException {
if (saxLog.isDebugEnabled()) {
saxLog.debug(""resolveEntity('"" + publicId + ""', '"" + systemId + ""')"");
}
if (publicId != null)
this.publicId = publicId;
URL entityURL = null;
if (publicId != null) {
entityURL = (URL) entityValidator.get(publicId);
}
if (schemaLocation != null && entityURL == null && systemId != null) {
entityURL = (URL) entityValidator.get(systemId);
}
if (entityURL == null) {
if (systemId == null) {
if (log.isDebugEnabled()) {
log.debug("" Cannot resolve entity: '"" + entityURL + ""'"");
}
return (null);
} else {
if (log.isDebugEnabled()) {
log.debug("" Trying to resolve using system ID '"" + systemId + ""'"");
}
try {
entityURL = new URL(systemId);
} catch (MalformedURLException e) {
throw new IllegalArgumentException(""Malformed URL '"" + systemId + ""' : "" + e.getMessage());
}
}
}
if (log.isDebugEnabled()) {
log.debug("" Resolving to alternate DTD '"" + entityURL + ""'"");
}
try {
return createInputSourceFromURL(entityURL);
} catch (Exception e) {
throw createSAXException(e);
}
}",1
631,"private void invoke() throws Exception {
final Object child = getChild();
final Object parent = getParent();
if (getDigester().getLogger().isDebugEnabled()) {
if (parent == null) {
getDigester().getLogger().debug(format(""[%s]{%s} Call [NULL PARENT].%s(%s)"", getClass().getSimpleName(), getDigester().getMatch(), methodName, child));
} else {
getDigester().getLogger().debug(format(""[%s]{%s} Call %s.%s(%s)"", getClass().getSimpleName(), getDigester().getMatch(), parent.getClass().getName(), methodName, child));
}
}
final Class<?>[] paramTypes = new Class<?>[1];
if (paramType != null) {
paramTypes[0] = getDigester().getClassLoader().loadClass(paramTypeName);
} else {
paramTypes[0] = child.getClass();
}
if (useExactMatch) {
invokeExactMethod(parent, methodName, new Object[] { child }, paramTypes);
} else {
invokeMethod(parent, methodName, new Object[] { child }, paramTypes);
}
}",0
632,private ClassLoader classLoader;,1
633,"@Override
public void end(String namespace, String name) throws Exception {
Object[] parameters = null;
if (this.paramTypes.length > 0) {
parameters = (Object[]) this.getDigester().popParams();
if (this.getDigester().getLog().isTraceEnabled()) {
Formatter formatter = new Formatter(""[CallMethodRule]"");
for (int i = 0, size = parameters.length; i < size; i++) {
if (i > 0) {
formatter.format("", "");
}
formatter.format(""(%s) %s"", i, parameters[i]);
}
this.getDigester().getLog().trace(formatter.toString());
}
if (this.paramTypes.length == 1 && parameters[0] == null) {
return;
}
} else if (this.paramTypes != null && this.paramTypes.length != 0) {
if (this.bodyText == null) {
return;
}
parameters = new Object[] { this.bodyText };
} else {
}
Object[] paramValues = new Object[this.paramTypes.length];
for (int i = 0; i < this.paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(this.paramTypes[i]))) {
paramValues[i] = ConvertUtils.convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (this.targetOffset >= 0) {
target = this.getDigester().peek(this.targetOffset);
} else {
target = this.getDigester().peek(this.getDigester().getCount() + this.targetOffset);
}
if (target == null) {
throw this.getDigester().createSAXException(String.format(""[CallMethodRule]{%s} Call target is null (targetOffset=%s, stackdepth=%s)"", this.getDigester().getMatch(), this.targetOffset, this.getDigester().getCount()));
}
if (this.getDigester().getLog().isDebugEnabled()) {
Formatter formatter = new Formatter().format(""[CallMethodRule]{%s} Call %s.%s("", this.getDigester().getMatch(), target.getClass().getName(), this.methodName);
for (int i = 0; i < paramValues.length; i++) {
if (i > 0) {
formatter.format("", "");
}
formatter.format(""%s/%s"", (paramValues[i] == null ? ""null"" : paramValues[i].toString()), (this.paramTypes[i] == null ? ""null"" : this.paramTypes[i].getName()));
}
formatter.format("")"");
this.getDigester().getLog().debug(formatter.toString());
}
Object result = null;
if (this.useExactMatch) {
result = MethodUtils.invokeExactMethod(target, this.methodName, paramValues, this.paramTypes);
} else {
result = MethodUtils.invokeMethod(target, this.methodName, paramValues, this.paramTypes);
}
processMethodCallResult(result);
}",0
634,"@Override
public String toString() {
return String.format(""ObjectCreateRule[className=%s, attributeName=%s]"", this.type.getClasses(), this.attributeName);
}",0
635,"public static String DFLT_METHOD_NAME = ""addRules"";",1
636,"public static String DFLT_METHOD_NAME = ""addRules"";",1
637,"public static String DFLT_METHOD_ATTR = ""method"";",1
638,"public static String DFLT_METHOD_ATTR = ""method"";",1
639,private Object[] defaultConstructorArguments;,0
640,"public static String DFLT_FALSEVAL = ""false"";",1
641,"public static String DFLT_RULECLASS_SUFFIX = ""RuleInfo"";",1
642,"@Override
public void begin(String namespace, String name, Attributes attributes) throws Exception {
Class<?> clazz = this.clazz;
if (clazz == null) {
String realClassName = className;
if (attributeName != null) {
String value = attributes.getValue(attributeName);
if (value != null) {
realClassName = value;
}
}
if (getDigester().getLogger().isDebugEnabled()) {
getDigester().getLogger().debug(format(""[ObjectCreateRule]{%s} New '%s'"", getDigester().getMatch(), realClassName));
}
clazz = getDigester().getClassLoader().loadClass(realClassName);
}
Object instance;
if (constructorArgumentsTypes == null || constructorArgumentsTypes.length == 0) {
if (getDigester().getLogger().isDebugEnabled()) {
getDigester().getLogger().debug(format(""[ObjectCreateRule]{%s} New '%s' using default empty constructor"", getDigester().getMatch(), clazz.getName()));
}
instance = clazz.newInstance();
} else {
Constructor<?> constructor = getAccessibleConstructor(clazz, constructorArgumentsTypes);
if (constructor == null) {
throw new SAXException(format(""[ObjectCreateRule]{%s} Class '%s' does not have a construcor with types"", getDigester().getMatch(), clazz.getName(), Arrays.toString(constructorArgumentsTypes)));
}
instance = createLazyProxy(constructor);
}
getDigester().push(instance);
}",0
643,Object delegate;,1
644,"public static String DFLT_RESOURCE_SUFFIX = ""RuleInfo.xml"";",1
645,"@Override
public void begin(String namespace, String name, Attributes attributes) throws Exception {
Class<?> clazz = this.clazz;
if (clazz == null) {
String realClassName = className;
if (attributeName != null) {
String value = attributes.getValue(attributeName);
if (value != null) {
realClassName = value;
}
}
if (getDigester().getLogger().isDebugEnabled()) {
getDigester().getLogger().debug(format(""[ObjectCreateRule]{%s} New '%s'"", getDigester().getMatch(), realClassName));
}
clazz = getDigester().getClassLoader().loadClass(realClassName);
}
Object instance;
if (constructorArgumentTypes == null || constructorArgumentTypes.length == 0) {
if (getDigester().getLogger().isDebugEnabled()) {
getDigester().getLogger().debug(format(""[ObjectCreateRule]{%s} New '%s' using default empty constructor"", getDigester().getMatch(), clazz.getName()));
}
instance = clazz.newInstance();
} else {
if (proxyManager == null) {
synchronized (this) {
if (proxyManager == null) {
Constructor<?> constructor = getAccessibleConstructor(clazz, constructorArgumentTypes);
if (constructor == null) {
throw new SAXException(format(""[ObjectCreateRule]{%s} Class '%s' does not have a construcor with types %s"", getDigester().getMatch(), clazz.getName(), Arrays.toString(constructorArgumentTypes)));
}
proxyManager = new ProxyManager(clazz, constructor, defaultConstructorArguments, getDigester());
}
}
}
instance = proxyManager.createProxy();
}
getDigester().push(instance);
}",1
646,"public Object[] peekParams(int n) {
int index = (params.size() - 1) - n;
if (index < 0) {
log.warn(""Empty stack (returning null)"");
return (null);
}
try {
return (params.get(index));
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}",0
647,"@Override
public void end(String namespace, String name) throws Exception {
Object[] parameters = null;
if (paramCount > 0) {
parameters = getDigester().popParams();
if (getDigester().getLogger().isTraceEnabled()) {
for (int i = 0, size = parameters.length; i < size; i++) {
getDigester().getLogger().trace(""[CallMethodRule]("" + i + "")"" + parameters[i]);
}
}
if (paramCount == 1 && parameters[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
parameters = new Object[1];
parameters[0] = bodyText;
if (paramTypes.length == 0) {
paramTypes = new Class[1];
paramTypes[0] = String.class;
}
} else {
}
Object[] paramValues = new Object[paramTypes.length];
for (int i = 0; i < paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(paramTypes[i]))) {
paramValues[i] = ConvertUtils.convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (targetOffset >= 0) {
target = getDigester().peek(targetOffset);
} else {
target = getDigester().peek(getDigester().getCount() + targetOffset);
}
if (target == null) {
StringBuilder sb = new StringBuilder();
sb.append(""[CallMethodRule]{"");
sb.append(getDigester().getMatch());
sb.append(""} Call target is null ("");
sb.append(""targetOffset="");
sb.append(targetOffset);
sb.append("",stackdepth="");
sb.append(getDigester().getCount());
sb.append("")"");
throw new org.xml.sax.SAXException(sb.toString());
}
if (getDigester().getLogger().isDebugEnabled()) {
StringBuilder sb = new StringBuilder(""[CallMethodRule]{"");
sb.append(getDigester().getMatch());
sb.append(""} Call "");
sb.append(target.getClass().getName());
sb.append(""."");
sb.append(methodName);
sb.append(""("");
for (int i = 0; i < paramValues.length; i++) {
if (i > 0) {
sb.append("","");
}
if (paramValues[i] == null) {
sb.append(""null"");
} else {
sb.append(paramValues[i].toString());
}
sb.append(""/"");
if (paramTypes[i] == null) {
sb.append(""null"");
} else {
sb.append(paramTypes[i].getName());
}
}
sb.append("")"");
getDigester().getLogger().debug(sb.toString());
}
Object result = null;
if (useExactMatch) {
result = MethodUtils.invokeExactMethod(target, methodName, paramValues, paramTypes);
} else {
result = MethodUtils.invokeMethod(target, methodName, paramValues, paramTypes);
}
processMethodCallResult(result);
}",0
648,"private void invoke() throws Exception {
Object child = getChild();
Object parent = getParent();
if (getDigester().getLogger().isDebugEnabled()) {
if (parent == null) {
getDigester().getLogger().debug(format(""[%s]{%s} Call [NULL PARENT].%s(%s)"", getClass().getSimpleName(), getDigester().getMatch(), methodName, child));
} else {
getDigester().getLogger().debug(format(""[%s]{%s} Call %s.%s(%s)"", getClass().getSimpleName(), getDigester().getMatch(), parent.getClass().getName(), methodName, child));
}
}
Class<?>[] paramTypes = new Class<?>[1];
if (paramType != null) {
paramTypes[0] = getDigester().getClassLoader().loadClass(paramTypeName);
} else {
paramTypes[0] = child.getClass();
}
if (useExactMatch) {
invokeExactMethod(parent, methodName, new Object[] { child }, paramTypes);
} else {
invokeMethod(parent, methodName, new Object[] { child }, paramTypes);
}
}",0
649,"public Object[] peekParams() {
try {
return (params.peek());
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}",0
